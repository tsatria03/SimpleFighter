#pragma asset data
#pragma document docks
#pragma plugin nvgt_curl

#include"bgt_compat.nvgt"
#include "instance.nvgt"
#include"sound_pool.nvgt"
#include"includes/includes.nvgt"

void main()
{
keyhook.install();
dummy.load("dummy");
sound_global_hrtf = hrtf;
timeelapsed.set_timer(gametimer);
initialize_reverb_pools();
initialize_sound_pools();
set_sound_storage("data/saves/misc.dat");
set_sound_decryption_key("yLnhpXN6@VL=DP&o*7O#Uz)tNHR?!tJUaQ4RP9MO%=ZjL9B",true);
show_game_window("Simple fighter, version "+version);
if(gamstence.is_already_running)
{
alert("error", "You can only have one instence of this game running!");
exit();
}
else
{
charparse();
shieldparse();
weaponparse();
readdata();
readpreffs();
if(directory_exists("sounds") and !directory_empty("sounds"))
{
wait(500);
mainmenu();
}
else
{
wait(500);
downloadsounds();
}
}
}

void destroygame()
{
destroy_all_animals();
destroy_all_humans();
destroy_all_projectiles();
destroy_all_turrets();
destroy_all_robots();
destroy_all_zombies();
}

void dockread(const string&in filename)
{
if(!file_exists(filename))
{
alert("Error","Could not fined "+string_replace(filename, "docks/", "", true));
docksmenu();
}
dockfile.open(filename,"rb");
string docktext=dockfile.read();
dockfile.close();
form.reset();
form.create_window("Viewing "+string_replace(filename, "docks/", "", true),false,false,false);
int dockbox=form.create_input_box(string_replace(filename, "docks/", "", true), docktext, read_only:true, multiline:true);
int dockclose=form.create_button("&close",false,true);
form.focus(dockbox);
while(true)
{
wait(5);
form.monitor();
if (form.is_pressed(dockclose))
{
docksmenu();
}
}
}

void downloadsounds()
{
quest=question("Error", "There are no sounds detected in the game! Would you like to download them now?");
if (quest==1)
{
if (file_exists("sounds.7z"))
{
alert("file found", "This file already exists. The downloader will now skip to the extraction process.");
}
else
{
string result=dl_file("https://github.com/tsatria03/SimpleFighter/releases/download/V6.00/sounds.7z", "sounds.7z");
if (result != "finished")
{
alert("download error", "Download failed or was canceled.");
if(file_exists("sounds.7z")) file_delete("sounds.7z");
mainmenu();
}
alert("finished", "Download completed successfully.");
}
alert("extracting", "Extracting files.");
progslot=temp.play_stationary_extended("pi2.ogg", true, 0, 0, 0, 100);
if(!directory_exists("sounds")) directory_create("sounds");
bool result=run("lib/7zr.exe", "x sounds.7z -o\"sounds\" -y", true, true);
if (result==true)
{
temp.destroy_sound(progslot);
alert("extraction_complete", "Extraction finished successfully.");
if(file_exists("sounds.7z")) file_delete("sounds.7z");
alert("restarting", "The game will now restart to apply changes.");
restart();
}
else
{
alert("extraction_error", "Error occurred during extraction.");
mainmenu();
}
}
else
{
mainmenu();
}
}

void fade_multi_pool(int fade_mode)
{
sound_pool@[] pools = {p, animalpool, arropool, beltpool, bombpool, bosspool, breakerpool, ballpool, bulletpool, calpool, campool, canonpool, chainpool, clockpool, checkpool, dartpool, doorpool, foodpool, firepool, forcepool, grenadepool, humanpool, hazardpool, healpool, helperpool, itempool, knifepool, laserpool, liftpool, minepool, muspool, neadlepool, platpool, passagepool, projpool, pushpool, robpool, rockpool, rocketpool, rpgpool, saberpool, safepool, starpool, signpool, sourcepool, spikepool, telpool, turpool, vehpool, vanpool, wandpool, waterpool, zombpool};
if(fade_mode==0)
{
fade_pitch_pool(pools);
}
if(fade_mode==1)
{
fade_volume_pool(pools);
}
}
void fade_pitch_pool(sound_pool@[] handles, double time=20, double minpitch=20, double amount=2)
{
bool all_faded = false;    
while(!all_faded)
{
all_faded = true;
for(uint h=0; h<handles.length(); h++)
{
for(uint i=0; i<handles[h].items.length(); i++)
{
if(@handles[h].items[i].handle!=null && handles[h].items[i].handle.playing)
{
double current_pitch = handles[h].items[i].handle.pitch;
if(current_pitch > minpitch)
{
double new_pitch = current_pitch - amount;
if(new_pitch < minpitch)
new_pitch = minpitch;
handles[h].items[i].handle.pitch = new_pitch;
all_faded = false;
}
}
}
}
wait(time);
}    
for(uint h=0; h<handles.length(); h++)
{
handles[h].destroy_all();
}
}
void fade_volume_pool(sound_pool@[] handles, double time=0.25, double minvol=-50)
{
for(double current=0; current>minvol; current-=time)
{
for(uint h=0; h<handles.length(); h++)
{
for(uint x=0; x<handles[h].items.length(); x++)
{
if(@handles[h].items[x].handle==null)
continue;
if(handles[h].items[x].handle.playing==false)
continue;
handles[h].items[x].handle.volume = handles[h].items[x].handle.volume-time;
}
}
wait(5);
}
for(uint h=0; h<handles.length(); h++)
{
handles[h].destroy_all();
}
}

void initialize_sound_pools()
{
sound_pool@[] pools = {p, animalpool, arropool, beltpool, bombpool, bosspool, breakerpool, ballpool, bulletpool, calpool, campool, canonpool, chainpool, clockpool, checkpool, dartpool, doorpool, foodpool, firepool, forcepool, grenadepool, humanpool, hazardpool, healpool, helperpool, itempool, knifepool, laserpool, liftpool, minepool, muspool, neadlepool, platpool, passagepool, projpool, pushpool, robpool, rockpool, rocketpool, rpgpool, saberpool, safepool, starpool, signpool, sourcepool, spikepool, telpool, turpool, vehpool, vanpool, wandpool, waterpool, zombpool};
for (uint i = 0; i < pools.length(); i++)
{
@pools[i].mixer = mixer();
pools[i].max_distance = 0;
pools[i].pan_step = 2.5;
pools[i].volume_step = 2.5;
}
}
void update_sound_pools()
{
sound_pool@[] pools = {p, animalpool, arropool, beltpool, bombpool, bosspool, breakerpool, ballpool, bulletpool, calpool, campool, canonpool, chainpool, clockpool, checkpool, dartpool, doorpool, foodpool, firepool, forcepool, grenadepool, humanpool, hazardpool, healpool, helperpool, itempool, knifepool, laserpool, liftpool, minepool, muspool, neadlepool, platpool, passagepool, projpool, pushpool, robpool, rockpool, rocketpool, rpgpool, saberpool, safepool, starpool, signpool, sourcepool, spikepool, telpool, turpool, vehpool, vanpool, wandpool, waterpool, zombpool};
for (uint i = 0; i < pools.length(); i++)
{
pools[i].update_listener_2d(me.x, me.y);
}
}

void pause_pools()
{
sound_pool@[] pools = {animalpool, arropool, beltpool, bombpool, bosspool, breakerpool, ballpool, bulletpool, calpool, campool, canonpool, chainpool, clockpool, checkpool, dartpool, doorpool, foodpool, firepool, forcepool, grenadepool, humanpool, hazardpool, healpool, helperpool, itempool, knifepool, laserpool, liftpool, minepool, muspool, neadlepool, platpool, passagepool, projpool, pushpool, robpool, rockpool, rocketpool, rpgpool, saberpool, safepool, starpool, signpool, sourcepool, spikepool, telpool, turpool, vehpool, vanpool, wandpool, waterpool, zombpool};
    for(uint h = 0; h < pools.length(); h++)
    {
        for(uint i = 0; i < pools[h].items.length(); i++)
        {
            if(@pools[h].items[i].handle == null)
                continue;
            if(pools[h].items[i].handle.playing == false)
                continue;
            pools[h].pause_sound(i);
        }
    }
}
void resume_pools()
{
sound_pool@[] pools = {animalpool, arropool, beltpool, bombpool, bosspool, breakerpool, ballpool, bulletpool, calpool, campool, canonpool, chainpool, clockpool, checkpool, dartpool, doorpool, foodpool, firepool, forcepool, grenadepool, humanpool, hazardpool, healpool, helperpool, itempool, knifepool, laserpool, liftpool, minepool, muspool, neadlepool, platpool, passagepool, projpool, pushpool, robpool, rockpool, rocketpool, rpgpool, saberpool, safepool, starpool, signpool, sourcepool, spikepool, telpool, turpool, vehpool, vanpool, wandpool, waterpool, zombpool};
    for(uint h = 0; h < pools.length(); h++)
    {
        for(uint i = 0; i < pools[h].items.length(); i++)
        {
            pools[h].resume_sound(i);
        }
    }
}

void pause_game()
{
paused=1;
pause_pools();
cammable=false;
fireable=false;
gametimer.pause();
healable=false;
jumpable=false;
moveable=false;
quittable=false;
speedable=false;
spawnable=false;
sittable=false;
telable=false;
turnable=false;
}
void resume_game()
{
paused=0;
resume_pools();
cammable=true;
fireable=true;
gametimer.resume();
healable=true;
jumpable=true;
moveable=true;
quittable=true;
speedable=true;
spawnable=true;
sittable=true;
telable=true;
turnable=true;
}

void resetgame()
{
bonehealth=0;
broken_bones.delete_all();
clear_inv();
destroy_all_charas();
charparse();
aninum=1;
huminum=1;
projnum=1;
robnum=1;
zombnum=1;
facing="left";
me.x=0;
me.y=0;
maxx=100;
maxy=100;
}
void resetpreffs()
{
chartype="default";
keyboardtheme="keyboard";
soundpack="default";
soundcard="Default";
sound_output_device=1;
menutype="default";
autojump=0;
autosave=0;
fademode=0;
heartsound=0;
turnmode=0;
maploadbeeps=1;
maploadsounds=1;
pausem=0;
spacehold=1;
hidedocks=false;
hidegames=false;
hidemaps=false;
hidesets=false;
hrtf=false;
echomode=1;
menumusvolume=0;
gamxit=1;
mreset=0;
mskipnum=1;
up_down=1;
left_right=0;
home_end=0;
wrap=0;
repeat_items=0;
numbers=0;
first_letter=0;
position_info=0;
side_scroll=0;
}
void restart()
{
if(SCRIPT_COMPILED)
{
bool success=run("sf.exe","",false,false);
if(!success)
{
alert("errorr", "Unable to restart sf.exe!");
}
}
else
{
bool success=run("c:\\nvgt\\nvgtw.exe","sf.nvgt",false,false);
if(!success)
{
alert("errorr", "Unable to restart sf.nvgt!");
}
}
}
