checkpoint@[]checkpoints(0);
checkpoint@ last_checkpoint = null;
class checkpoint
{
int getsound, checksound;
int checkx;
int checky;
int checktime;
string checktype;
timer checktimer;
checkpoint(int ckx,int cky,int ckspeed,string cktype)
{
checkx=ckx;
checky=cky;
checktime=ckspeed;
checktype=cktype;
}
}
void checkdeath()
{
if(health<=0 and lifecard<=1)
{
playerdeath();
}
}
void playerdeath()
{
if(last_checkpoint!is null)
{
checkpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/objects/checkpoints/"+last_checkpoint.checktype+"/*get*"),false,0,0,itemvolume,itempitch,false);
me.x=last_checkpoint.checkx;
me.y=last_checkpoint.checky;
health=maxhealth;
hearttime=maxhealth;
if(building==true) load_map(mapname, mapowner);
}
else if(lifecard<=1)
{
if(building==true) destroymap();
if(building==false) destroygame();
p.destroy_sound(painslot);
if(chardeathsound==1) dlgplay(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*death*"), true, true, 30);
dlgplay(find_sound("sounds/"+soundpack+"/objects/platforms/"+gmt(me.x,me.y)+"/*fall*"));
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("You have died. Would you like to try again?",true);
if(mres==0)
{
wait(500);
p.destroy_sound(refslot);
jumpable=false;
moveable=false;
sitting=true;
wepdef=0;
bonehealth=0;
broken_bones.delete_all();
clear_inv();
destroy_all_charas();
charparse();
}
if(mres==1)
{
wait(500);
p.destroy_sound(refslot);
jumpable=false;
moveable=false;
sitting=true;
wepdef=0;
bonehealth=0;
broken_bones.delete_all();
clear_inv();
destroy_all_charas();
charparse();
}
if(mres==2)
{
p.destroy_sound(refslot);
jumpable=false;
moveable=false;
sitting=true;
wepdef=0;
bonehealth=0;
broken_bones.delete_all();
clear_inv();
destroy_all_charas();
charparse();
me.x=0;
me.y=0;
if(building==true) clearmap();
if(building==true) destroymap();
if(building==true) mainmenu();
if(building==false) destroygame();
if(building==false) mainmenu();
}
}
}
void cploop()
{
for(uint i=0; i<checkpoints.length(); i++)
{
if(checkpoints[i].checktimer.elapsed>=checkpoints[i].checktime)
{
checkpoints[i].checksound=checkpool.play_extended_2d(find_sound("sounds/"+soundpack+"/objects/checkpoints/"+checkpoints[i].checktype+"/*loop*"),me.x,me.y,checkpoints[i].checkx,checkpoints[i].checky,0,0,0,0,false,0,0,itemvolume,itempitch,false);
checkpoints[i].checktimer.restart();
}
if(me.x==checkpoints[i].checkx and me.y==checkpoints[i].checky)
{
checkpoints[i].getsound=checkpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/objects/checkpoints/"+checkpoints[i].checktype+"/*get*"),false,0,0,itemvolume,itempitch,false);
@last_checkpoint=checkpoints[i];
checkpoints.remove_at(i);
return;
}
}
}
void spawn_checkpoint(int x,int y,int speed,string checktype)
{
checkpoint cp1(x,y,speed,checktype);
checkpoints.insert_last(cp1);
}
void destroy_all_checkpoints()
{
for(uint i=0; i<checkpoints.length(); i++)
{
checkpool.destroy_sound(checkpoints[i].checksound);
}
checkpoints.resize(0);
@last_checkpoint = null;
}
