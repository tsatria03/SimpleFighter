menuzone@[]menuzones(0);
class menuzone
{
double minx, maxx, miny, maxy;
menuzone(double mx,double mx2,double my,double my2)
{
minx=mx;
maxx=mx2;
miny=my;
maxy=my2;
}
void menzmenu()
{
setupmenu();
m.add_item_tts("add a line", "addline");
m.add_item_tts("edit a line", "editline");
m.add_item_tts("remove a line", "remline");
m.add_item_tts("copy raw map data to clipboard", "clboard");
m.add_item_tts("paste raw map data from clipboard", "clboard2");
m.add_item_tts("Go to a zone on the map","gmz");
m.add_item_tts("delete map", "dcm");
m.add_item_tts("load map", "lm");
m.add_item_tts("new map", "nm");
m.add_item_tts("reload map", "rcm");
int mres=m.run("Map menu",true);
string mapem=m.get_item_name(mres);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mapem=="addline")
{
resume_pools();
mapper.open("data/maps/"+mapname+".map", "ab");
mapdata=mapper.read();
vd.set_disallowed_chars("", false, "This character is not allowed.");
string newline=vd.input_box("","Enter the line you'd like to add.");
mapper.write("\r\n"+newline);
mapper.close();
load_map(mapname, mapowner);(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(mapem=="remline")
{
mapper.open("data/maps/"+mapname+".map", "rb");
mapdata=mapper.read();
string[] lines=string_split(mapdata, "\r\n", true);
string[] filtered_lines;
uint[] original_lines;
filter_empty_lines(lines, filtered_lines, original_lines);
setupmenu();
for (uint i=0; i<filtered_lines.length(); i++)
{
m.add_item_tts(filtered_lines[i],filtered_lines[i], "", true);
}
int mres=m.run("Select a line to remove", true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mres>6 and mres<=filtered_lines.length())
{
uint original_index=original_lines[mres-1];
lines.remove_at(original_index);
string final;
for (uint i=0; i<lines.length(); i++)
{
if(i>0) final+="\r\n";
final+=lines[i];
}
resume_pools();
mapper.open("data/maps/"+mapname+".map", "wb");
mapdata=mapper.read();
mapper.write(final);
mapper.close();
load_map(mapname, mapowner);(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
}
if(mapem=="editline")
{
mapper.open("data/maps/" + mapname + ".map", "rb");
mapdata=mapper.read();
mapper.close();
string[] lines=string_split(mapdata, "\r\n", true);
string[] filtered_lines;
uint[] original_lines;
filter_empty_lines(lines, filtered_lines, original_lines);
setupmenu();
for (uint i=0; i<filtered_lines.length(); i++)
{
m.add_item_tts(filtered_lines[i],filtered_lines[i], "", true);
}
int mres=m.run("Select a line to edit", true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mres>0 and mres<=filtered_lines.length())
{
uint original_index=original_lines[mres-1];
vd.set_disallowed_chars("", false, "This character is not allowed.");
string final=vd.input_box("","line editor", lines[original_index]);
lines[original_index]=final; 
string mapline;
for (uint i=0; i<lines.length(); i++)
{
if(i>0) mapline+="\r\n";
mapline += lines[i];
}
resume_pools();
mapper.open("data/maps/" + mapname + ".map", "wb");
mapper.write(mapline);
mapper.close();
load_map(mapname, mapowner);(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
}
if(mapem=="dcm")
{
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Are you sure you want to delete the current map? This action can't be undone.",true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mres==1)
{
if(file_exists("data/maps/"+mapname+".map")) file_delete("data/maps/"+mapname+".map");
if(fademode==0) fade_multi_pool(0);
if(fademode==1) fade_multi_pool(1);
speak("map deleted");
dlgplay("mapdelete.ogg",false);
me.x=0;
me.y=0;
clearmap();
destroymap();
mapmenu();
}
if(mres==2)
{
resume_pools();
speak("canceled");
return;
}
}
if(mapem=="gmz")
{
if (zones.length() == 0)
{
resume_pools();
speak("There are no zones available on this map.");
return;
}
setupmenu();
for (uint i = 0; i < zones.length(); i++)
{
double width = zones[i].maxx - zones[i].minx + 1;
double height = zones[i].maxy - zones[i].miny + 1;
string zone_desc = zones[i].text + ", " +int(width) + " x " + int(height) + " zone, at " +int(zones[i].minx) + ", " + int(zones[i].miny);
m.add_item_tts(zone_desc, zones[i].text);
}
int mres=m.run("Choose the zone you'd like to go to. There are "+zones.length()+" zones available on this map.", true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if (mres==0 and mres>=zones.length())
{
int selected_zone_index = mres - 1;
zone@ selected_zone = zones[selected_zone_index];
double target_x = selected_zone.minx;
double target_y = selected_zone.miny;
resume_pools();
gop("me", "", target_x, target_y);
}
if (mres>0 and mres<=zones.length())
{
int selected_zone_index = mres - 1;
zone@ selected_zone = zones[selected_zone_index];
double target_x = selected_zone.minx;
double target_y = selected_zone.miny;
resume_pools();
gop("me", "", target_x, target_y);
}
}
if(mapem=="clboard")
{
resume_pools();
mapper.open("data/maps/" + mapname + ".map", "rb");
mapdata=mapper.read();
clipboard_copy_text(mapdata);
speak("The data of "+mapname+" has been copied to your clipboard");
mapper.close();
}
if(mapem=="clboard2")
{
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Are you sure you want to overwrite all existing map data with what's on your clipboard?",true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mres==1)
{
string clipboard_data = clipboard_read_text();
if (clipboard_data == "")
{
dlg_snd("Error. The clipboard is empty.");
resume_pools();
return;
}
string[] lines = string_split(clipboard_data, "\r\n", true);
bool is_valid = validate_map_data(lines);
if (!is_valid)
{
dlg_snd("Error. The clipboard data is invalid.");
resume_pools();
return;
}
mapper.open("data/maps/" + mapname + ".map", "wb");
mapper.write(clipboard_data);
mapper.close();
load_map(mapname, mapowner);(mapname);
mpool.play_stationary("mapupdate.ogg", false);
speak("Map updated.");
}
if(mres==2)
{
resume_pools();
speak("canceled");
return;
}
}
if(mapem=="lm")
{
string[] maps=find_files("data/maps/*.map");
if(maps.length()==0)
{
dlg_snd("Error. There are no maps available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
setupmenu();
for(uint i=0; i<maps.length(); i++)
{
string temp_map_name = string_replace(maps[i], ".map", "", true);
mapper.open("data/maps/"+temp_map_name+".map", "rb");
string temp_map_data = mapper.read();
mapper.close();            
string temp_owner;
string[] lines = delinear(temp_map_data);
for (uint j = 0; j < lines.length(); j++)
{
string[] sd = string_split(lines[j], " ", true);
if (sd[0] == "contributor" && sd.length() == 2)
{
temp_owner = sd[1];
break;
}
}            
m.add_item_tts(temp_map_name + ", created by " + temp_owner + ", Size: " + measure_file_size(file_get_size("data/maps/" + maps[i])));
}
int mres=m.run("Maps menu", true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if (mres==0 and mres>=maps.length())
{
resume_pools();
speak("canceled");
return;
}
if (mres>0 and mres<=maps.length())
{
resume_pools();
mapname=maps[mres-1];
mapname=string_replace(mapname, ".map", "", true);
me.x=0;
me.y=0;
load_map(mapname, mapowner);(mapname);
}
}
}
if(mapem=="nm")
{
resume_pools();
vd.set_disallowed_chars("", false, "This character is not allowed.");
string name=vd.input_box("","Enter the name of this map.");
string name2=vd.input_box("","Enter the author of this map.");
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+=`~", false, "This character is not allowed.");
string mx=vd.input_box("","Enter the minimum length of this map.");
string mx2=vd.input_box("","Enter the maximum length of this map.");
string my=vd.input_box("","Enter the minimum height of this map.");
string my2=vd.input_box("","Enter the maximum height of this map.");
if(mapname=="" and mapowner=="" and minx=="" and maxx=="" and miny=="" and maxy=="")
return;
string mapname=name;
string mapowner=name2;
double minx=string_to_number(mx);
double maxx=string_to_number(mx2);
double miny=string_to_number(my);
double maxy=string_to_number(my2);
string[] platform=find_directories("sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
return;
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
if(file_exists("data/maps/"+mapname+".map"))
{
dlg_snd("Error. A map with this name already exists. Press enter to continue.");
return;
}
else
{
create_map(mapname, mapowner, minx, maxx, miny, maxy, tiletype);
load_map(mapname, mapowner);
}
}
if(mapem=="rcm")
{
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Are you sure you want to reload the current map?",true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mres==1)
{
resume_pools();
load_map(mapname, mapowner);(mapname);
speak("map reloaded");
}
if(mres==2)
{
resume_pools();
speak("canceled");
return;
}
}
}
}
void menuzoneloop()
{
for(uint i=0; i<menuzones.length(); i++)
{
if(menuzones[i].minx<=me.x and menuzones[i].maxx>=me.x and menuzones[i].miny<=me.y and menuzones[i].maxy>=me.y and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and key_repeating(KEY_RETURN))
{
pause_pools();
menuzones[i].menzmenu();
}
}
}
void create_menuzone(double x1,double x2,double y1,double y2)
{
menuzone menz1(x1,x2,y1,y2);
menuzones.insert_last(menz1);
}
void destroy_all_menuzones()
{
menuzones.resize(0);
}

/*store@[]stores(0);
class store
{
double minx, maxx, miny, maxy;
store(double mx,double mx2,double my,double my2)
{
minx=mx;
maxx=mx2;
miny=my;
maxy=my2;
}
void shopmenu()
{
setupmenu();
m.add_item_tts("buy items", "bms");
m.add_item_tts("sell items", "sms");
int mres=m.run("Store menu. What would you like to buy?",true);
string shopem=m.get_item_name(mres);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
}
void buymenu()
{
setupmenu();
m.add_item_tts("health", "hp");
m.add_item_tts("other", "ot");
int mres=m.run("Store menu. What would you like to buy?",true);
string shopem=m.get_item_name(mres);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
}
void sellmenu()
{
setupmenu();
m.add_item_tts("health", "hp");
m.add_item_tts("other", "ot");
int mres=m.run("Store menu. What would you like to buy?",true);
string shopem=m.get_item_name(mres);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
}
void shoploop()
{
for(uint i=0; i<stores.length(); i++)
{
if(stores[i].minx<=me.x and stores[i].maxx>=me.x and stores[i].miny<=me.y and stores[i].maxy>=me.y and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and key_repeating(KEY_RETURN))
{
pause_pools();
stores[i].shopmenu();
}
}
}
void create_store(double x1,double x2,double y1,double y2)
{
store st1(x1,x2,y1,y2);
stores.insert_last(st1);
}
void destroy_all_stores()
{
stores.resize(0);
}*/
