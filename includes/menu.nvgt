uint64 get_directory_size(const string&in dir)
{
uint64 result=0;
string[]@ subdirs = find_directories(dir + "/*");
for (uint i = 0; i < subdirs.length(); i++)
{
result += get_directory_size(dir + "/" + subdirs[i]);
}
string[]@ files = find_sound(dir + "/*");
for (uint i = 0; i < files.length(); i++)
{
result += file_get_size(dir + "/" + files[i]);
}
return result;
}
string measure_file_size(int64 bytes)
{
if(bytes<1024)
{
return bytes+"bytes";
}
else if(bytes<1024*1024)
{
return round(double(bytes)/1024,2)+"KB";
}
else if(bytes<1024*1024*1024)
{
return round(double(bytes)/(1024*1024),2)+"MB";
}
else 
{
return round(double(bytes)/(1024*1024*1024),2)+"GB";
}
}
string string_trim_sides(const string& in str)
{
string result=str;
while (result.length()>0 && (result[0]==" "||result[0]=="\t"||result[0]=="\r"||result[0]=="\n"))
{
result=string_trim_left(result,1);
}
while (result.length()>0 && (result[result.length()-1]==" "||result[result.length()-1]=="\t"||result[result.length()-1]=="\r"||result[result.length()-1]=="\n"))
{
result=string_trim_right(result,1);
}
return result;
}

string keyboardchoosers()
{
string[] keyboardchanges=find_directories("data/sounds/"+soundpack+"/typing themes/*");
setupmenu();
m.set_callback(@keyboardchanges_callback,"");
for (uint i=0; i<keyboardchanges.length(); i++)
{
m.add_item_tts(keyboardchanges[i],keyboardchanges[i],"",true);
}
int mres=m.run("Choose the keyboard theme you would like to use in all input boxes.",true);
if(mres==0)
{
speak("canceled");
settingsmenu();
}
if(mres>0 and mres<=keyboardchanges.length())
{
keyboardtheme=keyboardchanges[mres-1];
dlg("Keyboard theme set. Press enter to continue.");
settingsmenu();
}
return m.get_item_name(mres);
}
int keyboardchanges_callback(dynamic_menu_pro@ m, string data)
{
string keyboardchanges;
if(m.menu_position>0)
keyboardchanges=m.item_list[m.menu_position-1].name;
if(key_down(KEY_LCONTROL) and key_repeating(KEY_T) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_T) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] typesfx=find_sound("data/sounds/"+soundpack+"/typing themes/"+keyboardchanges+"/*type*");
if(typesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/typing themes/"+keyboardchanges+"/"+typesfx[random(0,typesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_S) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_S) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] spacesfx=find_sound("data/sounds/"+soundpack+"/typing themes/"+keyboardchanges+"/*space*");
if(spacesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/typing themes/"+keyboardchanges+"/"+spacesfx[random(0,spacesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_R) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_R) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] entersfx=find_sound("data/sounds/"+soundpack+"/typing themes/"+keyboardchanges+"/*return*");
if(entersfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/typing themes/"+keyboardchanges+"/"+entersfx[random(0,entersfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_D) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_D) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] deletesfx=find_sound("data/sounds/"+soundpack+"/typing themes/"+keyboardchanges+"/*delete*");
if(deletesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/typing themes/"+keyboardchanges+"/"+deletesfx[random(0,deletesfx.length()-1)],false);
}
return 0;
}
string menuchoosers()
{
string[] menuchanges=find_directories("data/sounds/"+soundpack+"/menus/*");
setupmenu();
m.set_callback(@menuchanges_callback,"");
for (uint i=0; i<menuchanges.length(); i++)
{
m.add_item_tts(menuchanges[i],menuchanges[i],"",true);
}
int mres=m.run("Choose the menu theme you would like to use in all menus.",true);
if(mres==0)
{
speak("canceled");
settingsmenu();
}
if(mres>0 and mres<=menuchanges.length())
{
menutype=menuchanges[mres-1];
dlg("Menu sounds set. Press enter to continue.");
settingsmenu();
}
return m.get_item_name(mres);
}
int menuchanges_callback(dynamic_menu_pro@ m, string data)
{
string menuchanges;
if(m.menu_position>0)
menuchanges=m.item_list[m.menu_position-1].name;
if(key_down(KEY_LCONTROL) and key_repeating(KEY_C) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_C) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] mclick=find_sound("data/sounds/"+soundpack+"/menus/"+menuchanges+"/*click*");
if(mclick.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/menus/"+menuchanges+"/"+mclick[random(0,mclick.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] mclos=find_sound("data/sounds/"+soundpack+"/menus/"+menuchanges+"/*close*");
if(mclos.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/menus/"+menuchanges+"/"+mclos[random(0,mclos.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_D) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_D) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] medge=find_sound("data/sounds/"+soundpack+"/menus/"+menuchanges+"/*edge*");
if(medge.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/menus/"+menuchanges+"/"+medge[random(0,medge.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_N) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_N) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] menter=find_sound("data/sounds/"+soundpack+"/menus/"+menuchanges+"/*enter*");
if(menter.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/menus/"+menuchanges+"/"+menter[random(0,menter.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_O) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_O) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] mopen=find_sound("data/sounds/"+soundpack+"/menus/"+menuchanges+"/*open*");
if(mopen.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/menus/"+menuchanges+"/"+mopen[random(0,mopen.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_P) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_P) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] mrap=find_sound("data/sounds/"+soundpack+"/menus/"+menuchanges+"/*wrap*");
if(mrap.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/menus/"+menuchanges+"/"+mrap[random(0,mrap.length()-1)],false);
}
return 0;
}
string liftsmenu()
{
string[] lifts=find_directories("data/sounds/"+soundpack+"/objects/lifts/*");
setupmenu2();
m.set_callback(@lifts_callback,"");
for (uint i=0; i<lifts.length(); i++)
{
string letter=string_replace(lifts[i],".ogg","",true)[0];
string[] liftfilesfx=find_sound("data/sounds/"+soundpack+"/objects/lifts/"+lifts[i]+"/*loop*");
if(liftfilesfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/lifts/"+lifts[i]+"/"+liftfilesfx[random(0,liftfilesfx.length()-1)],lifts[i],letter,true);
}
int mres=m.run("lifts menu.", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=lifts.length())
{
}
return m.get_item_name(mres);
}
int lifts_callback(dynamic_menu_pro@ m, string data)
{
string lifttyp;
if(m.menu_position>0)
lifttyp=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(lifttyp);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(lifttyp);
}
return 0;
}string mplatsmenu()
{
string[] mplats=find_directories("data/sounds/"+soundpack+"/objects/moving platforms/*");
setupmenu2();
m.set_callback(@mplats_callback,"");
for (uint i=0; i<mplats.length(); i++)
{
string letter=string_replace(mplats[i],".ogg","",true)[0];
string[] mpfilesfx=find_sound("data/sounds/"+soundpack+"/objects/moving platforms/"+mplats[i]+"/*loop*");
if(mpfilesfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/moving platforms/"+mplats[i]+"/"+mpfilesfx[random(0,mpfilesfx.length()-1)],mplats[i],letter,true);
}
int mres=m.run("moving platforms menu.", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=mplats.length())
{
}
return m.get_item_name(mres);
}
int mplats_callback(dynamic_menu_pro@ m, string data)
{
string mplattyp;
if(m.menu_position>0)
mplattyp=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(mplattyp);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(mplattyp);
}
return 0;
}
string platsmenu()
{
string[] plats=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
setupmenu();
m.set_callback(@steps_callback,"");
for (uint i=0; i<plats.length(); i++)
{
m.add_item_tts(plats[i],plats[i],"",true);
}
m.add_item_tts("air","air");
int mres=m.run("Select a surface.", true);
if(mres==0)
{
speak("canceled");
}
if(m.get_item_name(mres)=="air")
{
tiletype="air";
return tiletype;
}
if(mres>0 and mres<=plats.length())
{
tiletype=plats[mres-1];
}
return m.get_item_name(mres);
}
int steps_callback(dynamic_menu_pro@ m, string data)
{
string tiletype;
if(m.menu_position>0)
tiletype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] tilers=find_sound("data/sounds/"+soundpack+"/objects/platforms/"+tiletype+"/*step*");
if(tilers.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/platforms/"+tiletype+"/"+tilers[random(0,tilers.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] tilers=find_sound("data/sounds/"+soundpack+"/objects/platforms/"+tiletype+"/*step*");
if(tilers.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/platforms/"+tiletype+"/"+tilers[random(0,tilers.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] tilers=find_sound("data/sounds/"+soundpack+"/objects/platforms/"+tiletype+"/*fall*");
if(tilers.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/platforms/"+tiletype+"/"+tilers[random(0,tilers.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] tilers=find_sound("data/sounds/"+soundpack+"/objects/platforms/"+tiletype+"/*land*");
if(tilers.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/platforms/"+tiletype+"/"+tilers[random(0,tilers.length()-1)],false);
}
return 0;
}
string wallsmenu()
{
string[] borders=find_directories("data/sounds/"+soundpack+"/objects/walls/*");
setupmenu2();
m.set_callback(@walls_callback,"");
for (uint i=0; i<borders.length(); i++)
{
string letter=string_replace(borders[i],"wall","",true)[0];
string[] wallers=find_sound("data/sounds/"+soundpack+"/objects/walls/"+borders[i]+"/*wall*");
if(wallers.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/walls/"+borders[i]+"/"+wallers[random(0,wallers.length()-1)],borders[i],letter,true);
}
m.add_item_tts("wall","wall");
int mres=m.run("Select a wall.", true);
if(mres==0)
{
speak("canceled");
}
if(m.get_item_name(mres)=="wall")
{
walltype="wall";
return walltype;
}
if(mres>0 and mres<=borders.length())
{
}
return m.get_item_name(mres);
}
int walls_callback(dynamic_menu_pro@ m, string data)
{
string walltype;
if(m.menu_position>0)
walltype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(walltype);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(walltype);
}
return 0;
}
string charsmenu()
{
string[] chars=find_directories("data/sounds/"+soundpack+"/characters/*");
setupmenu();
m.set_callback(@chars_callback,"");
for (uint i=0; i<charas.length(); i++)
{
m.add_item_tts(charas[i].name+". attack "+charas[i].attack+". Defence "+charas[i].defence+". Lives "+charas[i].lifecard+".",charas[i].name,"",true);
}
int mres=m.run("Characters menu", true);
if(mres==0)
{
speak("canceled");
settingsmenu();
}
if(mres>0 and mres<=charas.length())
{
int charindex=mres-1;
@current_char=charas[charindex];
chartype = current_char.name;
shieldtype=current_char.shieldtype;
shieldweight=current_char.shieldweight;
attack=current_char.attack;
defence=current_char.defence;
points=current_char.points;
health=current_char.health;
maxhealth=current_char.maxhealth;
lifecard=current_char.lifecard;
level=current_char.level;
levmod=current_char.levmod;
xp=current_char.xp;
xpmod=current_char.xpmod;
xprequiered=current_char.xprequiered;
charcamsound=current_char.charcamsound;
charcamsound2=current_char.charcamsound2;
charcamsound3=current_char.charcamsound3;
chardeathsound=current_char.chardeathsound;
charfallsound=current_char.charfallsound;
charfallsound2=current_char.charfallsound2;
charhurtsound=current_char.charhurtsound;
charhealsound=current_char.charhealsound;
charhealsound2=current_char.charhealsound2;
charhealsound3=current_char.charhealsound3;
charinvsound=current_char.charinvsound;
charjumpsound=current_char.charjumpsound;
charjumpsound2=current_char.charjumpsound2;
charkillsound=current_char.charkillsound;
charlandsound=current_char.charlandsound;
charlevsound=current_char.charlevsound;
charlifesound=current_char.charlifesound;
charshakesound=current_char.charshakesound;
charsitsound=current_char.charsitsound;
charstandsound=current_char.charstandsound;
charswingsound=current_char.charswingsound;
charturnsound=current_char.charturnsound;
if(mres-1<chars.length())
{
chartype=chars[mres-1];
dlg("Character set. Press enter to continue.");
settingsmenu();
}
else
{
chartype="default";
speak("Character set.");
settingsmenu();
}
}
return m.get_item_name(mres);
}
int chars_callback(dynamic_menu_pro@ m, string data)
{
string chars;
if(m.menu_position>0)
chars=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chars+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/characters/"+chars+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chars+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/characters/"+chars+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_D) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_D) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chars+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/characters/"+chars+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_J) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_J) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] jumpsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chars+"/*jump*");
if(jumpsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/characters/"+chars+"/"+jumpsfx[random(0,jumpsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_N) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_N) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/characters/"+chars+"/*name*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/characters/"+chars+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_U) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_U) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] turnsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chars+"/*turn*");
if(turnsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/characters/"+chars+"/"+turnsfx[random(0,turnsfx.length()-1)],false);
}
return 0;
}
string drinkmenu()
{
string[] jucers=find_directories("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/*");
setupmenu();
m.set_callback(@drinks_callback,"");
for (uint i=0; i<jucers.length(); i++)
{
m.add_item_tts(jucers[i],jucers[i],"",true);
}
int mres=m.run("Drinks menu", true);
if(mres==0)
{
itemsmenu();
}
if(mres>0 and mres<=jucers.length())
{
resume_pools();
drinktype=jucers[mres-1];
speak(drinktype+";"+"equipped");
t.destroy_sound(prevslot);
string[] drawsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
return m.get_item_name(mres);
}
int drinks_callback(dynamic_menu_pro@ m, string data)
{
string drinktype;
if(m.menu_position>0)
drinktype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/"+firesfx[random(0,firesfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/"+firesfx[random(0,firesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] drawsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/"+hitsfx[random(0,hitsfx.length()-1)],false); p.update_sound_start_values(itemslot,weaponpan,weaponvolume,weaponpitch);
}
return 0;
}
string foodmenu()
{
string[] spicers=find_directories("data/sounds/"+soundpack+"/equipments/items/sorted/foods/*");
setupmenu();
m.set_callback(@foods_callback,"");
for (uint i=0; i<spicers.length(); i++)
{
m.add_item_tts(spicers[i],spicers[i],"",true);
}
int mres=m.run("Foods menu", true);
if(mres==0)
{
itemsmenu();
}
if(mres>0 and mres<=spicers.length())
{
resume_pools();
foodtype=spicers[mres-1];
speak(foodtype+";"+"equipped");
t.destroy_sound(prevslot);
string[] drawsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/*draw*");
if(drawsfx.length()!=0) itemslot=p.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
return m.get_item_name(mres);
}
int foods_callback(dynamic_menu_pro@ m, string data)
{
string foodtype;
if(m.menu_position>0)
foodtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/"+firesfx[random(0,firesfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/"+firesfx[random(0,firesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] drawsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false); p.update_sound_start_values(itemslot,weaponpan,weaponvolume,weaponpitch);
}
return 0;
}
string healermenu()
{
string[] healthers=find_directories("data/sounds/"+soundpack+"/equipments/items/sorted/healers/*");
setupmenu();
m.set_callback(@healers_callback,"");
for (uint i=0; i<healthers.length(); i++)
{
m.add_item_tts(healthers[i],healthers[i],"",true);
}
int mres=m.run("Healers menu", true);
if(mres==0)
{
itemsmenu();
}
if(mres>0 and mres<=healthers.length())
{
resume_pools();
healtype=healthers[mres-1];
speak(healtype+";"+"equipped");
t.destroy_sound(prevslot);
string[] drawsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/*draw*");
if(drawsfx.length()!=0) itemslot=p.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
return m.get_item_name(mres);
}
int healers_callback(dynamic_menu_pro@ m, string data)
{
string healtype;
if(m.menu_position>0)
healtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/"+firesfx[random(0,firesfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/"+firesfx[random(0,firesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] drawsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false); p.update_sound_start_values(itemslot,weaponpan,weaponvolume,weaponpitch);
}
return 0;
}
string healthsmenu()
{
string[] healtype=find_directories("data/sounds/"+soundpack+"/equipments/items/unsorted/health/*");
setupmenu();
m.set_callback(@healths_callback,"");
for (uint i=0; i<healtype.length(); i++)
{
m.add_item_tts(healtype[i],healtype[i],"",true);
}
int mres=m.run("Healths menu", true);
if(mres==0)
{
setupmenu();
m.add_item_tts("health", "hp");
m.add_item_tts("other", "ot");
int mres=m.run("Items menu",true);
string itsm=m.get_item_name(mres);
if(mres==0)
{
speak("canceled");
}
if(itsm=="hp")
{
string res=healthsmenu();
if(res!="")
{
itemtype="health";
itemtype2=res;
}
}
if(itsm=="ot")
{
string res=othersmenu();
if(res!="")
{
itemtype="other";
itemtype2=res;
}
}
}
if(mres>0 and mres<=healtype.length())
{
itemtype2=healtype[mres-1];
}
return m.get_item_name(mres);
}
int healths_callback(dynamic_menu_pro@ m, string data)
{
string healtype;
if(m.menu_position>0)
healtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] getsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype+"/*get*");
if(getsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype+"/"+getsfx[random(0,getsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] getsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype+"/*get*");
if(getsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype+"/"+getsfx[random(0,getsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string othersmenu()
{
string[] misktype=find_directories("data/sounds/"+soundpack+"/equipments/items/unsorted/other/*");
setupmenu();
m.set_callback(@others_callback,"");
for (uint i=0; i<misktype.length(); i++)
{
m.add_item_tts(misktype[i],misktype[i],"",true);
}
int mres=m.run("others menu", true);
if(mres==0)
{
setupmenu();
m.add_item_tts("health", "hp");
m.add_item_tts("other", "ot");
m.add_item_tts("weapon", "wep");
int mres=m.run("Items menu",true);
string itsm=m.get_item_name(mres);
if(mres==0)
{
speak("canceled");
}
if(itsm=="hp")
{
string res=healthsmenu();
if(res!="")
{
itemtype="health";
itemtype2=res;
}
}
if(itsm=="ot")
{
string res=othersmenu();
if(res!="")
{
itemtype="other";
itemtype2=res;
}
}
}
if(mres>0 and mres<=misktype.length())
{
itemtype2=misktype[mres-1];
}
return m.get_item_name(mres);
}
int others_callback(dynamic_menu_pro@ m, string data)
{
string misktype;
if(m.menu_position>0)
misktype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] getsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype+"/*get*");
if(getsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype+"/"+getsfx[random(0,getsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] getsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype+"/*get*");
if(getsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype+"/"+getsfx[random(0,getsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string archersmenu()
{
string[] archers=find_directories("data/sounds/"+soundpack+"/equipments/weapons/archery/*");
setupmenu();
m.set_callback(@archers_callback,"");
for (uint i=0; i<weapons.length(); i++)
{
m.add_item_tts(weapons[i].name+". attack "+weapons[i].wepdamage+". Horizontal range "+weapons[i].weprange+". Vertical range "+weapons[i].weprange2+". Weight, "+weapons[i].wepweight+" kilograms.",weapons[i].name,"",true);
}
int mres=m.run("Archery menu", true);
if(mres==0)
{
weaponsmenu();
}
if(mres>0 and mres<=weapons.length())
{
int wepindex=mres-1;
@current_weapon=weapons[wepindex];
wepdamage=current_weapon.wepdamage;
wephold=current_weapon.wephold;
weprange=current_weapon.weprange;
weprange2=current_weapon.weprange2;
wepspeed=current_weapon.wepspeed;
weapontime=current_weapon.weapontime;
weapontime2=current_weapon.weapontime2;
wepweight=current_weapon.wepweight;
ammo=current_weapon.ammo;
loadedammo=current_weapon.loadedammo;
maxammo=current_weapon.maxammo;
weplevel=current_weapon.weplevel;
wepdrawsound=current_weapon.wepdrawsound;
wepemptysound=current_weapon.wepemptysound;
wepfiresound=current_weapon.wepfiresound;
wephitsound=current_weapon.wephitsound;
weploopsound=current_weapon.weploopsound;
weprecsound=current_weapon.weprecsound;
wepreloadsound=current_weapon.wepreloadsound;
wepshellsound=current_weapon.wepshellsound;
if(mres-1<archers.length())
{
resume_pools();
weapontype2=archers[mres-1];
}
else
{
resume_pools();
weapontype2="fist";
}
}
return m.get_item_name(mres);
}
int archers_callback(dynamic_menu_pro@ m, string data)
{
string archers;
if(m.menu_position>0)
archers=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/"+firesfx[random(0,firesfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/"+firesfx[random(0,firesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] drawsfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/"+hitsfx[random(0,hitsfx.length()-1)],false); p.update_sound_start_values(weaponslot,weaponpan,weaponvolume,weaponpitch);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_E) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_E) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] emptysfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/*empty*");
if(emptysfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/"+emptysfx[random(0,emptysfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_R) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_R) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] reloadsfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/*reload*");
if(reloadsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/"+reloadsfx[random(0,reloadsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_U) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_U) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] unloadsfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/*unload*");
if(unloadsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/"+unloadsfx[random(0,unloadsfx.length()-1)],false);
}
return 0;
}
string gunsmenu()
{
string[] fighters=find_directories("data/sounds/"+soundpack+"/equipments/weapons/artillery/*");
setupmenu();
m.set_callback(@guns_callback,"");
for (uint i=0; i<weapons.length(); i++)
{
m.add_item_tts(weapons[i].name+". attack "+weapons[i].wepdamage+". Horizontal range "+weapons[i].weprange+". Vertical range "+weapons[i].weprange2+". Weight, "+weapons[i].wepweight+" kilograms.",weapons[i].name,"",true);
}
int mres=m.run("artillery menu", true);
if(mres==0)
{
weaponsmenu();
}
if(mres>0 and mres<=weapons.length())
{
int wepindex=mres-1;
@current_weapon=weapons[wepindex];
wepdamage=current_weapon.wepdamage;
wephold=current_weapon.wephold;
weprange=current_weapon.weprange;
weprange2=current_weapon.weprange2;
wepspeed=current_weapon.wepspeed;
weapontime=current_weapon.weapontime;
weapontime2=current_weapon.weapontime2;
wepweight=current_weapon.wepweight;
ammo=current_weapon.ammo;
loadedammo=current_weapon.loadedammo;
maxammo=current_weapon.maxammo;
weplevel=current_weapon.weplevel;
wepdrawsound=current_weapon.wepdrawsound;
wepemptysound=current_weapon.wepemptysound;
wepfiresound=current_weapon.wepfiresound;
wephitsound=current_weapon.wephitsound;
weploopsound=current_weapon.weploopsound;
weprecsound=current_weapon.weprecsound;
wepreloadsound=current_weapon.wepreloadsound;
wepshellsound=current_weapon.wepshellsound;
if(mres-1<fighters.length())
{
resume_pools();
weapontype2=fighters[mres-1];
}
else
{
resume_pools();
weapontype2="fist";
}
}
return m.get_item_name(mres);
}
int guns_callback(dynamic_menu_pro@ m, string data)
{
string fighters;
if(m.menu_position>0)
fighters=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/"+firesfx[random(0,firesfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/"+firesfx[random(0,firesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] drawsfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/"+hitsfx[random(0,hitsfx.length()-1)],false); p.update_sound_start_values(weaponslot,weaponpan,weaponvolume,weaponpitch);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_E) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_E) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] emptysfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/*empty*");
if(emptysfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/"+emptysfx[random(0,emptysfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_R) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_R) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] reloadsfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/*reload*");
if(reloadsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/"+reloadsfx[random(0,reloadsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_U) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_U) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] unloadsfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/*unload*");
if(unloadsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/"+unloadsfx[random(0,unloadsfx.length()-1)],false);
}
return 0;
}
string explosesmenu()
{
string[] killers=find_directories("data/sounds/"+soundpack+"/equipments/weapons/explosive/*");
setupmenu();
m.set_callback(@bombs_callback,"");
for (uint i=0; i<weapons.length(); i++)
{
m.add_item_tts(weapons[i].name+". attack "+weapons[i].wepdamage+". Horizontal range "+weapons[i].weprange+". Vertical range "+weapons[i].weprange2+". Weight, "+weapons[i].wepweight+" kilograms.",weapons[i].name,"",true);
}
int mres=m.run("explosive menu", true);
if(mres==0)
{
weaponsmenu();
}
if(mres>0 and mres<=weapons.length())
{
int wepindex=mres-1;
@current_weapon=weapons[wepindex];
wepdamage=current_weapon.wepdamage;
wephold=current_weapon.wephold;
weprange=current_weapon.weprange;
weprange2=current_weapon.weprange2;
wepspeed=current_weapon.wepspeed;
weapontime=current_weapon.weapontime;
weapontime2=current_weapon.weapontime2;
wepweight=current_weapon.wepweight;
ammo=current_weapon.ammo;
loadedammo=current_weapon.loadedammo;
maxammo=current_weapon.maxammo;
weplevel=current_weapon.weplevel;
wepdrawsound=current_weapon.wepdrawsound;
wepemptysound=current_weapon.wepemptysound;
wepfiresound=current_weapon.wepfiresound;
wephitsound=current_weapon.wephitsound;
weploopsound=current_weapon.weploopsound;
weprecsound=current_weapon.weprecsound;
wepreloadsound=current_weapon.wepreloadsound;
wepshellsound=current_weapon.wepshellsound;
if(mres-1<killers.length())
{
resume_pools();
weapontype2=killers[mres-1];
}
else
{
resume_pools();
weapontype2="fist";
}
}
return m.get_item_name(mres);
}
int bombs_callback(dynamic_menu_pro@ m, string data)
{
string killers;
if(m.menu_position>0)
killers=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/"+firesfx[random(0,firesfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/"+firesfx[random(0,firesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] drawsfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/"+hitsfx[random(0,hitsfx.length()-1)],false); p.update_sound_start_values(weaponslot,weaponpan,weaponvolume,weaponpitch);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_E) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_E) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] emptysfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/*empty*");
if(emptysfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/"+emptysfx[random(0,emptysfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_R) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_R) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] reloadsfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/*reload*");
if(reloadsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/"+reloadsfx[random(0,reloadsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_U) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_U) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] unloadsfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/*unload*");
if(unloadsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/"+unloadsfx[random(0,unloadsfx.length()-1)],false);
}
return 0;
}
string meleesmenu()
{
string[] brawlers=find_directories("data/sounds/"+soundpack+"/equipments/weapons/melee/*");
setupmenu();
m.set_callback(@swords_callback,"");
for (uint i=0; i<weapons.length(); i++)
{
m.add_item_tts(weapons[i].name+". attack "+weapons[i].wepdamage+". Horizontal range "+weapons[i].weprange+". Vertical range "+weapons[i].weprange2+". Weight, "+weapons[i].wepweight+" kilograms.",weapons[i].name,"",true);
}
int mres=m.run("melee menu", true);
if(mres==0)
{
weaponsmenu();
}
if(mres>0 and mres<=weapons.length())
{
int wepindex=mres-1;
@current_weapon=weapons[wepindex];
wepdamage=current_weapon.wepdamage;
wephold=current_weapon.wephold;
weprange=current_weapon.weprange;
weprange2=current_weapon.weprange2;
wepspeed=current_weapon.wepspeed;
weapontime=current_weapon.weapontime;
weapontime2=current_weapon.weapontime2;
wepweight=current_weapon.wepweight;
ammo=current_weapon.ammo;
loadedammo=current_weapon.loadedammo;
maxammo=current_weapon.maxammo;
weplevel=current_weapon.weplevel;
wepdrawsound=current_weapon.wepdrawsound;
wepemptysound=current_weapon.wepemptysound;
wepfiresound=current_weapon.wepfiresound;
wephitsound=current_weapon.wephitsound;
weploopsound=current_weapon.weploopsound;
weprecsound=current_weapon.weprecsound;
wepreloadsound=current_weapon.wepreloadsound;
wepshellsound=current_weapon.wepshellsound;
if(mres-1<brawlers.length())
{
resume_pools();
weapontype2 = brawlers[mres-1];
}
else
{
resume_pools();
weapontype2="fist";
}
}
return m.get_item_name(mres);
}
int swords_callback(dynamic_menu_pro@ m, string data)
{
string brawlers;
if(m.menu_position>0)
brawlers=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/melee/"+brawlers+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/melee/"+brawlers+"/"+firesfx[random(0,firesfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/melee/"+brawlers+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/melee/"+brawlers+"/"+firesfx[random(0,firesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] drawsfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/melee/"+brawlers+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/melee/"+brawlers+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/equipments/weapons/melee/"+brawlers+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/melee/"+brawlers+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
}
return 0;
}
string shieldsmenu()
{
string[] armor=find_directories("data/sounds/"+soundpack+"/equipments/shields/*");
setupmenu();
m.set_callback(@shields_callback,"");
for (uint i=0; i<shields.length(); i++)
{
m.add_item_tts(shields[i].name+". defence "+shields[i].shielddefence+". Weight, "+shields[i].shieldweight+" kilograms.",shields[i].name,"",true);
}
int mres=m.run("Shields menu", true);
if(mres==0)
{
resume_pools();
speak("canceled");
}
if(mres>0 and mres<=shields.length())
{
int shieldindex=mres-1;
@current_shield=shields[shieldindex];
shielddefence=current_shield.shielddefence;
shieldweight=current_shield.shieldweight;
shieldstrength=current_shield.shieldstrength;
maxshieldstrength=current_shield.maxshieldstrength;
shieldlevel=current_shield.shieldlevel;
shieldbreaksound=current_shield.shieldbreaksound;
shielddrawsound=current_shield.shielddrawsound;
shieldhitsound=current_shield.shieldhitsound;
shieldloopsound=current_shield.shieldloopsound;
shieldremovesound=current_shield.shieldremovesound;
shieldwearsound=current_shield.shieldwearsound;
if(mres-1<armor.length())
{
resume_pools();
shieldtype=armor[mres-1];
t.destroy_sound(prevslot);
string[] drawsfx=find_sound("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*draw*");
if(drawsfx.length()!=0 and shielddrawsound==1) shieldslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+drawsfx[random(0,drawsfx.length()-1)],false,0,0,shieldvolume,shieldpitch);
speak(shieldtype+";"+"equipped");
}
else
{
shieldtype="none";
speak(shieldtype+";"+"equipped");
}
}
return m.get_item_name(mres);
}
int shields_callback(dynamic_menu_pro@ m, string data)
{
string shieldtype;
if(m.menu_position>0)
shieldtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] arqsfx=find_sound("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0) prevslot=t.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] arqsfx=find_sound("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0) prevslot=t.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] drawsfx=find_sound("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+drawsfx[random(0,drawsfx.length()-1)],false,0,0,shieldvolume,shieldpitch);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] breaksfx=find_sound("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*break*");
if(breaksfx.length()!=0) prevslot=t.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+breaksfx[random(0,breaksfx.length()-1)],false,0,0,shieldvolume,shieldpitch);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_R) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_R) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] removesfx=find_sound("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*remove*");
if(removesfx.length()!=0) prevslot=t.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+removesfx[random(0,removesfx.length()-1)],false,0,0,shieldvolume,shieldpitch);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_W) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_W) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] wearsfx=find_sound("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*wear*");
if(wearsfx.length()!=0) prevslot=t.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+wearsfx[random(0,wearsfx.length()-1)],false,0,0,shieldvolume,shieldpitch);
}
return 0;
}
string animalsmenu(bool include_random=false)
{
string[] animaltype=find_directories("data/sounds/"+soundpack+"/npc/normal/animals/*");
setupmenu();
m.set_callback(@animals_callback,"");
for (uint i=0; i<animaltype.length(); i++)
{
m.add_item_tts(animaltype[i],animaltype[i],"",true);
}
if(include_random==true) m.add_item_tts("random","random");
int mres=m.run("Animals menu", true);
if(mres==0)
{
speak("canceled");
}
if(m.get_item_name(mres)=="random")
{
return "random";
}
if(mres>0 and mres<=animals.length())
{
amtype=animaltype[mres-1];
}
return m.get_item_name(mres);
}
int animals_callback(dynamic_menu_pro@ m, string data)
{
string animaltype;
if(m.menu_position>0)
animaltype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/*taunt*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
string bombsmenu()
{
string[] bombtype=find_directories("data/sounds/"+soundpack+"/objects/bombs/*");
setupmenu();
m.set_callback(@bombes_callback,"");
for (uint i=0; i<bombtype.length(); i++)
{
m.add_item_tts(bombtype[i],bombtype[i],"",true);
}
int mres=m.run("bombs menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=bombs.length())
{
botype=bombtype[mres-1];
}
return m.get_item_name(mres);
}
int bombes_callback(dynamic_menu_pro@ m, string data)
{
string bombtype;
if(m.menu_position>0)
bombtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/objects/bombs/"+bombtype+"/*land*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/bombs/"+bombtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/objects/bombs/"+bombtype+"/*land*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/bombs/"+bombtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/objects/bombs/"+bombtype+"/*fall*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/bombs/"+bombtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string floorsmenu()
{
string[] floorbtype=find_directories("data/sounds/"+soundpack+"/objects/floor breakers/*");
setupmenu();
m.set_callback(@floores_callback,"");
for (uint i=0; i<floorbtype.length(); i++)
{
m.add_item_tts(floorbtype[i],floorbtype[i],"",true);
}
int mres=m.run("floor breakers menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=bombs.length())
{
floortyp=floorbtype[mres-1];
}
return m.get_item_name(mres);
}
int floores_callback(dynamic_menu_pro@ m, string data)
{
string floorbtype;
if(m.menu_position>0)
floorbtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/objects/floor breakers/"+floorbtype+"/*spawn*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/floor breakers/"+floorbtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/objects/bombs/"+floorbtype+"/*land*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/bombs/"+floorbtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string timbombsmenu()
{
string[] timbombtype=find_directories("data/sounds/"+soundpack+"/objects/time bombs/*");
setupmenu();
m.set_callback(@timbombes_callback,"");
for (uint i=0; i<timbombtype.length(); i++)
{
m.add_item_tts(timbombtype[i],timbombtype[i],"",true);
}
int mres=m.run("time bombs menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=bombs.length())
{
timbotype=timbombtype[mres-1];
}
return m.get_item_name(mres);
}
int timbombes_callback(dynamic_menu_pro@ m, string data)
{
string timbombtype;
if(m.menu_position>0)
timbombtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/objects/time bombs/"+timbombtype+"/*land*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/time bombs/"+timbombtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/objects/time bombs/"+timbombtype+"/*land*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/time bombs/"+timbombtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/objects/time bombs/"+timbombtype+"/*tick*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/time bombs/"+timbombtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string checksmenu()
{
string[] checktype=find_directories("data/sounds/"+soundpack+"/objects/checkpoints/*");
setupmenu();
m.set_callback(@checks_callback,"");
for (uint i=0; i<checktype.length(); i++)
{
m.add_item_tts(checktype[i],checktype[i],"",true);
}
int mres=m.run("checkpoints menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=checkpoints.length())
{
checktyp=checktype[mres-1];
}
return m.get_item_name(mres);
}
int checks_callback(dynamic_menu_pro@ m, string data)
{
string checktype;
if(m.menu_position>0)
checktype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] getsfx=find_sound("data/sounds/"+soundpack+"/objects/checkpoints/"+checktype+"/*get*");
if(getsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/checkpoints/"+checktype+"/"+getsfx[random(0,getsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/objects/checkpoints/"+checktype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/checkpoints/"+checktype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/objects/checkpoints/"+checktype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/checkpoints/"+checktype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string destsmenu()
{
string[] desttype=find_directories("data/sounds/"+soundpack+"/objects/doors/dest/*");
setupmenu();
m.set_callback(@dests_callback,"");
for (uint i=0; i<desttype.length(); i++)
{
m.add_item_tts(desttype[i],desttype[i],"",true);
}
int mres=m.run("door destructions menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=desttype.length())
{
desttyp=desttype[mres-1];
}
return m.get_item_name(mres);
}
int dests_callback(dynamic_menu_pro@ m, string data)
{
string desttype;
if(m.menu_position>0)
desttype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/objects/doors/dest/"+desttype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/doors/dest/"+desttype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/objects/doors/dest/"+desttype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/doors/dest/"+desttype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
string enemiesmenu(bool include_random=false)
{
string[] enemytype=find_directories("data/sounds/"+soundpack+"/npc/normal/enemies/*");
setupmenu();
m.set_callback(@enemies_callback,"");
for (uint i=0; i<enemytype.length(); i++)
{
m.add_item_tts(enemytype[i],enemytype[i],"",true);
}
if(include_random==true) m.add_item_tts("random","random");
int mres=m.run("enemies menu", true);
if(mres==0)
{
speak("canceled");
}
if(m.get_item_name(mres)=="random")
{
return "random";
}
if(mres>0 and mres<=enemies.length())
{
emtype=enemytype[mres-1];
}
return m.get_item_name(mres);
}
int enemies_callback(dynamic_menu_pro@ m, string data)
{
string enemytype;
if(m.menu_position>0)
enemytype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemytype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemytype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemytype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemytype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemytype+"/*taunt*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemytype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemytype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemytype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
string projesmenu(bool include_random=false)
{
string[] projtype=find_directories("data/sounds/"+soundpack+"/npc/normal/projectiles/*");
setupmenu();
m.set_callback(@projectiles_callback,"");
for (uint i=0; i<projtype.length(); i++)
{
m.add_item_tts(projtype[i],projtype[i],"",true);
}
if(include_random==true) m.add_item_tts("random","random");
int mres=m.run("projectiles menu", true);
if(mres==0)
{
speak("canceled");
}
if(m.get_item_name(mres)=="random")
{
return "random";
}
if(mres>0 and mres<=projectiles.length())
{
potype=projtype[mres-1];
}
return m.get_item_name(mres);
}
int projectiles_callback(dynamic_menu_pro@ m, string data)
{
string projtype;
if(m.menu_position>0)
projtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
string robotsmenu(bool include_random=false)
{
string[] robottype=find_directories("data/sounds/"+soundpack+"/npc/normal/robots/*");
setupmenu();
m.set_callback(@robots_callback,"");
for (uint i=0; i<robottype.length(); i++)
{
m.add_item_tts(robottype[i],robottype[i],"",true);
}
if(include_random==true) m.add_item_tts("random","random");
int mres=m.run("robots menu", true);
if(mres==0)
{
speak("canceled");
}
if(m.get_item_name(mres)=="random")
{
return "random";
}
if(mres>0 and mres<=robots.length())
{
rotype=robottype[mres-1];
}
return m.get_item_name(mres);
}
int robots_callback(dynamic_menu_pro@ m, string data)
{
string robottype;
if(m.menu_position>0)
robottype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/*taunt*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
string bossesmenu()
{
string[] bosstype=find_directories("data/sounds/"+soundpack+"/npc/boss/*");
setupmenu();
m.set_callback(@bosses_callback,"");
for (uint i=0; i<bosstype.length(); i++)
{
m.add_item_tts(bosstype[i],bosstype[i],"",true);
}
int mres=m.run("bosses menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=bosses.length())
{
bosstyp=bosstype[mres-1];
}
return m.get_item_name(mres);
}
int bosses_callback(dynamic_menu_pro@ m, string data)
{
string bosstype;
if(m.menu_position>0)
bosstype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
string turretsmenu()
{
string[] turtype=find_directories("data/sounds/"+soundpack+"/npc/normal/turrets/*");
setupmenu();
m.set_callback(@turrets_callback,"");
for (uint i=0; i<turtype.length(); i++)
{
m.add_item_tts(turtype[i],turtype[i],"",true);
}
int mres=m.run("turrets menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=turrets.length())
{
tutype=turtype[mres-1];
}
return m.get_item_name(mres);
}
int turrets_callback(dynamic_menu_pro@ m, string data)
{
string turtype;
if(m.menu_position>0)
turtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
string zombiesmenu(bool include_random=false)
{
string[] zombietype=find_directories("data/sounds/"+soundpack+"/npc/normal/zombies/*");
setupmenu();
m.set_callback(@zombies_callback,"");
for (uint i=0; i<zombietype.length(); i++)
{
m.add_item_tts(zombietype[i],zombietype[i],"",true);
}
if(include_random==true) m.add_item_tts("random","random");
int mres=m.run("zombies menu", true);
if(mres==0)
{
speak("canceled");
}
if(m.get_item_name(mres)=="random")
{
return "random";
}
if(mres>0 and mres<=zombies.length())
{
zotype=zombietype[mres-1];
}
return m.get_item_name(mres);
}
int zombies_callback(dynamic_menu_pro@ m, string data)
{
string zombietype;
if(m.menu_position>0)
zombietype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/*taunt*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
string hazardsmenu()
{
string[] hazardtype=find_directories("data/sounds/"+soundpack+"/objects/hazards/*");
setupmenu();
m.set_callback(@hazards_callback,"");
for (uint i=0; i<hazardtype.length(); i++)
{
m.add_item_tts(hazardtype[i],hazardtype[i],"",true);
}
int mres=m.run("Hazards menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=hazardtype.length())
{
hazztype=hazardtype[mres-1];
}
return m.get_item_name(mres);
}
int hazards_callback(dynamic_menu_pro@ m, string data)
{
string hazardtype;
if(m.menu_position>0)
hazardtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/objects/hazards/"+hazardtype+"/*fall*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/hazards/"+hazardtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/objects/hazards/"+hazardtype+"/*fall*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/hazards/"+hazardtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/objects/hazards/"+hazardtype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/hazards/"+hazardtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string teleportersmenu()
{
string[] teletype=find_directories("data/sounds/"+soundpack+"/objects/teleporters/*");
setupmenu();
m.set_callback(@teleporters_callback,"");
for (uint i=0; i<teletype.length(); i++)
{
m.add_item_tts(teletype[i],teletype[i],"",true);
}
int mres=m.run("teleporters menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=teletype.length())
{
teltype=teletype[mres-1];
}
return m.get_item_name(mres);
}
int teleporters_callback(dynamic_menu_pro@ m, string data)
{
string teletype;
if(m.menu_position>0)
teletype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/objects/teleporters/"+teletype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/teleporters/"+teletype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/objects/teleporters/"+teletype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/teleporters/"+teletype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/objects/teleporters/"+teletype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/teleporters/"+teletype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string forcesmenu()
{
string[] forcetype=find_directories("data/sounds/"+soundpack+"/objects/force fields/*");
setupmenu();
m.set_callback(@forcefields_callback,"");
for (uint i=0; i<forcetype.length(); i++)
{
m.add_item_tts(forcetype[i],forcetype[i],"",true);
}
int mres=m.run("force fields menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=forcetype.length())
{
forcetyp=forcetype[mres-1];
}
return m.get_item_name(mres);
}
int forcefields_callback(dynamic_menu_pro@ m, string data)
{
string forcetype;
if(m.menu_position>0)
forcetype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/objects/force fields/"+forcetype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/force fields/"+forcetype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/objects/force fields/"+forcetype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/force fields/"+forcetype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_N) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_N) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] actsfx=find_sound("data/sounds/"+soundpack+"/objects/force fields/"+forcetype+"/*on*");
if(actsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/force fields/"+forcetype+"/"+actsfx[random(0,actsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_O) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_O) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] deactsfx=find_sound("data/sounds/"+soundpack+"/objects/force fields/"+forcetype+"/*off*");
if(deactsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/force fields/"+forcetype+"/"+deactsfx[random(0,deactsfx.length()-1)],false);
}
return 0;
}
string minesmenu()
{
string[] minetype=find_directories("data/sounds/"+soundpack+"/objects/mines/*");
setupmenu();
m.set_callback(@mines_callback,"");
for (uint i=0; i<minetype.length(); i++)
{
m.add_item_tts(minetype[i],minetype[i],"",true);
}
int mres=m.run("mines menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=minetype.length())
{
minetyp=minetype[mres-1];
}
return m.get_item_name(mres);
}
int mines_callback(dynamic_menu_pro@ m, string data)
{
string minetype;
if(m.menu_position>0)
minetype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_I) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_I) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] lightsfx=find_sound("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/*light*");
if(lightsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/"+lightsfx[random(0,lightsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_N) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_N) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] spawnsfx=find_sound("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/*spawn*");
if(spawnsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/"+spawnsfx[random(0,spawnsfx.length()-1)],false);
}
return 0;
}
string spikesmenu()
{
string[] spiketype=find_directories("data/sounds/"+soundpack+"/objects/spikes/*");
setupmenu();
m.set_callback(@spikes_callback,"");
for (uint i=0; i<spiketype.length(); i++)
{
m.add_item_tts(spiketype[i],spiketype[i],"",true);
}
int mres=m.run("spikes menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=spiketype.length())
{
spiktype=spiketype[mres-1];
}
return m.get_item_name(mres);
}
int spikes_callback(dynamic_menu_pro@ m, string data)
{
string spiketype;
if(m.menu_position>0)
spiketype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/objects/spikes/"+spiketype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/spikes/"+spiketype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/objects/spikes/"+spiketype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/spikes/"+spiketype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/objects/spikes/"+spiketype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/spikes/"+spiketype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string dloopsmenu()
{
string[] looptype=find_directories("data/sounds/"+soundpack+"/objects/doors/loop/*");
setupmenu2();
m.set_callback(@dloops_callback,"");
for (uint i=0; i<looptype.length(); i++)
{
string[] loopsfx=find_sound("data/sounds/"+soundpack+"/objects/doors/loop/"+looptype[i]+"/*loop*");
if(loopsfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/doors/loop/"+looptype[i]+"/"+loopsfx[random(0,loopsfx.length()-1)],looptype[i],"l",true);
}
m.add_item_tts("none","none");
int mres=m.run("Loop sounds menu", true);
if(mres==0)
{
looptyp="none";
return "none";
}
if(m.get_item_name(mres)=="none")
{
looptyp="none";
return "none";
}
if(mres>0 and mres<=looptype.length())
{
looptyp=looptype[mres-1];
}
return m.get_item_name(mres);
}
int dloops_callback(dynamic_menu_pro@ m, string data)
{
string looptype;
if(m.menu_position>0)
looptype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(looptype);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(looptype);
}
return 0;
}
string dmovesmenu()
{
string[] movetype=find_directories("data/sounds/"+soundpack+"/objects/doors/move/*");
setupmenu2();
m.set_callback(@dmoves_callback,"");
for (uint i=0; i<movetype.length(); i++)
{
string[] movesfx=find_sound("data/sounds/"+soundpack+"/objects/doors/move/"+movetype[i]+"/*move*");
if(movesfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/doors/move/"+movetype[i]+"/"+movesfx[random(0,movesfx.length()-1)],movetype[i],"m",true);
}
m.add_item_tts("none","none");
int mres=m.run("move sounds menu", true);
if(mres==0)
{
movtyp="none";
return "none";
}
if(m.get_item_name(mres)=="none")
{
movtyp="none";
return "none";
}
if(mres>0 and mres<=movetype.length())
{
movtyp=movetype[mres-1];
}
return m.get_item_name(mres);
}
int dmoves_callback(dynamic_menu_pro@ m, string data)
{
string movetype;
if(m.menu_position>0)
movetype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(movetype);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(movetype);
}
return 0;
}
string dopensmenu()
{
string[] opentype=find_directories("data/sounds/"+soundpack+"/objects/doors/open/*");
setupmenu2();
m.set_callback(@dopens_callback,"");
for (uint i=0; i<opentype.length(); i++)
{
string[] opensfx=find_sound("data/sounds/"+soundpack+"/objects/doors/open/"+opentype[i]+"/*open*");
if(opensfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/doors/open/"+opentype[i]+"/"+opensfx[random(0,opensfx.length()-1)],opentype[i],"o",true);
}
m.add_item_tts("none","none");
int mres=m.run("open sounds menu", true);
if(mres==0)
{
opentyp="none";
return "none";
}
if(m.get_item_name(mres)=="none")
{
opentyp="none";
return "none";
}
if(mres>0 and mres<=opentype.length())
{
opentyp=opentype[mres-1];
}
return m.get_item_name(mres);
}
int dopens_callback(dynamic_menu_pro@ m, string data)
{
string opentype;
if(m.menu_position>0)
opentype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(opentype);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(opentype);
}
return 0;
}
string dclosesmenu()
{
string[] closetype=find_directories("data/sounds/"+soundpack+"/objects/doors/close/*");
setupmenu2();
m.set_callback(@dcloses_callback,"");
for (uint i=0; i<closetype.length(); i++)
{
string[] closesfx=find_sound("data/sounds/"+soundpack+"/objects/doors/close/"+closetype[i]+"/*close*");
if(closesfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/doors/close/"+closetype[i]+"/"+closesfx[random(0,closesfx.length()-1)],closetype[i],"c",true);
}
m.add_item_tts("none","none");
int mres=m.run("close sounds menu", true);
if(mres==0)
{
clostyp="none";
return "none";
}
if(m.get_item_name(mres)=="none")
{
clostyp="none";
return "none";
}
if(mres>0 and mres<=closetype.length())
{
clostyp=closetype[mres-1];
}
return m.get_item_name(mres);
}
int dcloses_callback(dynamic_menu_pro@ m, string data)
{
string closetype;
if(m.menu_position>0)
closetype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(closetype);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(closetype);
}
return 0;
}
string dlgsmenu()
{
string[] dlgtype=find_directories("data/sounds/"+soundpack+"/objects/dialogs/*");
setupmenu();
m.set_callback(@dialogs_callback,"");
for (uint i=0; i<dlgtype.length(); i++)
{
m.add_item_tts(dlgtype[i],dlgtype[i],"",true);
}
int mres=m.run("Dialogs menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=dlgtype.length())
{
dlgtyp=dlgtype[mres-1];
}
return m.get_item_name(mres);
}
int dialogs_callback(dynamic_menu_pro@ m, string data)
{
string dlgtype;
if(m.menu_position>0)
dlgtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] scrollsfx=find_sound("data/sounds/"+soundpack+"/objects/dialogs/"+dlgtype+"/*scroll*");
if(scrollsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/dialogs/"+dlgtype+"/"+scrollsfx[random(0,scrollsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] scrollsfx=find_sound("data/sounds/"+soundpack+"/objects/dialogs/"+dlgtype+"/*scroll*");
if(scrollsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/dialogs/"+dlgtype+"/"+scrollsfx[random(0,scrollsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] opensfx=find_sound("data/sounds/"+soundpack+"/objects/dialogs/"+dlgtype+"/*open*");
if(opensfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/dialogs/"+dlgtype+"/"+opensfx[random(0,opensfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] closesfx=find_sound("data/sounds/"+soundpack+"/objects/dialogs/"+dlgtype+"/*close*");
if(closesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/dialogs/"+dlgtype+"/"+closesfx[random(0,closesfx.length()-1)],false);
}
return 0;
}
string calandersmenu()
{
string[] calandertype=find_directories("data/sounds/"+soundpack+"/objects/calanders/*");
setupmenu();
m.set_callback(@calanders_callback,"");
for (uint i=0; i<calandertype.length(); i++)
{
m.add_item_tts(calandertype[i],calandertype[i],"",true);
}
int mres=m.run("calanders menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=calandertype.length())
{
calandertyp=calandertype[mres-1];
}
return m.get_item_name(mres);
}
int calanders_callback(dynamic_menu_pro@ m, string data)
{
string calandertype;
if(m.menu_position>0)
calandertype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] pressfxsfx=find_sound("data/sounds/"+soundpack+"/objects/calanders/"+calandertype+"/*pres*");
if(pressfxsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/calanders/"+calandertype+"/"+pressfxsfx[random(0,pressfxsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] pressfxsfx=find_sound("data/sounds/"+soundpack+"/objects/calanders/"+calandertype+"/*pres*");
if(pressfxsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/calanders/"+calandertype+"/"+pressfxsfx[random(0,pressfxsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] loopsfx=find_sound("data/sounds/"+soundpack+"/objects/calanders/"+calandertype+"/*loop*");
if(loopsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/calanders/"+calandertype+"/"+loopsfx[random(0,loopsfx.length()-1)],false);
}
return 0;
}
string clocksmenu()
{
string[] clocktype=find_directories("data/sounds/"+soundpack+"/objects/clocks/*");
setupmenu();
m.set_callback(@clocks_callback,"");
for (uint i=0; i<clocktype.length(); i++)
{
m.add_item_tts(clocktype[i],clocktype[i],"",true);
}
int mres=m.run("clocks menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=clocktype.length())
{
clocktyp=clocktype[mres-1];
}
return m.get_item_name(mres);
}
int clocks_callback(dynamic_menu_pro@ m, string data)
{
string clocktype;
if(m.menu_position>0)
clocktype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] pressfxsfx=find_sound("data/sounds/"+soundpack+"/objects/clocks/"+clocktype+"/*pres*");
if(pressfxsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/clocks/"+clocktype+"/"+pressfxsfx[random(0,pressfxsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] pressfxsfx=find_sound("data/sounds/"+soundpack+"/objects/clocks/"+clocktype+"/*pres*");
if(pressfxsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/clocks/"+clocktype+"/"+pressfxsfx[random(0,pressfxsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] loopsfx=find_sound("data/sounds/"+soundpack+"/objects/clocks/"+clocktype+"/*loop*");
if(loopsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/clocks/"+clocktype+"/"+loopsfx[random(0,loopsfx.length()-1)],false);
}
return 0;
}
string signsmenu()
{
string[] signtype=find_directories("data/sounds/"+soundpack+"/objects/signs/*");
setupmenu();
m.set_callback(@signs_callback,"");
for (uint i=0; i<signtype.length(); i++)
{
m.add_item_tts(signtype[i],signtype[i],"",true);
}
int mres=m.run("signs menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=signtype.length())
{
signtyp=signtype[mres-1];
}
return m.get_item_name(mres);
}
int signs_callback(dynamic_menu_pro@ m, string data)
{
string signtype;
if(m.menu_position>0)
signtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] pressfxsfx=find_sound("data/sounds/"+soundpack+"/objects/signs/"+signtype+"/*pres*");
if(pressfxsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/signs/"+signtype+"/"+pressfxsfx[random(0,pressfxsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] pressfxsfx=find_sound("data/sounds/"+soundpack+"/objects/signs/"+signtype+"/*pres*");
if(pressfxsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/signs/"+signtype+"/"+pressfxsfx[random(0,pressfxsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] loopsfx=find_sound("data/sounds/"+soundpack+"/objects/signs/"+signtype+"/*loop*");
if(loopsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/signs/"+signtype+"/"+loopsfx[random(0,loopsfx.length()-1)],false);
}
return 0;
}
string healsmenu()
{
string[] healthtype=find_directories("data/sounds/"+soundpack+"/objects/heal zones/*");
setupmenu();
m.set_callback(@heals_callback,"");
for (uint i=0; i<healthtype.length(); i++)
{
m.add_item_tts(healthtype[i],healthtype[i],"",true);
}
int mres=m.run("heal zones menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=healthtype.length())
{
healtyp=healthtype[mres-1];
}
return m.get_item_name(mres);
}
int heals_callback(dynamic_menu_pro@ m, string data)
{
string healthtype;
if(m.menu_position>0)
healthtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] healsfx=find_sound("data/sounds/"+soundpack+"/objects/heal zones/"+healthtype+"/*heal*");
if(healsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/heal zones/"+healthtype+"/"+healsfx[random(0,healsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] healsfx=find_sound("data/sounds/"+soundpack+"/objects/heal zones/"+healthtype+"/*pres*");
if(healsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/heal zones/"+healthtype+"/"+healsfx[random(0,healsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] takesfx=find_sound("data/sounds/"+soundpack+"/objects/heal zones/"+healthtype+"/*take*");
if(takesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/heal zones/"+healthtype+"/"+takesfx[random(0,takesfx.length()-1)],false);
}
return 0;
}
string beltsmenu()
{
string[] belts=find_directories("data/sounds/"+soundpack+"/objects/belts/*");
setupmenu();
m.set_callback(@belts_callback,"");
for (uint i=0; i<belts.length(); i++)
{
string letter=string_replace(belts[i],".ogg","",true)[0];
string[] beltsfx=find_sound("data/sounds/"+soundpack+"/objects/belts/"+belts[i]+"/*loop*");
if(beltsfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/belts/"+belts[i]+"/"+beltsfx[random(0,beltsfx.length()-1)],belts[i],letter,true);
}
int mres=m.run("belts menu.", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=belts.length())
{
}
return m.get_item_name(mres);
}
int belts_callback(dynamic_menu_pro@ m, string data)
{
string belttyp;
if(m.menu_position>0)
belttyp=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(belttyp);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(belttyp);
}
return 0;
}
string sorcesmenu()
{
string[] sorces=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
setupmenu2();
m.set_callback(@sources_callback,"");
for (uint i=0; i<sorces.length(); i++)
{
string letter=string_replace(sorces[i],".ogg","",true)[0];
string[] srcfilesfx=find_sound("data/sounds/"+soundpack+"/objects/sources/"+sorces[i]+"/*loop*");
if(srcfilesfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/sources/"+sorces[i]+"/"+srcfilesfx[random(0,srcfilesfx.length()-1)],sorces[i],letter,true);
}
int mres=m.run("sources menu.", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=sorces.length())
{
}
return m.get_item_name(mres);
}
int sources_callback(dynamic_menu_pro@ m, string data)
{
string sorcetyp;
if(m.menu_position>0)
sorcetyp=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(sorcetyp);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(sorcetyp);
}
return 0;
}
string musicsmenu()
{
string[] musics=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
setupmenu2();
m.set_callback(@musics_callback,"");
for (uint i=0; i<musics.length(); i++)
{
string[] musfilesfx=find_sound("data/sounds/"+soundpack+"/objects/musics/"+musics[i]+"/*music*");
if(musfilesfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/musics/"+musics[i]+"/"+musfilesfx[random(0,musfilesfx.length()-1)],musics[i],"m",true);
}
int mres=m.run("musics menu.", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=musics.length())
{
}
return m.get_item_name(mres);
}
int musics_callback(dynamic_menu_pro@ m, string data)
{
string mustyp;
if(m.menu_position>0)
mustyp=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(mustyp);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(mustyp);
}
return 0;
}
string vplatsmenu()
{
string[] vplats=find_directories("data/sounds/"+soundpack+"/objects/vanishing platforms/*");
setupmenu2();
m.set_callback(@vplats_callback,"");
for (uint i=0; i<vplats.length(); i++)
{
string letter=string_replace(vplats[i],".ogg","",true)[0];
string[] vpfilesfx=find_sound("data/sounds/"+soundpack+"/objects/vanishing platforms/"+vplats[i]+"/*loop*");
if(vpfilesfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/vanishing platforms/"+vplats[i]+"/"+vpfilesfx[random(0,vpfilesfx.length()-1)],vplats[i],letter,true);
}
int mres=m.run("vanishers menu.", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=vplats.length())
{
}
return m.get_item_name(mres);
}
int vplats_callback(dynamic_menu_pro@ m, string data)
{
string vplattyp;
if(m.menu_position>0)
vplattyp=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(vplattyp);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(vplattyp);
}
return 0;
}
string vehsmenu()
{
string[] vehtype=find_directories("data/sounds/"+soundpack+"/objects/vehicles/*");
setupmenu();
m.set_callback(@vehicles_callback,"");
for (uint i=0; i<vehtype.length(); i++)
{
m.add_item_tts(vehtype[i],vehtype[i],"",true);
}
int mres=m.run("vehicles menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=vehicles.length())
{
vehtyp=vehtype[mres-1];
}
return m.get_item_name(mres);
}
int vehicles_callback(dynamic_menu_pro@ m, string data)
{
string vehtype;
if(m.menu_position>0)
vehtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/objects/vehicles/"+vehtype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/vehicles/"+vehtype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/objects/vehicles/"+vehtype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/vehicles/"+vehtype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_sound("data/sounds/"+soundpack+"/objects/vehicles/"+vehtype+"/*motor*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/vehicles/"+vehtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/objects/vehicles/"+vehtype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/vehicles/"+vehtype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}

void create_slider(bool anounce_percentage=false, bool provide_beeps=false)
{
if(anounce_percentage==true) s.speak_percentages=true;
else if(anounce_percentage==false) s.speak_percentages=false;
if(provide_beeps==true) s.enable_beeps=true;
else if(provide_beeps==false) s.enable_beeps=false;
s.clear_all_items();
s.enable_up_and_down=true;
s.enable_left_and_right=true;
s.enable_home_and_end=true;
s.speak_position_information=false;
}
void setupmenu(bool music_added=false)
{
if(mreset==1) m.reset(true);
else if(mreset==0) m.reset(false);
string[] mctrack=find_sound("data/sounds/"+soundpack+"/menus/"+menutype+"/*music*");
if(music_added==true and mctrack.length()!=0) m.add_music("data/sounds/"+soundpack+"/menus/"+menutype+"/"+mctrack[random(0,mctrack.length()-1)]);
else if(music_added==false) m.add_music("");
if(autojump==1) autojump=1;
else if(autojump==0) autojump=0;
if(autosave==1) autosave=1;
else if(autosave==0) autosave=0;
if(dockmode==1) dockmode=1;
else if(dockmode==0) dockmode=0;
if(fademode==1) fademode=1;
else if(fademode==0) fademode=0;
if(heartsound==1) heartsound=1;
else if(heartsound==0) heartsound=0;
if(pausem==1) pausem=1;
else if(pausem==0) pausem=0;
if(spacehold==1) spacehold=1;
else if(spacehold==0) spacehold=0;
if(hidedocks==true) hidedocks=true;
else if(hidedocks==false) hidedocks=false;
if(hidegames==true) hidegames=true;
else if(hidegames==false) hidegames=false;
if(hidemaps==true) hidemaps=true;
else if(hidemaps==false) hidemaps=false;
if(hidesets==true) hidesets=true;
else if(hidesets==false) hidesets=false;
if(hrtf==true) sound_global_hrtf=true;
else if(hrtf==false) sound_global_hrtf=false;
if(up_down==1) m.enable_up_and_down=true;
else if(up_down==0) m.enable_up_and_down=false;
if(left_right==1) m.enable_left_and_right=true;
else if(left_right==0) m.enable_left_and_right=false;
if(home_end==1) m.enable_home_and_end=true;
else if(home_end==0) m.enable_home_and_end=false;
if(wrap==1) m.wrap=true;
else if(wrap==0) m.wrap=false;
if(repeat_items==1) m.repeat_items_at_edges=true;
else if(repeat_items==0) m.repeat_items_at_edges=false;
if(numbers==1) m.enable_numbers=true;
else if(numbers==0) m.enable_numbers=false;
if(first_letter==1) m.enable_first_letter_navigation=true;
else if(first_letter==0) m.enable_first_letter_navigation=false;
if(position_info==1) m.speak_position_information=true;
else if(position_info==0) m.speak_position_information=false;
if(side_scroll==1) m.enable_side_scrolling=true;
else if(side_scroll==0) m.enable_side_scrolling=false;
string[] mclick=find_sound("data/sounds/"+soundpack+"/menus/"+menutype+"/*click*");
if(mclick.length()!=0) m.click_sound=("data/sounds/"+soundpack+"/menus/"+menutype+"/"+mclick[random(0,mclick.length()-1)]);
string[] medge=find_sound("data/sounds/"+soundpack+"/menus/"+menutype+"/*edge*");
if(medge.length()!=0) m.edge_sound=("data/sounds/"+soundpack+"/menus/"+menutype+"/"+medge[random(0,medge.length()-1)]);
string[] menter=find_sound("data/sounds/"+soundpack+"/menus/"+menutype+"/*enter*");
if(menter.length()!=0) m.enter_sound=("data/sounds/"+soundpack+"/menus/"+menutype+"/"+menter[random(0,menter.length()-1)]);
string[] mopen=find_sound("data/sounds/"+soundpack+"/menus/"+menutype+"/*open*");
if(mopen.length()!=0) m.open_sound=("data/sounds/"+soundpack+"/menus/"+menutype+"/"+mopen[random(0,mopen.length()-1)]);
string[] mrap=find_sound("data/sounds/"+soundpack+"/menus/"+menutype+"/*wrap*");
if(mrap.length()!=0) m.wrap_sound=("data/sounds/"+soundpack+"/menus/"+menutype+"/"+mrap[random(0,mrap.length()-1)]);
m.set_up_and_down_skip_amount(mskipnum);
}
void setupmenu2(bool main=true)
{
m.set_up_and_down_skip_amount(mskipnum);
m.reset(false);
if (main==true)
m.add_music("");
m.click_at_edge=true;
m.enable_enter=true;
m.enable_numbers=false;
m.enable_up_and_down=false;
m.enable_left_and_right=true;
m.enable_home_and_end=true;
m.enable_side_scrolling=false;
m.allow_escape=true;
m.wrap=true;
m.repeat_items_at_edges=true;
m.enable_first_letter_navigation=true;
m.speak_position_information=false;
m.click_sound="none.ogg";
m.edge_sound="none.ogg";
string[] menter=find_sound("data/sounds/"+soundpack+"/menus/"+menutype+"/*enter*");
if(menter.length()!=0) m.enter_sound=("data/sounds/"+soundpack+"/menus/"+menutype+"/"+menter[random(0,menter.length()-1)]);
string[] mopen=find_sound("data/sounds/"+soundpack+"/menus/"+menutype+"/*open*");
if(mopen.length()!=0) m.open_sound=("data/sounds/"+soundpack+"/menus/"+menutype+"/"+mopen[random(0,mopen.length()-1)]);
m.wrap_sound="none.ogg";
}

void mainmenu()
{
setupmenu(true);
if(hidedocks==false) m.add_item_tts("documentation menu", "help");
if(hidegames==false) m.add_item_tts("game menu", "shoot");
if(hidemaps==false) m.add_item_tts("map menu", "map");
if(hidesets==false) m.add_item_tts("settings menu", "settings");
m.add_item_tts("test speakers", "st");
if(directory_exists("data/sounds") and !directory_empty("data/sounds")) m.add_item_tts("redownload all sounds", "rdl");
m.add_item_tts("restart game", "rx");
m.add_item_tts("exit game", "ex");
int mres=m.run("Main menu. Please choose an option with your arrow keys, then press enter to activate one.",true);
string main=m.get_item_name(mres);
if(mres==0)
{
speak("exiting");
m.fade_music();
exit();
}
if(main=="map")
{
mapmenu();
}
if(main=="shoot")
{
gamemenu();
}
if(main=="help")
{
docksmenu();
}
if(main=="st")
{
m.fade_music();
dlgplay("speakertest.ogg", true, true, 30);
mainmenu();
}
if(main=="ex")
{
speak("exiting");
m.fade_music();
exit();
}
if(main=="rdl")
{
m.fade_music();
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Are you sure you want to delete and redownload all sounds? This action can't be undone.",true);
if(mres==0)
{
speak("canceled");
mainmenu();
}
if(mres==1)
{
if(directory_exists("data/sounds")) directory_delete("data/sounds");
downloadsounds();
}
if(mres==2)
{
mainmenu();
}
}
if(main=="rx")
{
speak("restarting");
m.fade_music();
restart();
}
if(main=="settings")
{
m.fade_music();
settingsmenu();
}
}
void docksmenu()
{
setupmenu(true);
m.add_item_tts("changelog", "changelog");
m.add_item_tts("credits", "credits");
m.add_item_tts("readme", "readme");
m.add_item_tts("back", "back");
int mres=m.run("Documentation menu",true);
string dnm=m.get_item_name(mres);
if(mres==0)
{
mainmenu();
}
if(dnm=="changelog")
{
m.fade_music();
if(dockmode==1)
{
dockread("docks/changelog.txt");
}
else if(dockmode==0)
{
docks.open("docks/changelog.txt","r");
changesplit=docks.read();
dock=string_split(changesplit,"\r\n",true);
setupmenu2();
for(uint i=0; i<dock.length(); i++)
{
m.add_item_tts(dock[i],dock[i],"",false);
}
int mres=m.run_extended("Changelog", true,0,false);
if(mres==0)
{
docksmenu();
}
if (mres==0 and mres>=dock.length())
{
return;
}
if (mres>0 and mres<=dock.length())
{
return;
}
}
}
if(dnm=="credits")
{
m.fade_music();
if(dockmode==1)
{
dockread("docks/credits.txt");
}
else if(dockmode==0)
{
docks2.open("docks/credits.txt","r");
credsplit=docks2.read();
dock2=string_split(credsplit,"\r\n",true);
setupmenu2();
for(uint i=0; i<dock2.length(); i++)
{
m.add_item_tts(dock2[i],dock2[i],"",false);
}
int mres=m.run_extended("Credits", true,0,false);
if(mres==0)
{
docksmenu();
}
if (mres==0 and mres>=dock2.length())
{
return;
}
if (mres>0 and mres<=dock2.length())
{
return;
}
}
}
if(dnm=="readme")
{
m.fade_music();
if(dockmode==1)
{
dockread("docks/readme.txt");
}
else if(dockmode==0)
{
docks3.open("docks/readme.txt","r");
redsplit=docks3.read();
dock3=string_split(redsplit,"\r\n",true);
setupmenu2();
for(uint i=0; i<dock3.length(); i++)
{
m.add_item_tts(dock3[i],dock3[i],"",false);
}
int mres=m.run_extended("Readme", true,0,false);
if(mres==0)
{
docksmenu();
}
if (mres==0 and mres>=dock3.length())
{
return;
}
if (mres>0 and mres<=dock3.length())
{
return;
}
}
}
if(dnm=="back")
{
mainmenu();
}
}
void hidemenu()
{
if(hidedocks==false)
{
hidstatus="unhidden";
}
else
{
hidstatus="hidden";
}
if(hidegames==false)
{
hidstatus2="unhidden";
}
else
{
hidstatus2="hidden";
}
if(hidemaps==false)
{
hidstatus3="unhidden";
}
else
{
hidstatus3="hidden";
}
if(hidesets==false)
{
hidstatus4="unhidden";
}
else
{
hidstatus4="hidden";
}
setupmenu();
m.add_item_tts("Documentation menu. Status, "+hidstatus+".", "docks");
m.add_item_tts("Game menu. Status, "+hidstatus2+".", "games");
m.add_item_tts("Map menu. Status, "+hidstatus3+".", "maps");
m.add_item_tts("Settings menu. Status, "+hidstatus4+".", "settings");
m.add_item_tts("back", "back");
int mres=m.run("Choose the main menu items you'd like to show or hide.",true);
string hdm=m.get_item_name(mres);
if(mres==0)
{
speak("canceled");
settingsmenu();
}
if(hdm=="docks")
{
if(hidedocks==false)
{
hidedocks=true;
hidstatus="hidden";
dlg("Documentation menu hidden. Press enter to continue.");
}
else
{
hidedocks=false;
hidstatus="unhidden";
dlg("Documentation menu unhidden. Press enter to continue.");
}
hidemenu();
}
if(hdm=="games")
{
if(hidegames==false)
{
hidegames=true;
hidstatus2="hidden";
dlg("Game menu hidden. Press enter to continue.");
}
else
{
hidegames=false;
hidstatus2="unhidden";
dlg("Game menu unhidden. Press enter to continue.");
}
hidemenu();
}
if(hdm=="maps")
{
if(hidemaps==false)
{
hidemaps=true;
hidstatus3="hidden";
dlg("Map menu hidden. Press enter to continue.");
}
else
{
hidemaps=false;
hidstatus3="unhidden";
dlg("Map menu unhidden. Press enter to continue.");
}
hidemenu();
}
if(hdm=="settings")
{
if(hidesets==false)
{
hidesets=true;
hidstatus4="hidden";
dlg("Settings menu hidden. Press enter to continue.");
}
else
{
hidesets=false;
hidstatus4="unhidden";
dlg("Settings menu unhidden. Press enter to continue.");
}
hidemenu();
}
if(hdm=="back")
{
speak("canceled");
settingsmenu();
}
}
void mapmenu()
{
setupmenu(true);
m.add_item_tts("load map", "mg");
m.add_item_tts("new map", "nm");
m.add_item_tts("back", "back");
int mres=m.run("Map menu",true);
string buildem=m.get_item_name(mres);
if(mres==0)
{
mainmenu();
}
if(buildem=="mg")
{
m.fade_music();
string[] maps=find_sound("data/maps/*.map");
if(maps.length()==0)
{
dlg_snd("Error. There are no maps available to view. Press enter to continue.");
mapmenu();
}
else
{
setupmenu();
for(uint i=0; i<maps.length(); i++)
{
m.add_item_tts(string_replace(maps[i],".map","",true)+", size: "+measure_file_size(file_get_size("data/maps/"+maps[i])));
}
int mres=m.run("Maps menu", true);
if(mres==0)
{
mapmenu();
}
if (mres==0 and mres>=maps.length())
{
mapmenu();
}
if (mres>0 and mres<=maps.length())
{
mapname=maps[mres-1];
mapname=string_replace(mapname, ".map", "", true);
load_map(mapname);
building=true;
game(true);
}
}
}
if(buildem=="nm")
{
m.fade_music();
input.set_only_allowed_chars("none");
string name=input.input("Enter the name of this map.");
input.set_only_allowed_chars("1234567890-");
string mx=input.input("Enter the maximum length of this map.");
string my=input.input("Enter the maximum height of this map.");
if(mapname=="" and maxx=="" and maxy=="")
return;
mapname=name;
maxx=string_to_number(mx);
maxy=string_to_number(my);
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
mapmenu();
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
if(file_exists("data/maps/"+mapname+".map"))
{
dlg_snd("Error. A map with this name already exists. Please choose a different one. Press enter to continue.");
mapmenu();
}
else
{
create_map(mapname, maxx, maxy, tiletype);
load_map(mapname);
building=true;
game(true);
}
}
if(buildem=="back")
{
mainmenu();
}
}
void gamemenu()
{
setupmenu(true);
m.add_item_tts("load game", "lg");
m.add_item_tts("new game", "ng");
m.add_item_tts("settings", "set");
m.add_item_tts("back", "back");
int mres=m.run("Game menu",true);
string gamem=m.get_item_name(mres);
if(mres==0)
{
mainmenu();
}
if(gamem=="lg")
{
if(file_exists("data/saves/game.dat"))
{
m.fade_music();
if(building==false) readdata();
building=false;
game(false);
}
else
{
m.fade_music();
dlg_snd("Error. The data assosiated with this game does not exist. Press enter to continue.");
gamemenu();
}
}
if(gamem=="ng")
{
if(file_exists("data/saves/game.dat"))
{
setupmenu(true);
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Are you sure you want to start over from the beginning? This will erase all of the progress you made on the current game.",true);
if(mres==0)
{
speak("canceled");
gamemenu();
}
if(mres==1)
{
modemenu();
}
if(mres==2)
{
gamemenu();
}
}
else
{
modemenu();
}
}
if(gamem=="set")
{
m.fade_music();
gamepreffs();
}
if(gamem=="back")
{
mainmenu();
}
}
void modemenu()
{
setupmenu(true);
m.add_item_tts("normal", "nm");
m.add_item_tts("custom", "cm");
m.add_item_tts("back", "back");
int mres=m.run("Choose a mode you would like to play on",true);
string modem=m.get_item_name(mres);
if(mres==0)
{
gamemenu();
}
if(modem=="nm")
{
normalmenu();
}
if(modem=="cm")
{
custommenu();
}
if(modem=="back")
{
gamemenu();
}
}
void normalmenu()
{
setupmenu(true);
m.add_item_tts("kill animals", "km");
m.add_item_tts("kill enemies", "kn");
m.add_item_tts("kill projectiles", "kp");
m.add_item_tts("kill robots", "kb");
m.add_item_tts("kill zombies", "kz");
m.add_item_tts("back", "back");
int mres=m.run("normal menu",true);
string normem=m.get_item_name(mres);
if(mres==0)
{
modemenu();
}
if(normem=="km")
{
m.fade_music();
string[] animal=find_directories("data/sounds/"+soundpack+"/npc/normal/animals/*");
if(animal.length()==0)
{
dlg_snd("Error. There are no animals detected in the game! Press enter to continue.");
normalmenu();
}
else
{
gamemode=1;
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Would you like to choose a platform to use in the game mode?",true);
if(mres==0)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
if(mres==1)
{
platmode=1;
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
normalmenu();
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_platform(0, maxx*10, 0, 0, tiletype, volume, pitch);
}
if(mres==2)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Would you like to choose music to use in the game mode?",true);
if(mres2==0)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
if(mres2==1)
{
musmode=1;
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no musics available to view. Press enter to continue.");
normalmenu();
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
}
if(mres2==2)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Would you like to choose a sound source to use in the game mode?",true);
if(mres3==0)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres3==1)
{
sorcemode=1;
string[] sorce=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(sorce.length()==0)
{
dlg_snd("Error. There are no sound sources available to view. Press enter to continue.");
normalmenu();
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, sorcetyp, volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres3==2)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
}
}
if(normem=="kn")
{
m.fade_music();
string[] enemy=find_directories("data/sounds/"+soundpack+"/npc/normal/enemies/*");
if(enemy.length()==0)
{
dlg_snd("Error. There are no enemies detected in the game! Press enter to continue.");
normalmenu();
}
else
{
gamemode=2;
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Would you like to choose a platform to use in the game mode?",true);
if(mres==0)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
if(mres==1)
{
platmode=1;
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
normalmenu();
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_platform(0, maxx*10, 0, 0, tiletype, volume, pitch);
}
if(mres==2)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Would you like to choose music to use in the game mode?",true);
if(mres2==0)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
if(mres2==1)
{
musmode=1;
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no musics available to view. Press enter to continue.");
normalmenu();
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
}
if(mres2==2)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Would you like to choose a sound source to use in the game mode?",true);
if(mres3==0)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres3==1)
{
sorcemode=1;
string[] sorce=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(sorce.length()==0)
{
dlg_snd("Error. There are no sound sources available to view. Press enter to continue.");
normalmenu();
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, sorcetyp, volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres3==2)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
}
}
if(normem=="kp")
{
m.fade_music();
string[] projectile=find_directories("data/sounds/"+soundpack+"/npc/normal/projectiles/*");
if(projectile.length()==0)
{
dlg_snd("Error. There are no projectiles detected in the game! Press enter to continue.");
normalmenu();
}
else
{
gamemode=3;
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Would you like to choose a platform to use in the game mode?",true);
if(mres==0)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
if(mres==1)
{
platmode=1;
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
normalmenu();
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_platform(0, maxx*10, 0, 0, tiletype, volume, pitch);
}
if(mres==2)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Would you like to choose music to use in the game mode?",true);
if(mres2==0)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
if(mres2==1)
{
musmode=1;
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no musics available to view. Press enter to continue.");
normalmenu();
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
}
if(mres2==2)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Would you like to choose a sound source to use in the game mode?",true);
if(mres3==0)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres3==1)
{
sorcemode=1;
string[] sorce=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(sorce.length()==0)
{
dlg_snd("Error. There are no sound sources available to view. Press enter to continue.");
normalmenu();
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, sorcetyp, volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres3==2)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
}
}
if(normem=="kb")
{
m.fade_music();
string[] robot=find_directories("data/sounds/"+soundpack+"/npc/normal/robots/*");
if(robot.length()==0)
{
dlg_snd("Error. There are no robots detected in the game! Press enter to continue.");
normalmenu();
}
else
{
gamemode=4;
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Would you like to choose a platform to use in the game mode?",true);
if(mres==0)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
if(mres==1)
{
platmode=1;
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
normalmenu();
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_platform(0, maxx*10, 0, 0, tiletype, volume, pitch);
}
if(mres==2)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Would you like to choose music to use in the game mode?",true);
if(mres2==0)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
if(mres2==1)
{
musmode=1;
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no musics available to view. Press enter to continue.");
normalmenu();
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
}
if(mres2==2)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Would you like to choose a sound source to use in the game mode?",true);
if(mres3==0)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres3==1)
{
sorcemode=1;
string[] sorce=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(sorce.length()==0)
{
dlg_snd("Error. There are no sound sources available to view. Press enter to continue.");
normalmenu();
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, sorcetyp, volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres3==2)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
}
}
if(normem=="kz")
{
m.fade_music();
string[] zombie=find_directories("data/sounds/"+soundpack+"/npc/normal/zombies/*");
if(zombie.length()==0)
{
dlg_snd("Error. There are no zombies detected in the game! Press enter to continue.");
normalmenu();
}
else
{
gamemode=5;
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Would you like to choose a platform to use in the game mode?",true);
if(mres==0)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
if(mres==1)
{
platmode=1;
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
normalmenu();
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_platform(0, maxx*10, 0, 0, tiletype, volume, pitch);
}
if(mres==2)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Would you like to choose music to use in the game mode?",true);
if(mres2==0)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
if(mres2==1)
{
musmode=1;
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no musics available to view. Press enter to continue.");
normalmenu();
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
}
if(mres2==2)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Would you like to choose a sound source to use in the game mode?",true);
if(mres3==0)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres3==1)
{
sorcemode=1;
string[] sorce=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(sorce.length()==0)
{
dlg_snd("Error. There are no sound sources available to view. Press enter to continue.");
normalmenu();
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, sorcetyp, volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres3==2)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
}
}
if(normem=="back")
{
modemenu();
}
}
void custommenu()
{
setupmenu(true);
m.add_item_tts("kill animals", "km");
m.add_item_tts("kill enemies", "kn");
m.add_item_tts("kill projectiles", "kp");
m.add_item_tts("kill robots", "kb");
m.add_item_tts("kill zombies", "kz");
m.add_item_tts("back", "back");
int mres=m.run("custom menu",true);
string cusmem=m.get_item_name(mres);
if(mres==0)
{
modemenu();
}
if(cusmem=="km")
{
m.fade_music();
string[] animal=find_directories("data/sounds/"+soundpack+"/npc/normal/animals/*");
if(animal.length()==0)
{
dlg_snd("Error. There are no animals available to view. Press enter to continue.");
custommenu();
}
else
{
string[] animaltype=find_directories("data/sounds/"+soundpack+"/npc/normal/animals/*");
setupmenu();
for(uint i=0; i<animaltype.length(); i++)
{
m.add_item_tts(animaltype[i],animaltype[i]);
}
int mres=m.run("Animals menu", true);
if(mres==0)
{
custommenu();
}
if (mres==0 and mres>=animaltype.length())
{
gamemode=6;
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Would you like to choose a platform to use in the game mode?",true);
if(mres2==0)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
if(mres2==1)
{
platmode=1;
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
custommenu();
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_platform(0, maxx*10, 0, 0, tiletype, volume, pitch);
}
if(mres2==2)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Would you like to choose music to use in the game mode?",true);
if(mres3==0)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
if(mres3==1)
{
musmode=1;
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no musics available to view. Press enter to continue.");
custommenu();
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
}
if(mres3==2)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres4=m.run("Would you like to choose a sound source to use in the game mode?",true);
if(mres4==0)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==1)
{
sorcemode=1;
string[] sorce=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(sorce.length()==0)
{
dlg_snd("Error. There are no sound sources available to view. Press enter to continue.");
custommenu();
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, sorcetyp, volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==2)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
}
if (mres>0 and mres<=animaltype.length())
{
amtype=animaltype[mres-1];
gamemode=6;
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Would you like to choose a platform to use in the game mode?",true);
if(mres2==0)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
if(mres2==1)
{
platmode=1;
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
custommenu();
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_platform(0, maxx*10, 0, 0, tiletype, volume, pitch);
}
if(mres2==2)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Would you like to choose music to use in the game mode?",true);
if(mres3==0)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
if(mres3==1)
{
musmode=1;
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no musics available to view. Press enter to continue.");
custommenu();
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
}
if(mres3==2)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres4=m.run("Would you like to choose a sound source to use in the game mode?",true);
if(mres4==0)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==1)
{
sorcemode=1;
string[] sorce=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(sorce.length()==0)
{
dlg_snd("Error. There are no sound sources available to view. Press enter to continue.");
custommenu();
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, sorcetyp, volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==2)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
}
}
}
if(cusmem=="kn")
{
m.fade_music();
string[] enemy=find_directories("data/sounds/"+soundpack+"/npc/normal/enemies/*");
if(enemy.length()==0)
{
dlg_snd("Error. There are no enemies available to view. Press enter to continue.");
custommenu();
}
else
{
string[] enemytype=find_directories("data/sounds/"+soundpack+"/npc/normal/enemies/*");
setupmenu();
for(uint i=0; i<enemytype.length(); i++)
{
m.add_item_tts(enemytype[i],enemytype[i]);
}
int mres=m.run("enemies menu", true);
if(mres==0)
{
custommenu();
}
if (mres==0 and mres>=enemytype.length())
{
gamemode=7;
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Would you like to choose a platform to use in the game mode?",true);
if(mres2==0)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
if(mres2==1)
{
platmode=1;
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
custommenu();
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_platform(0, maxx*10, 0, 0, tiletype, volume, pitch);
}
if(mres2==2)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Would you like to choose music to use in the game mode?",true);
if(mres3==0)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
if(mres3==1)
{
musmode=1;
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no musics available to view. Press enter to continue.");
custommenu();
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
}
if(mres3==2)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres4=m.run("Would you like to choose a sound source to use in the game mode?",true);
if(mres4==0)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==1)
{
sorcemode=1;
string[] sorce=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(sorce.length()==0)
{
dlg_snd("Error. There are no sound sources available to view. Press enter to continue.");
custommenu();
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, sorcetyp, volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==2)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
}
if (mres>0 and mres<=enemytype.length())
{
emtype=enemytype[mres-1];
gamemode=7;
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Would you like to choose a platform to use in the game mode?",true);
if(mres2==0)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
if(mres2==1)
{
platmode=1;
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
custommenu();
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_platform(0, maxx*10, 0, 0, tiletype, volume, pitch);
}
if(mres2==2)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Would you like to choose music to use in the game mode?",true);
if(mres3==0)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
if(mres3==1)
{
musmode=1;
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no musics available to view. Press enter to continue.");
custommenu();
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
}
if(mres3==2)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres4=m.run("Would you like to choose a sound source to use in the game mode?",true);
if(mres4==0)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==1)
{
sorcemode=1;
string[] sorce=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(sorce.length()==0)
{
dlg_snd("Error. There are no sound sources available to view. Press enter to continue.");
custommenu();
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, sorcetyp, volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==2)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
}
}
}
if(cusmem=="kp")
{
m.fade_music();
string[] projectile=find_directories("data/sounds/"+soundpack+"/npc/normal/projectiles/*");
if(projectile.length()==0)
{
dlg_snd("Error. There are no projectiles available to view. Press enter to continue.");
custommenu();
}
else
{
string[] projtype=find_directories("data/sounds/"+soundpack+"/npc/normal/projectiles/*");
setupmenu();
for(uint i=0; i<projtype.length(); i++)
{
m.add_item_tts(projtype[i],projtype[i]);
}
int mres=m.run("projectiles menu", true);
if(mres==0)
{
custommenu();
}
if (mres==0 and mres>=projtype.length())
{
gamemode=8;
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Would you like to choose a platform to use in the game mode?",true);
if(mres2==0)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
if(mres2==1)
{
platmode=1;
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
custommenu();
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_platform(0, maxx*10, 0, 0, tiletype, volume, pitch);
}
if(mres2==2)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Would you like to choose music to use in the game mode?",true);
if(mres3==0)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
if(mres3==1)
{
musmode=1;
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no musics available to view. Press enter to continue.");
custommenu();
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
}
if(mres3==2)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres4=m.run("Would you like to choose a sound source to use in the game mode?",true);
if(mres4==0)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==1)
{
sorcemode=1;
string[] sorce=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(sorce.length()==0)
{
dlg_snd("Error. There are no sound sources available to view. Press enter to continue.");
custommenu();
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, sorcetyp, volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==2)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
}
if (mres>0 and mres<=projtype.length())
{
potype=projtype[mres-1];
gamemode=8;
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Would you like to choose a platform to use in the game mode?",true);
if(mres2==0)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
if(mres2==1)
{
platmode=1;
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
custommenu();
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_platform(0, maxx*10, 0, 0, tiletype, volume, pitch);
}
if(mres2==2)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Would you like to choose music to use in the game mode?",true);
if(mres3==0)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
if(mres3==1)
{
musmode=1;
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no musics available to view. Press enter to continue.");
custommenu();
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
}
if(mres3==2)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres4=m.run("Would you like to choose a sound source to use in the game mode?",true);
if(mres4==0)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==1)
{
sorcemode=1;
string[] sorce=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(sorce.length()==0)
{
dlg_snd("Error. There are no sound sources available to view. Press enter to continue.");
custommenu();
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, sorcetyp, volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==2)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
}
}
}
if(cusmem=="kb")
{
m.fade_music();
string[] robot=find_directories("data/sounds/"+soundpack+"/npc/normal/robots/*");
if(robot.length()==0)
{
dlg_snd("Error. There are no robots available to view. Press enter to continue.");
custommenu();
}
else
{
string[] robottype=find_directories("data/sounds/"+soundpack+"/npc/normal/robots/*");
setupmenu();
for(uint i=0; i<robottype.length(); i++)
{
m.add_item_tts(robottype[i],robottype[i]);
}
int mres=m.run("robots menu", true);
if(mres==0)
{
custommenu();
}
if (mres==0 and mres>=robottype.length())
{
gamemode=9;
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Would you like to choose a platform to use in the game mode?",true);
if(mres2==0)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
if(mres2==1)
{
platmode=1;
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
custommenu();
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_platform(0, maxx*10, 0, 0, tiletype, volume, pitch);
}
if(mres2==2)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Would you like to choose music to use in the game mode?",true);
if(mres3==0)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
if(mres3==1)
{
musmode=1;
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no musics available to view. Press enter to continue.");
custommenu();
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
}
if(mres3==2)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres4=m.run("Would you like to choose a sound source to use in the game mode?",true);
if(mres4==0)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==1)
{
sorcemode=1;
string[] sorce=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(sorce.length()==0)
{
dlg_snd("Error. There are no sound sources available to view. Press enter to continue.");
custommenu();
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, sorcetyp, volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==2)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
}
if (mres>0 and mres<=robottype.length())
{
rotype=robottype[mres-1];
gamemode=9;
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Would you like to choose a platform to use in the game mode?",true);
if(mres2==0)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
if(mres2==1)
{
platmode=1;
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
custommenu();
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_platform(0, maxx*10, 0, 0, tiletype, volume, pitch);
}
if(mres2==2)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Would you like to choose music to use in the game mode?",true);
if(mres3==0)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
if(mres3==1)
{
musmode=1;
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no musics available to view. Press enter to continue.");
custommenu();
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
}
if(mres3==2)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres4=m.run("Would you like to choose a sound source to use in the game mode?",true);
if(mres4==0)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==1)
{
sorcemode=1;
string[] sorce=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(sorce.length()==0)
{
dlg_snd("Error. There are no sound sources available to view. Press enter to continue.");
custommenu();
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, sorcetyp, volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==2)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
}
}
}
if(cusmem=="kz")
{
m.fade_music();
string[] zombie=find_directories("data/sounds/"+soundpack+"/npc/normal/zombies/*");
if(zombie.length()==0)
{
dlg_snd("Error. There are no zombies available to view. Press enter to continue.");
custommenu();
}
else
{
string[] zombietype=find_directories("data/sounds/"+soundpack+"/npc/normal/zombies/*");
setupmenu();
for(uint i=0; i<zombietype.length(); i++)
{
m.add_item_tts(zombietype[i],zombietype[i]);
}
int mres=m.run("zombies menu", true);
if(mres==0)
{
custommenu();
}
if (mres==0 and mres>=zombietype.length())
{
gamemode=10;
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Would you like to choose a platform to use in the game mode?",true);
if(mres2==0)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
if(mres2==1)
{
platmode=1;
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
custommenu();
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_platform(0, maxx*10, 0, 0, tiletype, volume, pitch);
}
if(mres2==2)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Would you like to choose music to use in the game mode?",true);
if(mres3==0)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
if(mres3==1)
{
musmode=1;
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no musics available to view. Press enter to continue.");
custommenu();
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
}
if(mres3==2)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres4=m.run("Would you like to choose a sound source to use in the game mode?",true);
if(mres4==0)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==1)
{
sorcemode=1;
string[] sorce=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(sorce.length()==0)
{
dlg_snd("Error. There are no sound sources available to view. Press enter to continue.");
custommenu();
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, sorcetyp, volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==2)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
}
if (mres>0 and mres<=zombietype.length())
{
zotype=zombietype[mres-1];
gamemode=10;
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Would you like to choose a platform to use in the game mode?",true);
if(mres2==0)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
if(mres2==1)
{
platmode=1;
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
custommenu();
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_platform(0, maxx*10, 0, 0, tiletype, volume, pitch);
}
if(mres2==2)
{
platmode=0;
if(building==false) spawn_platform(0, maxx*10, 0, 0, "concrete", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Would you like to choose music to use in the game mode?",true);
if(mres3==0)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
if(mres3==1)
{
musmode=1;
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no musics available to view. Press enter to continue.");
custommenu();
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
}
if(mres3==2)
{
musmode=0;
if(building==false) spawn_musicsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres4=m.run("Would you like to choose a sound source to use in the game mode?",true);
if(mres4==0)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==1)
{
sorcemode=1;
string[] sorce=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(sorce.length()==0)
{
dlg_snd("Error. There are no sound sources available to view. Press enter to continue.");
custommenu();
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, sorcetyp, volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
if(mres4==2)
{
sorcemode=0;
if(building==false) spawn_soundsource(0, maxx*10, 0, maxy*10, "none", volume, pitch);
if(building==false) resetgame();
building=false;
game(false);
}
}
}
}
if(cusmem=="back")
{
modemenu();
}
}
void gamepreffs()
{
setupmenu();
m.add_item_tts("reset game", "rg");
m.add_item_tts("save game", "sg");
m.add_item_tts("back", "back");
int mres=m.run("Game options",true);
string gamepm=m.get_item_name(mres);
if(mres==0)
{
gamemenu();
}
if(gamepm=="rg")
{
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Are you sure you want to reset all of your game's data?",true);
if(mres==0)
{
speak("canceled");
gamepreffs();
}
if(mres==1)
{
if(file_exists("data/saves/game.dat")) file_delete("data/saves/game.dat");
speak("game reset");
resetgame();
gamepreffs();
}
if(mres==2)
{
gamepreffs();
}
}
if(gamepm=="sg")
{
speak("game saved");
writedata();
gamepreffs();
}
if(gamepm=="back")
{
gamemenu();
}
}
void settingsmenu()
{
setupmenu();
if(chartype=="")
m.add_item_tts("Select character type for the "+soundpack+" sound pack. Currently set to nothing.", "slt");
else
m.add_item_tts("Select character type for the "+soundpack+" sound pack. Currently set to "+chartype, "slt");
if(keyboardtheme=="")
m.add_item_tts("Select keyboard theme for the "+soundpack+" sound pack. Currently set to nothing.", "slk");
else
m.add_item_tts("Select keyboard theme for the "+soundpack+" sound pack. Currently set to "+keyboardtheme, "slk");
if(menutype=="")
m.add_item_tts("Select menu theme for the "+soundpack+" sound pack. Currently set to nothing.", "slm");
else
m.add_item_tts("Select menu theme for the "+soundpack+" sound pack. Currently set to "+menutype, "slm");
m.add_item_tts("Select sound pack. Currently set to "+soundpack, "spk");
m.add_item_tts("Select sound device. Currently set to "+soundcard, "sdm");
if(mskipnum==1) m.add_item_tts("Set up and down skip amount in all menus. Currently set to "+mskipnum+"item per press", "skipm");
if(mskipnum<=0 or mskipnum>=2) m.add_item_tts("Set up and down skip amount in all menus. Currently set to "+mskipnum+"items per press", "skipm");
m.add_item_tts("show or hide main menu items", "hideme");
if(autojump==0)
m.add_item_tts("enable auto jumpping in maps", "sjn");
else
m.add_item_tts("disable auto jumpping in maps", "sjn");
if(autosave==0)
m.add_item_tts("enable game auto saving", "sgn");
else
m.add_item_tts("disable game auto saving", "sgn");
if(dockmode==0)
m.add_item_tts("enable form based documentation", "dcb");
else
m.add_item_tts("disable form based documentation", "dcb");
if(fademode==0)
m.add_item_tts("enable global volume fading", "fdv");
else
m.add_item_tts("disable global volume fading", "fdv");
if(heartsound==0)
m.add_item_tts("enable heart monidor for all game modes", "hms");
else
m.add_item_tts("disable heart monidor for all game modes", "hms");
if(pausem==0)
m.add_item_tts("enable pause menu for all game modes", "psm");
else
m.add_item_tts("disable pause menu for all game modes", "psm");
if(spacehold==0)
m.add_item_tts("enable holding of space in all menus", "shd");
else
m.add_item_tts("disable holding of space in all menus", "shd");
if(hrtf==true)
m.add_item_tts("disable global hrtf support", "glh");
else
m.add_item_tts("enable global hrtf support", "glh");
if(mreset==0)
m.add_item_tts("enable menus resetting in all menus", "mt");
else
m.add_item_tts("disable menus resetting in all menus", "mt");
if(up_down==0)
m.add_item_tts("enable up and down in all menus", "pd");
else
m.add_item_tts("disable up and down in all menus", "pd");
if(left_right==0)
m.add_item_tts("enable left and right in all menus", "lr");
else
m.add_item_tts("disable left and right in all menus", "lr");
if(home_end==0)
m.add_item_tts("enable home and end in all menus", "hd");
else
m.add_item_tts("disable home and end in all menus", "hd");
if(wrap==0)
m.add_item_tts("enable wrapping in all menus", "rg");
else
m.add_item_tts("disable wrapping in all menus", "rg");
if(repeat_items==0)
m.add_item_tts("enable repeating items in all menus", "rms");
else
m.add_item_tts("disable repeating items in all menus", "rms");
if(numbers==0)
m.add_item_tts("enable number scrolling in all menus", "nbs");
else
m.add_item_tts("disable number scrolling in all menus", "nbs");
if(first_letter==0)
m.add_item_tts("enable first letter scrolling in all menus", "fls");
else
m.add_item_tts("disable first letter scrolling in all menus", "fls");
if(position_info==0)
m.add_item_tts("enable position information in all menus", "psn");
else
m.add_item_tts("disable position information in all menus", "psn");
if(side_scroll==0)
m.add_item_tts("enable side scrolling in all menus", "psl");
else
m.add_item_tts("disable side scrolling in all menus", "psl");
m.add_item_tts("reset settings", "rest");
m.add_item_tts("save settings", "preffs");
m.add_item_tts("back", "back");
int mres=m.run("Settings menu",true);
string ssm=m.get_item_name(mres);
if(mres==0)
{
mainmenu();
}
if(ssm=="hideme")
{
hidemenu();
}
if(ssm=="skipm")
{
input.set_only_allowed_chars("1234567890-");
string skmount=input.input("Enter the maximum up and down skip amount you'd like to set.");
if(mskipnum=="")
return;
mskipnum=string_to_number(skmount);
dlg("Up and down skip amount set. Press enter to continue.");
settingsmenu();
}
if(ssm=="slt")
{
string[] chars=find_directories("data/layouts/characters/*");
if(chars.length()==0)
{
dlg_snd("Error. There are no characters available to view. Press enter to continue.");
settingsmenu();
}
else
{
destroy_all_charas();
string[] charlist=find_directories("data/layouts/characters/*");
for(uint i=0; i<charlist.length(); i++)
{
charparse(charlist[i]);
}
string res=charsmenu();
if(res!="")
{
chartype=res;
}
}
}
if(ssm=="slk")
{
string[] themetype=find_directories("data/sounds/"+soundpack+"/typing themes/*");
if(themetype.length()==0)
{
dlg_snd("Error. There are no keyboard themes available to view. Press enter to continue.");
settingsmenu();
}
else
{
string res=keyboardchoosers();
if(res!="")
{
keyboardtheme=res;
}
}
}
if(ssm=="slm")
{
string[] menu=find_directories("data/sounds/"+soundpack+"/menus/*");
if(menu.length()==0)
{
dlg_snd("Error. There are no menus available to view. Press enter to continue.");
settingsmenu();
}
else
{
string res=menuchoosers();
if(res!="")
{
menutype=res;
}
}
}
if(ssm=="spk")
{
string[] soundpacktyp=find_directories("data/sounds/*");
if(soundpacktyp.length()==0)
{
dlg_snd("Error. There are no sound packs available to view. Press enter to continue.");
settingsmenu();
}
else
{
string[] soundpacks=find_directories("data/sounds/*");
setupmenu();
for(uint i=0; i<soundpacks.length(); i++)
{
uint64 size = get_directory_size("data/sounds/" + soundpacks[i]);
string readable_size = measure_file_size(size);
m.add_item_tts(soundpacks[i]+", size: "+readable_size,soundpacks[i]);
}
int mres=m.run("Choose the sound pack you would like to use throughout the intire game.", true);
if(mres==0)
{
settingsmenu();
}
if (mres==0 and mres>=soundpacks.length())
{
chartype="";
keyboardtheme="";
menutype="";
soundpack=soundpacks[mres-1];
}
if (mres>0 and mres<=soundpacks.length())
{
chartype="";
keyboardtheme="";
menutype="";
soundpack=soundpacks[mres-1];
dlg("Sound pack set. Press enter to continue.");
settingsmenu();
}
}
}
if(ssm=="sdm")
{
string[]@ devices=get_sound_output_devices();
devices.remove_at(0);
setupmenu();
for(uint i=0; i<devices.length(); i++)
{
m.add_item_tts(devices[i],devices[i],"",true);
}
int mres=m.run("Choose a sound device you would like to use in the game.",true);
if(mres==0)
{
speak("canceled");
settingsmenu();
}
if(mres>0 and mres<=devices.length())
{
soundcard=devices[mres-1];
sound_output_device = mres;
dlg("Sound device set to "+soundcard+". Press enter to continue.");
settingsmenu();
}
}
if(ssm=="sjn")
{
if(autojump==0)
{
autojump=1;
dlg("Auto jumpping in maps enabled. Press enter to continue.");
}
else
{
autojump=0;
dlg("Auto jumpping in maps disabled. Press enter to continue.");
}
settingsmenu();
}
if(ssm=="sgn")
{
if(autosave==0)
{
autosave=1;
dlg("Game auto saving enabled.  Press enter to continue.");
}
else
{
autosave=0;
dlg("Game auto saving disabled.  Press enter to continue.");
}
settingsmenu();
}
if(ssm=="dcb")
{
if(dockmode==0)
{
dockmode=1;
dlg("Form based documentation enabled. Press enter to continue.");
}
else
{
dockmode=0;
dlg("Form based documentation disabled. Press enter to continue.");
}
settingsmenu();
}
if(ssm=="fdv")
{
if(fademode==0)
{
fademode=1;
dlg("Global volume fading enabled. Press enter to continue.");
}
else
{
fademode=0;
dlg("Global volume fading disabled. Press enter to continue.");
}
settingsmenu();
}
if(ssm=="hms")
{
if(heartsound==0)
{
heartsound=1;
dlg("Heart monidor enabled for all game modes. Press enter to continue.");
}
else
{
heartsound=0;
dlg("Heart monidor disabled for all game modes. Press enter to continue.");
}
settingsmenu();
}
if(ssm=="psm")
{
if(pausem==0)
{
pausem=1;
dlg("Pause menu enabled for all game modes. Press enter to continue.");
}
else
{
pausem=0;
dlg("Pause menu disabled for all game modes. Press enter to continue.");
}
settingsmenu();
}
if(ssm=="shd")
{
if(spacehold==0)
{
spacehold=1;
dlg("Space hold in all menus enabled. Press enter to continue.");
}
else
{
spacehold=0;
dlg("Space hold in all menus disabled. Press enter to continue.");
}
settingsmenu();
}
if(ssm=="glh")
{
if(hrtf==true)
{
hrtf=false;
sound_global_hrtf=false;
dlg("Global hrtf disabled. Press enter to continue.");
}
else
{
hrtf=true;
sound_global_hrtf=true;
dlg("Global hrtf enabled. Press enter to continue.");
}
settingsmenu();
}
if(ssm=="mt")
{
if(mreset==0)
{
mreset=1;
m.reset(true);
dlg("Menus resetting enabled. Press enter to continue.");
}
else
{
mreset=0;
m.reset(false);
dlg("Menus resetting disabled. Press enter to continue.");
}
settingsmenu();
}
if(ssm=="pd")
{
if(up_down==0)
{
up_down=1;
m.enable_up_and_down=true;
dlg("Up and down in all menus enabled. Press enter to continue.");
}
else
{
up_down=0;
m.enable_up_and_down=false;
dlg("Up and down in all menus disabled. Press enter to continue.");
}
settingsmenu();
}
if(ssm=="lr")
{
if(left_right==0)
{
left_right=1;
m.enable_left_and_right=true;
dlg("Left and right in all menus enabled. Press enter to continue.");
}
else
{
left_right=0;
m.enable_left_and_right=false;
dlg("Left and right in all menus disabled. Press enter to continue.");
}
settingsmenu();
}
if(ssm=="hd")
{
if(home_end==0)
{
home_end=1;
m.enable_home_and_end=true;
dlg("Home and end in all menus enabled. Press enter to continue.");
}
else
{
home_end=0;
m.enable_home_and_end=false;
dlg("Home and end in all menus disabled.  Press enter to continue.");
}
settingsmenu();
}
if(ssm=="rg")
{
if(wrap==0)
{
wrap=1;
m.wrap=true;
dlg("Wrapping in all menus enabled. Press enter to continue.");
}
else
{
wrap=0;
m.wrap=false;
dlg("Wrapping in all menus disabled. Press enter to continue.");
}
settingsmenu();
}
if(ssm=="rms")
{
if(repeat_items==0)
{
repeat_items=1;
m.repeat_items_at_edges=true;
dlg("Repeating items in all menus enabled. Press enter to continue.");
}
else
{
repeat_items=0;
m.repeat_items_at_edges=false;
dlg("Repeating items in all menus disabled. Press enter to continue.");
}
settingsmenu();
}
if(ssm=="nbs")
{
if(numbers==0)
{
numbers=1;
m.enable_numbers=true;
dlg("Number scrolling in all menus enabled. Press enter to continue.");
}
else
{
numbers=0;
m.enable_numbers=false;
dlg("Number scrolling in all menus disabled. Press enter to continue.");
}
settingsmenu();
}
if(ssm=="fls")
{
if(first_letter==0)
{
first_letter=1;
m.enable_first_letter_navigation=true;
dlg("First letter scrolling in all menus enabled. Press enter to continue.");
}
else
{
first_letter=0;
m.enable_first_letter_navigation=false;
dlg("First letter scrolling in all menus disabled. Press enter to continue.");
}
settingsmenu();
}
if(ssm=="psn")
{
if(position_info==0)
{
position_info=1;
m.speak_position_information=true;
dlg("Position info in all menus enabled.  Press enter to continue.");
}
else
{
position_info=0;
m.speak_position_information=false;
dlg("Position info in all menus disabled. Press enter to continue.");
}
settingsmenu();
}
if(ssm=="psl")
{
if(side_scroll==0)
{
side_scroll=1;
m.enable_side_scrolling=true;
dlg("Side scrolling in all menus enabled. Press enter to continue.");
}
else
{
side_scroll=0;
m.enable_side_scrolling=false;
dlg("Side scrolling in all menus disabled. Press enter to continue.");
}
settingsmenu();
}
if(ssm=="rest")
{
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Are you sure you want to reset all of your settings?",true);
if(mres==0)
{
speak("canceled");
settingsmenu();
}
if(mres==1)
{
if(file_exists("data/saves/options.dat")) file_delete("data/saves/options.dat");
dlg("Settings reset. Press enter to continue.");
resetpreffs();
settingsmenu();
}
if(mres==2)
{
settingsmenu();
}
}
if(ssm=="preffs")
{
dlg("Settings saved. Press enter to continue.");
writepreffs();
settingsmenu();
}
if(ssm=="back")
{
mainmenu();
}
}

void buildmenu()
{
setupmenu();
m.add_item_tts("animal", "an");
m.add_item_tts("animal zone", "az");
m.add_item_tts("blockage", "bl");
m.add_item_tts("bomb", "bm");
m.add_item_tts("bomb zone", "bz");
m.add_item_tts("boss", "bs");
m.add_item_tts("calander", "cn");
m.add_item_tts("checkpoint", "cp");
m.add_item_tts("clock", "cl");
m.add_item_tts("conveyor belt", "cb");
m.add_item_tts("dialog", "dlg");
m.add_item_tts("door", "ds");
m.add_item_tts("enemy", "em");
m.add_item_tts("enemy zone", "ez");
m.add_item_tts("floor breaker", "fbr");
m.add_item_tts("force field", "fld");
m.add_item_tts("hazard", "hd");
m.add_item_tts("heal zone", "hz");
m.add_item_tts("item", "obj");
m.add_item_tts("item zone", "iz");
m.add_item_tts("lift", "lf");
m.add_item_tts("lockable door", "ld");
m.add_item_tts("lockable passage", "lg");
m.add_item_tts("mine", "mn");
m.add_item_tts("moving hazard", "mhd");
m.add_item_tts("moving platform", "mpl");
m.add_item_tts("music ambience", "musamb");
m.add_item_tts("music source", "mus");
m.add_item_tts("passage", "psg");
m.add_item_tts("platform", "pf");
m.add_item_tts("projectile", "pj");
m.add_item_tts("projectile zone", "pz");
m.add_item_tts("reverb", "rev");
m.add_item_tts("robot", "rt");
m.add_item_tts("robot zone", "rz");
m.add_item_tts("sign", "sn");
m.add_item_tts("sound ambience", "srcamb");
m.add_item_tts("sound source", "src");
m.add_item_tts("spike", "sp");
m.add_item_tts("spawnpoint", "st");
m.add_item_tts("staircase", "sf");
m.add_item_tts("teleporter", "tp");
m.add_item_tts("text square", "txt");
m.add_item_tts("time bomb", "tbm");
m.add_item_tts("timed music", "tmc");
m.add_item_tts("timed source", "trc");
m.add_item_tts("timed text", "tmt");
m.add_item_tts("travelpoint", "trp");
m.add_item_tts("turret", "tt");
m.add_item_tts("vanishing platform", "vp");
m.add_item_tts("vehicle", "vh");
m.add_item_tts("wall", "wl");
m.add_item_tts("zombie", "zb");
m.add_item_tts("zombie zone", "zz");
m.add_item_tts("zone", "zn");
m.add_item_tts("add a line", "addline");
m.add_item_tts("edit a line", "editline");
m.add_item_tts("remove a line", "remline");
m.add_item_tts("copy raw map data to clipboard", "clboard");
m.add_item_tts("paste raw map data from clipboard", "clboard2");
m.add_item_tts("delete map", "dcm");
m.add_item_tts("reload map", "rcm");
int mres=m.run("Builder menu",true);
string buildem=m.get_item_name(mres);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(buildem=="srcamb")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","","Enter the minimum x of this sound ambience.");
string mx2=virtual_input_box("","Enter the maximum x of this sound ambience.");
string my=virtual_input_box("","Enter the minimum y of this sound ambience.");
string my2=virtual_input_box("","Enter the maximum y of this sound ambience.");
if(x=="" and paxx=="" and y=="" and paxy=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
string[] soundamb=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(soundamb.length()==0)
{
dlg_snd("Error. There are no sound ambiences available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"sound_ambience "+x+" "+paxx+" "+y+" "+paxy+" "+sorcetyp+" "+volume+" "+pitch);
mapper.close();
spawn_ambsource(x, paxx, y, paxy, sorcetyp, volume, pitch);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="musamb")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this music ambience.");
string mx2=virtual_input_box("","Enter the maximum x of this music ambience.");
string my=virtual_input_box("","Enter the minimum y of this music ambience.");
string my2=virtual_input_box("","Enter the maximum y of this music ambience.");
if(x=="" and paxx=="" and y=="" and paxy=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
string[] musicamb=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(musicamb.length()==0)
{
dlg_snd("Error. There are no music ambiences available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"music_ambience "+x+" "+paxx+" "+y+" "+paxy+" "+mustyp+" "+volume+" "+pitch);
mapper.close();
spawn_musicamb(x, paxx, y, paxy, mustyp, volume, pitch);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="an")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this animal.");
string my=virtual_input_box("","Enter the y of this animal.");
string rng=virtual_input_box("","Enter the horizontal atack range of this animal.");
string rng2=virtual_input_box("","Enter the vertical atack range of this animal.");
string rng3=virtual_input_box("","Enter the horizontal seeing range of this animal.");
string rng4=virtual_input_box("","Enter the vertical seeing range of this animal.");
string hp=virtual_input_box("","Enter the health of this animal.");
string hc=virtual_input_box("","Enter the maximum lives of this animal.");
string dm=virtual_input_box("","Enter the maximum damage of this animal.");
string ft=virtual_input_box("","Enter the fire time of this animal.");
string sp=virtual_input_box("","Enter the speed of this animal.");
string lev=virtual_input_box("","Enter the level of this animal.");
string exper=virtual_input_box("","Enter the xp of this animal.");
if(x=="" and y=="" and amrange=="" and amrange2=="" and amrange3=="" and amrange4=="" and minhp=="" and card=="" and damage=="" and firetime=="" and speedtime=="" and lv=="" and xn=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
amrange=string_to_number(rng);
amrange2=string_to_number(rng2);
amrange3=string_to_number(rng3);
amrange4=string_to_number(rng4);
minhp=string_to_number(hp);
card=string_to_number(hc);
damage=string_to_number(dm);
firetime=string_to_number(ft);
speedtime=string_to_number(sp);
lv=string_to_number(lev);
xn=string_to_number(exper);
string[] animal=find_directories("data/sounds/"+soundpack+"/npc/normal/animals/*");
if(animal.length()==0)
{
dlg_snd("Error. There are no animals available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=animalsmenu();
if(res!="")
{
amtype=res;
}
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Should the animal attack you?",true);
if(mres2==0)
{
speak("canceled");
return;
}
if(mres2==1)
{
fb=true;
}
if(mres2==2)
{
fb=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Should the animal move?",true);
if(mres3==0)
{
speak("canceled");
return;
}
if(mres3==1)
{
mb=true;
}
if(mres3==2)
{
mb=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres4=m.run("Should the animal folow you up on other platforms?",true);
if(mres4==0)
{
speak("canceled");
return;
}
if(mres4==1)
{
mb2=true;
}
if(mres4==2)
{
mb2=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres5=m.run("Should the animal drop an item after killing it?",true);
if(mres5==0)
{
speak("canceled");
return;
}
if(mres5==1)
{
itms=true;
}
if(mres5==2)
{
itms=false;
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"animal "+x+" "+y+" "+amrange+" "+amrange2+" "+amrange3+" "+amrange4+" "+minhp+" "+card+" "+damage+" "+firetime+" "+speedtime+" "+lv+" "+xn+" "+amtype+" "+fb+" "+mb+" "+mb2+" "+itms);
mapper.close();
spawn_animal(x, y, amrange, amrange2, amrange3, amrange4, minhp, minhp, card, damage, firetime, speedtime, lv, xn, amtype, fb, mb, mb2, itms);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="az")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this animal zone.");
string mx2=virtual_input_box("","Enter the maximum x of this animal zone.");
string my=virtual_input_box("","Enter the y of this animal zone.");
string sp=virtual_input_box("","Enter the spawn time of this animal zone.");
if(x=="" and paxx=="" and y=="" and speedtime=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
speedtime=string_to_number(sp);
string[] animal=find_directories("data/sounds/"+soundpack+"/npc/normal/animals/*");
if(animal.length()==0)
{
dlg_snd("Error. There are no animals available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=animalsmenu(true);
if(res!="")
{
amtype=res;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"animal_zone "+x+" "+paxx+" "+y+" "+speedtime+" "+amtype);
mapper.close();
spawn_animalzone(x, paxx, y, speedtime, amtype);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="bl")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this blockage.");
string mx2=virtual_input_box("","Enter the maximum x of this blockage.");
string my=virtual_input_box("","Enter the minimum y of this blockage.");
string my2=virtual_input_box("","Enter the maximum y of this blockage.");
//input.set_only_allowed_chars("none");
string text=virtual_input_box("","Enter the text of this blockage.");
if(x=="" and paxx=="" and y=="" and paxy=="" and txt=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
txt=text;
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"blockage "+x+" "+paxx+" "+y+" "+paxy+" "+txt);
mapper.close();
spawn_blockage(x, paxx, y, paxy, txt);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="bm")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this bomb.");
string my=virtual_input_box("","Enter the y of this bomb.");
string dm=virtual_input_box("","Enter the maximum damage of this bomb.");
string sp=virtual_input_box("","Enter the speed of this bomb.");
if(x=="" and y=="" and damage=="" and speedtime=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
damage=string_to_number(dm);
speedtime=string_to_number(sp);
string[] bomb=find_directories("data/sounds/"+soundpack+"/objects/bombs/*");
if(bomb.length()==0)
{
dlg_snd("Error. There are no bombs available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=bombsmenu();
if(res!="")
{
botype=res;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"bomb "+x+" "+y+" "+damage+" "+speedtime+" "+botype);
mapper.close();
spawn_bomb(x, y, damage, speedtime, botype);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="bz")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this bomb zone.");
string mx2=virtual_input_box("","Enter the maximum x of this bomb zone.");
string my=virtual_input_box("","Enter the y of this bomb zone.");
string sp=virtual_input_box("","Enter the spawn time of this bomb zone.");
if(x=="" and paxx=="" and y=="" and speedtime=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
speedtime=string_to_number(sp);
string[] bomb=find_directories("data/sounds/"+soundpack+"/objects/bombs/*");
if(bomb.length()==0)
{
dlg_snd("Error. There are no bombs available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=bombsmenu();
if(res!="")
{
botype=res;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"bomb_zone "+x+" "+paxx+" "+y+" "+speedtime+" "+botype);
mapper.close();
spawn_bombzone(x, paxx, y, speedtime, botype);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="bs")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this boss.");
string my=virtual_input_box("","Enter the y of this boss.");
string rng=virtual_input_box("","Enter the horizontal atack range of this boss.");
string rng2=virtual_input_box("","Enter the vertical atack range of this boss.");
string rng3=virtual_input_box("","Enter the horizontal seeing range of this boss.");
string rng4=virtual_input_box("","Enter the vertical seeing range of this boss.");
string hp=virtual_input_box("","Enter the health of this boss.");
string hc=virtual_input_box("","Enter the maximum lives of this boss.");
string dm=virtual_input_box("","Enter the maximum damage of this boss.");
string ft=virtual_input_box("","Enter the fire time of this boss.");
string lt=virtual_input_box("","Enter the launch time of this boss.");
string sp=virtual_input_box("","Enter the speed of this boss.");
string tt=virtual_input_box("","Enter the teleport time of this boss.");
string ht=virtual_input_box("","Enter the healing time of this boss.");
string lev=virtual_input_box("","Enter the level of this boss.");
string exper=virtual_input_box("","Enter the xp of this boss.");
if(x=="" and y=="" and bossrange=="" and bossrange2=="" and bossrange3=="" and bossrange4=="" and minhp=="" and card=="" and damage=="" and firetime=="" and launchtime=="" and speedtime=="" and teltime=="" and healtime=="" and lv=="" and xn=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
bossrange=string_to_number(rng);
bossrange2=string_to_number(rng2);
bossrange3=string_to_number(rng3);
bossrange4=string_to_number(rng4);
minhp=string_to_number(hp);
card=string_to_number(hc);
damage=string_to_number(dm);
firetime=string_to_number(ft);
launchtime=string_to_number(lt);
speedtime=string_to_number(sp);
teltime=string_to_number(tt);
healtime=string_to_number(ht);
lv=string_to_number(lev);
xn=string_to_number(exper);
string[] boss=find_directories("data/sounds/"+soundpack+"/npc/boss/*");
if(boss.length()==0)
{
dlg_snd("Error. There are no bosses available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=bossesmenu();
if(res!="")
{
bosstyp=res;
}
}
setupmenu();
m.add_item_tts("animal","an2");
m.add_item_tts("enemy","em2");
m.add_item_tts("projectile","pj2");
m.add_item_tts("robot","rt2");
m.add_item_tts("zombie","zb2");
int mres=m.run("What would you like this boss to spawn?",true);
string buildem2=m.get_item_name(mres);
if(mres==0)
{
speak("canceled");
return;
}
if(buildem2=="an2")
{
string[] animal=find_directories("data/sounds/"+soundpack+"/npc/normal/animals/*");
if(animal.length()==0)
{
dlg_snd("Error. There are no animals available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=animalsmenu();
if(res!="")
{
bosstyp2="animal";
bosstyp3=res;
}
}
}
if(buildem2=="em2")
{
string[] enemie=find_directories("data/sounds/"+soundpack+"/npc/normal/enemies/*");
if(enemie.length()==0)
{
dlg_snd("Error. There are no enemies available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=enemiesmenu();
if(res!="")
{
bosstyp2="enemie";
bosstyp3=res;
}
}
}
if(buildem2=="pj2")
{
string[] projectile=find_directories("data/sounds/"+soundpack+"/npc/normal/projectiles/*");
if(projectile.length()==0)
{
dlg_snd("Error. There are no projectiles available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=projesmenu();
if(res!="")
{
bosstyp2="projectile";
bosstyp3=res;
}
}
}
if(buildem2=="rt2")
{
string[] robot=find_directories("data/sounds/"+soundpack+"/npc/normal/robots/*");
if(robot.length()==0)
{
dlg_snd("Error. There are no robots available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=robotsmenu();
if(res!="")
{
bosstyp2="robot";
bosstyp3=res;
}
}
}
if(buildem2=="zb2")
{
string[] zombie=find_directories("data/sounds/"+soundpack+"/npc/normal/zombies/*");
if(zombie.length()==0)
{
dlg_snd("Error. There are no zombies available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=zombiesmenu();
if(res!="")
{
bosstyp2="zombie";
bosstyp3=res;
}
}
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres18=m.run("Should the boss attack you?",true);
if(mres18==0)
{
speak("canceled");
return;
}
if(mres18==1)
{
fb=true;
}
if(mres18==2)
{
fb=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres19=m.run("Should the boss move?",true);
if(mres19==0)
{
speak("canceled");
return;
}
if(mres19==1)
{
mb=true;
}
if(mres19==2)
{
mb=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres20=m.run("Should the boss folow you up on other platforms?",true);
if(mres20==0)
{
speak("canceled");
return;
}
if(mres20==1)
{
mb2=true;
}
if(mres20==2)
{
mb2=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres21=m.run("Should the boss teleport randomly on the x axes?",true);
if(mres21==0)
{
speak("canceled");
return;
}
if(mres21==1)
{
tb=true;
}
if(mres21==2)
{
tb=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres22=m.run("Should the boss teleport randomly on the y axes?",true);
if(mres22==0)
{
speak("canceled");
return;
}
if(mres22==1)
{
tb2=true;
}
if(mres22==2)
{
tb2=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres23=m.run("Should the boss heal it's health randomly?",true);
if(mres23==0)
{
speak("canceled");
return;
}
if(mres23==1)
{
hb=true;
}
if(mres23==2)
{
hb=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres24=m.run("Should the boss drop an item after killing it?",true);
if(mres24==0)
{
speak("canceled");
return;
}
if(mres24==1)
{
itms=true;
}
if(mres24==2)
{
itms=false;
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"boss "+x+" "+y+" "+bossrange+" "+bossrange2+" "+bossrange3+" "+bossrange4+" "+minhp+" "+card+" "+damage+" "+firetime+" "+launchtime+" "+speedtime+" "+teltime+" "+healtime+" "+lv+" "+xn+" "+bosstyp+" "+bosstyp2+" "+bosstyp3+" "+fb+" "+mb+" "+mb2+" "+tb+" "+tb2+" "+hb+" "+itms);
mapper.close();
spawn_boss(x, y, bossrange, bossrange2, bossrange3, bossrange4, minhp, minhp, card, damage, firetime, launchtime, speedtime, teltime, healtime, lv, xn, bosstyp, bosstyp2, bosstyp3, fb, mb, mb2, tb, tb2, hb, itms);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="cn")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this calander.");
string my=virtual_input_box("","Enter the y of this calander.");
//input.set_only_allowed_chars("none");
string text=virtual_input_box("","Enter the text of this calander.");
if(x=="" and y=="" and txt=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
txt=text;
string[] calander=find_directories("data/sounds/"+soundpack+"/objects/calanders/*");
if(calander.length()==0)
{
dlg_snd("Error. There are no calanders available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=calandersmenu();
if(res!="")
{
calandertyp=res;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Do you want this calendar to be destroyable?",true);
if(mres==0)
{
speak("canceled");
return;
}
if(mres==1)
{
dmd=true;
}
if(mres==2)
{
dmd=false;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"calander "+x+" "+y+" "+txt+" "+calandertyp+" "+dmd);
mapper.close();
spawn_calander(x, y, txt, calandertyp, dmd);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="cl")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this clock.");
string my=virtual_input_box("","Enter the y of this clock.");
//input.set_only_allowed_chars("none");
string text=virtual_input_box("","Enter the text of this clock.");
if(x=="" and y=="" and txt=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
txt=text;
string[] clock=find_directories("data/sounds/"+soundpack+"/objects/clocks/*");
if(clock.length()==0)
{
dlg_snd("Error. There are no clocks available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=clocksmenu();
if(res!="")
{
clocktyp=res;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Do you want this clock to be destroyable?",true);
if(mres==0)
{
speak("canceled");
return;
}
if(mres==1)
{
dmd=true;
}
if(mres==2)
{
dmd=false;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"clock "+x+" "+y+" "+txt+" "+clocktyp+" "+dmd);
mapper.close();
spawn_clock(x, y, txt, clocktyp, dmd);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="cb")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this conveyor belt.");
string mx2=virtual_input_box("","Enter the maximum x of this conveyor belt.");
string my=virtual_input_box("","Enter the minimum y of this conveyor belt.");
string my2=virtual_input_box("","Enter the maximum y of this conveyor belt.");
string dr=virtual_input_box("","Enter the direction of this conveyor belt. 1 for left, 2 for right, 3 for down, and 4 for up.");
string sp=virtual_input_box("","Enter the speed of this conveyor belt.");
if(x=="" and paxx=="" and y=="" and paxy=="" and direction=="" and speedtime=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
direction=string_to_number(dr);
speedtime=string_to_number(sp);
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
string[] belt=find_directories("data/sounds/"+soundpack+"/objects/belts/*");
if(belt.length()==0)
{
dlg_snd("Error. There are no belts available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=beltsmenu();
if(res!="")
{
belttyp=res;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"belt "+x+" "+paxx+" "+y+" "+paxy+" "+direction+" "+speedtime+" "+tiletype+" "+belttyp);
mapper.close();
spawn_belt(x, paxx, y, paxy, direction, speedtime, tiletype, belttyp);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="dlg")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this dialog.");
string mx2=virtual_input_box("","Enter the maximum x of this dialog.");
string my=virtual_input_box("","Enter the minimum y of this dialog.");
string my2=virtual_input_box("","Enter the maximum y of this dialog.");
//input.set_only_allowed_chars("none");
string text=virtual_input_box("","Enter the text of this dialog.");
if(x=="" and paxx=="" and y=="" and paxy=="" and txt=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
txt=text;
string[] dialog=find_directories("data/sounds/"+soundpack+"/objects/dialogs/*");
if(dialog.length()==0)
{
dlg_snd("Error. There are no dialogs available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=dlgsmenu();
if(res!="")
{
dlgtyp=res;
}
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres25=m.run("Do you want this dialog to auto activate when stepped on?",true);
if(mres25==0)
{
speak("canceled");
return;
}
if(mres25==1)
{
dlt=true;
}
if(mres25==2)
{
dlt=false;
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"dialog "+x+" "+paxx+" "+y+" "+paxy+" "+txt+" "+dlgtyp+" "+dlt);
mapper.close();
spawn_dialog(x, paxx, y, paxy, txt, dlgtyp, dlt);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="ds")
{
//input.set_only_allowed_chars("1234567890-");
string sx=virtual_input_box("","Enter the starting x of this door.");
string sy=virtual_input_box("","Enter the starting y of this door.");
string nx=virtual_input_box("","Enter the finishing x of this door.");
string ny=virtual_input_box("","Enter the finishing y of this door.");
string hp=virtual_input_box("","Enter the health of this door.");
string sp=virtual_input_box("","Enter the speed of this door.");
if(x=="" and y=="" and x2=="" and y2=="" and minhp=="" and speedtime=="")
return;
x=string_to_number(sx);
y=string_to_number(sy);
x2=string_to_number(nx);
y2=string_to_number(ny);
minhp=string_to_number(hp);
speedtime=string_to_number(sp);
string[] dloop=find_directories("data/sounds/"+soundpack+"/objects/doors/loop/*");
if(dloop.length()==0)
{
dlg_snd("Error. There are no door loops available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=dloopsmenu();
if(res!="")
{
looptyp=res;
}
}
string[] dmove=find_directories("data/sounds/"+soundpack+"/objects/doors/move/*");
if(dmove.length()==0)
{
dlg_snd("Error. There are no door moves available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res2=dmovesmenu();
if(res2!="")
{
movtyp=res2;
}
}
string[] dopen=find_directories("data/sounds/"+soundpack+"/objects/doors/open/*");
if(dopen.length()==0)
{
dlg_snd("Error. There are no door opens available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res3=dopensmenu();
if(res3!="")
{
opentyp=res3;
}
}
string[] dclose=find_directories("data/sounds/"+soundpack+"/objects/doors/close/*");
if(dclose.length()==0)
{
dlg_snd("Error. There are no door closes available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res4=dclosesmenu();
if(res4!="")
{
clostyp=res4;
}
}
string[] desttype=find_directories("data/sounds/"+soundpack+"/objects/doors/dest/*");
if(desttype.length()==0)
{
dlg_snd("Error. There are no door destructions available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res5=destsmenu();
if(res5!="")
{
desttyp=res5;
}
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres27=m.run("Do you want this door to autoactivate when stepped on?",true);
if(mres27==0)
{
speak("canceled");
return;
}
if(mres27==1)
{
dmt=true;
}
if(mres27==2)
{
dmt=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres28=m.run("Do you want this door to be destroyable?",true);
if(mres28==0)
{
speak("canceled");
return;
}
if(mres28==1)
{
dmd=true;
}
if(mres28==2)
{
dmd=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres23=m.run("Would you like to automatically build the opposite side of this door?",true);
if(mres23==0)
{
speak("canceled");
return;
}
if(mres23==1)
{
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"door "+x2+" "+y2+" "+x+" "+y+" "+minhp+" "+speedtime+" "+looptyp+" "+movtyp+" "+opentyp+" "+clostyp+" "+desttyp+" "+dmt+" "+dmd);
mapper.close();
spawn_door(x2, y2, x, y, minhp, minhp, speedtime, looptyp, movtyp, opentyp, clostyp, desttyp, dmt, dmd);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(mres23==2)
{
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"door "+x+" "+y+" "+x2+" "+y2+" "+minhp+" "+speedtime+" "+looptyp+" "+movtyp+" "+opentyp+" "+clostyp+" "+desttyp+" "+dmt+" "+dmd);
mapper.close();
spawn_door(x, y, x2, y2, minhp, minhp, speedtime, looptyp, movtyp, opentyp, clostyp, desttyp, dmt, dmd);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="ld")
{
//input.set_only_allowed_chars("1234567890-");
string sx=virtual_input_box("","Enter the starting x of this lockable door.");
string sy=virtual_input_box("","Enter the starting y of this lockable door.");
string nx=virtual_input_box("","Enter the finishing x of this lockable door.");
string ny=virtual_input_box("","Enter the finishing y of this lockable door.");
string hp=virtual_input_box("","Enter the health of this lockable door.");
string sp=virtual_input_box("","Enter the speed of this lockable door.");
//input.set_only_allowed_chars("none");
string ps=virtual_input_box("","Enter the password of this lockable door.");
if(x=="" and y=="" and x2=="" and y2=="" and minhp=="" and speedtime=="" and drpassword=="")
return;
x=string_to_number(sx);
y=string_to_number(sy);
x2=string_to_number(nx);
y2=string_to_number(ny);
minhp=string_to_number(hp);
speedtime=string_to_number(sp);
drpassword=ps;
string[] dloop=find_directories("data/sounds/"+soundpack+"/objects/doors/loop/*");
if(dloop.length()==0)
{
dlg_snd("Error. There are no door loops available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=dloopsmenu();
if(res!="")
{
looptyp=res;
}
}
string[] dmove=find_directories("data/sounds/"+soundpack+"/objects/doors/move/*");
if(dmove.length()==0)
{
dlg_snd("Error. There are no door moves available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res2=dmovesmenu();
if(res2!="")
{
movtyp=res2;
}
}
string[] dopen=find_directories("data/sounds/"+soundpack+"/objects/doors/open/*");
if(dopen.length()==0)
{
dlg_snd("Error. There are no door opens available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res3=dopensmenu();
if(res3!="")
{
opentyp=res3;
}
}
string[] dclose=find_directories("data/sounds/"+soundpack+"/objects/doors/close/*");
if(dclose.length()==0)
{
dlg_snd("Error. There are no door closes available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res4=dclosesmenu();
if(res4!="")
{
clostyp=res4;
}
}
string[] desttype=find_directories("data/sounds/"+soundpack+"/objects/doors/dest/*");
if(desttype.length()==0)
{
dlg_snd("Error. There are no door destructions available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res5=destsmenu();
if(res5!="")
{
desttyp=res5;
}
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres27=m.run("Do you want this lockable door to autoactivate when stepped on?",true);
if(mres27==0)
{
speak("canceled");
return;
}
if(mres27==1)
{
dmt=true;
}
if(mres27==2)
{
dmt=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres28=m.run("Do you want this lockable door to be destroyable?",true);
if(mres28==0)
{
speak("canceled");
return;
}
if(mres28==1)
{
dmd=true;
}
if(mres28==2)
{
dmd=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres23=m.run("Would you like to automatically build the opposite side of this lockable door?",true);
if(mres23==0)
{
speak("canceled");
return;
}
if(mres23==1)
{
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"psdoor "+x2+" "+y2+" "+x+" "+y+" "+minhp+" "+speedtime+" "+drpassword+" "+looptyp+" "+movtyp+" "+opentyp+" "+clostyp+" "+desttyp+" "+dmt+" "+dmd);
mapper.close();
spawn_psdoor(x2, y2, x, y, minhp, minhp, speedtime, drpassword, looptyp, movtyp, opentyp, clostyp, desttyp, dmt, dmd);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(mres23==2)
{
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"psdoor "+x+" "+y+" "+x2+" "+y2+" "+minhp+" "+speedtime+" "+drpassword+" "+looptyp+" "+movtyp+" "+opentyp+" "+clostyp+" "+desttyp+" "+dmt+" "+dmd);
mapper.close();
spawn_psdoor(x, y, x2, y2, minhp, minhp, speedtime, drpassword, looptyp, movtyp, opentyp, clostyp, desttyp, dmt, dmd);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="psg")
{
//input.set_only_allowed_chars("1234567890-");
string sx=virtual_input_box("","Enter the starting x of this passage.");
string sy=virtual_input_box("","Enter the starting y of this passage.");
string dr=virtual_input_box("","Enter the direction of this passage. 1 for left to right, and 2 for botum to top.");
string lk=virtual_input_box("","Enter the maximum length of this passage.");
string sp=virtual_input_box("","Enter the opening time of this passage.");
if(x=="" and y=="" and direction=="" and ln=="" and speedtime=="")
return;
x=string_to_number(sx);
y=string_to_number(sy);
direction=string_to_number(dr);
ln=string_to_number(lk);
speedtime=string_to_number(sp);
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
string[] dloop=find_directories("data/sounds/"+soundpack+"/objects/doors/loop/*");
if(dloop.length()==0)
{
dlg_snd("Error. There are no door loops available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=dloopsmenu();
if(res!="")
{
looptyp=res;
}
}
string[] dopen=find_directories("data/sounds/"+soundpack+"/objects/doors/open/*");
if(dopen.length()==0)
{
dlg_snd("Error. There are no door opens available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res2=dopensmenu();
if(res2!="")
{
opentyp=res2;
}
}
string[] dclose=find_directories("data/sounds/"+soundpack+"/objects/doors/close/*");
if(dclose.length()==0)
{
dlg_snd("Error. There are no door closes available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res3=dclosesmenu();
if(res3!="")
{
clostyp=res3;
}
}
string sp2=virtual_input_box("","Enter the closing time of this passage.");
if(speedtime2=="")
return;
speedtime2=string_to_number(sp);
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"passage "+x+" "+y+" "+direction+" "+ln+" "+speedtime+" "+tiletype+" "+looptyp+" "+opentyp+" "+clostyp+" "+speedtime2);
mapper.close();
spawn_passage(x, y, direction, ln, speedtime, tiletype, looptyp, opentyp, clostyp, speedtime2);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="lg")
{
//input.set_only_allowed_chars("1234567890-");
string sx=virtual_input_box("","Enter the starting x of this lockable passage.");
string sy=virtual_input_box("","Enter the starting y of this lockable passage.");
string dr=virtual_input_box("","Enter the direction of this lockable passage. 1 for left to right, and 2 for botum to top.");
string lk=virtual_input_box("","Enter the maximum length of this lockable passage.");
string sp=virtual_input_box("","Enter the opening time of this lockable passage.");
if(x=="" and y=="" and direction=="" and ln=="" and speedtime=="")
return;
x=string_to_number(sx);
y=string_to_number(sy);
direction=string_to_number(dr);
ln=string_to_number(lk);
speedtime=string_to_number(sp);
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
string[] dloop=find_directories("data/sounds/"+soundpack+"/objects/doors/loop/*");
if(dloop.length()==0)
{
dlg_snd("Error. There are no door loops available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=dloopsmenu();
if(res!="")
{
looptyp=res;
}
}
string[] dopen=find_directories("data/sounds/"+soundpack+"/objects/doors/open/*");
if(dopen.length()==0)
{
dlg_snd("Error. There are no door opens available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res2=dopensmenu();
if(res2!="")
{
opentyp=res2;
}
}
string[] dclose=find_directories("data/sounds/"+soundpack+"/objects/doors/close/*");
if(dclose.length()==0)
{
dlg_snd("Error. There are no door closes available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res3=dclosesmenu();
if(res3!="")
{
clostyp=res3;
}
}
//input.set_only_allowed_chars("none");
string ps=virtual_input_box("","Enter the password of this lockable passage.");
string sp2=virtual_input_box("","Enter the closing time of this lockable passage.");
if(pspassword=="" and speedtime2=="")
return;
pspassword=ps;
speedtime2=string_to_number(sp);
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"pspassage "+x+" "+y+" "+direction+" "+ln+" "+speedtime+" "+tiletype+" "+looptyp+" "+opentyp+" "+clostyp+" "+pspassword+" "+speedtime2);
mapper.close();
spawn_pspassage(x, y, direction, ln, speedtime, tiletype, looptyp, opentyp, clostyp, pspassword, speedtime2);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="em")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this enemy.");
string my=virtual_input_box("","Enter the y of this enemy.");
string rng=virtual_input_box("","Enter the horizontal atack range of this enemy.");
string rng2=virtual_input_box("","Enter the vertical atack range of this enemy.");
string rng3=virtual_input_box("","Enter the horizontal seeing range of this enemy.");
string rng4=virtual_input_box("","Enter the vertical seeing range of this enemy.");
string hp=virtual_input_box("","Enter the health of this enemy.");
string hc=virtual_input_box("","Enter the maximum lives of this enemy.");
string dm=virtual_input_box("","Enter the maximum damage of this enemy.");
string ft=virtual_input_box("","Enter the fire time of this enemy.");
string sp=virtual_input_box("","Enter the speed of this enemy.");
string lev=virtual_input_box("","Enter the level of this enemy.");
string exper=virtual_input_box("","Enter the xp of this enemy.");
if(x=="" and y=="" and emrange=="" and emrange2=="" and emrange3=="" and emrange4=="" and minhp=="" and card=="" and damage=="" and firetime=="" and speedtime=="" and lv=="" and xn=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
emrange=string_to_number(rng);
emrange2=string_to_number(rng2);
emrange3=string_to_number(rng3);
emrange4=string_to_number(rng4);
minhp=string_to_number(hp);
card=string_to_number(hc);
damage=string_to_number(dm);
firetime=string_to_number(ft);
speedtime=string_to_number(sp);
lv=string_to_number(lev);
xn=string_to_number(exper);
string[] enemie=find_directories("data/sounds/"+soundpack+"/npc/normal/enemies/*");
if(enemie.length()==0)
{
dlg_snd("Error. There are no enemies available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=enemiesmenu();
if(res!="")
{
emtype=res;
}
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Should the enemy attack you?",true);
if(mres2==0)
{
speak("canceled");
return;
}
if(mres2==1)
{
fb=true;
}
if(mres2==2)
{
fb=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Should the enemy move?",true);
if(mres3==0)
{
speak("canceled");
return;
}
if(mres3==1)
{
mb=true;
}
if(mres3==2)
{
mb=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres4=m.run("Should the enemy folow you up on other platforms?",true);
if(mres4==0)
{
speak("canceled");
return;
}
if(mres4==1)
{
mb2=true;
}
if(mres4==2)
{
mb2=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres5=m.run("Should the enemy drop an item after killing it?",true);
if(mres5==0)
{
speak("canceled");
return;
}
if(mres5==1)
{
itms=true;
}
if(mres5==2)
{
itms=false;
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"enemie "+x+" "+y+" "+emrange+" "+emrange2+" "+emrange3+" "+emrange4+" "+minhp+" "+card+" "+damage+" "+firetime+" "+speedtime+" "+lv+" "+xn+" "+emtype+" "+fb+" "+mb+" "+mb2+" "+itms);
mapper.close();
spawn_enemie(x, y, emrange, emrange2, emrange3, emrange4, minhp, minhp, card, damage, firetime, speedtime, lv, xn, emtype, fb, mb, mb2, itms);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="ez")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this enemy zone.");
string mx2=virtual_input_box("","Enter the maximum x of this enemy zone.");
string my=virtual_input_box("","Enter the y of this enemie zone.");
string sp=virtual_input_box("","Enter the spawn time of this enemy zone.");
if(x=="" and paxx=="" and y=="" and speedtime=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
speedtime=string_to_number(sp);
string[] enemie=find_directories("data/sounds/"+soundpack+"/npc/normal/enemies/*");
if(enemie.length()==0)
{
dlg_snd("Error. There are no enemies available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=enemiesmenu(true);
if(res!="")
{
emtype=res;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"enemie_zone "+x+" "+paxx+" "+y+" "+speedtime+" "+emtype);
mapper.close();
spawn_enemiezone(x, paxx, y, speedtime, emtype);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="fbr")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this floor breaker.");
string my=virtual_input_box("","Enter the y of this floor breaker.");
if(x=="" and y=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
string[] floorbtype=find_directories("data/sounds/"+soundpack+"/objects/floor breakers/*");
if(floorbtype.length()==0)
{
dlg_snd("Error. There are no floor breakers available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=floorsmenu();
if(res!="")
{
floortyp=res;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"floor_breaker "+x+" "+y+" "+floortyp);
mapper.close();
spawn_floorbreaker(x, y, floortyp);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="fld")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this force field.");
string mx2=virtual_input_box("","Enter the maximum x of this force field.");
string my=virtual_input_box("","Enter the minimum y of this force field.");
string my2=virtual_input_box("","Enter the maximum y of this force field.");
string dm=virtual_input_box("","Enter the maximum damage of this force field.");
string sp=virtual_input_box("","Enter the speed of this force field.");
if(x=="" and paxx=="" and y=="" and paxy=="" and damage=="" and speedtime=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
damage=string_to_number(dm);
speedtime=string_to_number(sp);
string[] forcefield=find_directories("data/sounds/"+soundpack+"/objects/force fields/*");
if(forcefield.length()==0)
{
dlg_snd("Error. There are no force fields available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=forcesmenu();
if(res!="")
{
forcetyp=res;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"forcefield "+x+" "+paxx+" "+y+" "+paxy+" "+damage+" "+speedtime+" "+forcetyp);
mapper.close();
spawn_forcefield(x, paxx, y, paxy, damage, speedtime, forcetyp);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="hd")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this hazard.");
string mx2=virtual_input_box("","Enter the maximum x of this hazard.");
string my=virtual_input_box("","Enter the minimum y of this hazard.");
string my2=virtual_input_box("","Enter the maximum y of this hazard.");
if(x=="" and paxx=="" and y=="" and paxy=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
string[] hazardtype=find_directories("data/sounds/"+soundpack+"/objects/hazards/*");
if(hazardtype.length()==0)
{
dlg_snd("Error. There are no hazards available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=hazardsmenu();
if(res!="")
{
hazztype=res;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Would you like to automaticly spawn ledges on both sides of this hazard?",true);
if(mres==0)
{
speak("canceled");
return;
}
if(mres==1)
{
lp=true;
}
if(mres==2)
{
lp=false;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"hazard "+x+" "+paxx+" "+y+" "+paxy+" "+hazztype+" "+lp);
mapper.close();
spawn_hazard(x, paxx, y, paxy, hazztype, lp);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="hz")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this heal zone.");
string mx2=virtual_input_box("","Enter the maximum x of this heal zone.");
string my=virtual_input_box("","Enter the minimum y of this heal zone.");
string my2=virtual_input_box("","Enter the maximum y of this heal zone.");
string hm=virtual_input_box("","Enter the healing mode of this heal zone. 0 for decreasing health, and 1 for increasing health.");
string hp=virtual_input_box("","Enter the health of this heal zone.");
string ht=virtual_input_box("","Enter the healing time of this heal zone.");
if(x=="" and paxx=="" and y=="" and paxy=="" and healthmode=="" and damage=="" and speedtime=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
healthmode=string_to_number(hm);
damage=string_to_number(hp);
speedtime=string_to_number(ht);
string[] heals=find_directories("data/sounds/"+soundpack+"/objects/heal zones/*");
if(heals.length()==0)
{
dlg_snd("Error. There are no heal zones available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=healsmenu();
if(res!="")
{
healtyp=res;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"heal_zone "+x+" "+paxx+" "+y+" "+paxy+" "+healthmode+" "+damage+" "+speedtime+" "+healtyp);
mapper.close();
spawn_healzone(x, paxx, y, paxy, healthmode, damage, speedtime, healtype);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="mn")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this mine.");
string my=virtual_input_box("","Enter the y of this mine.");
string dm=virtual_input_box("","Enter the maximum damage of this mine.");
if(x=="" and y=="" and damage=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
damage=string_to_number(dm);
string[] mine=find_directories("data/sounds/"+soundpack+"/objects/mines/*");
if(mine.length()==0)
{
dlg_snd("Error. There are no mines available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=minesmenu();
if(res!="")
{
minetyp=res;
}
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Should this mine be auto activated?",true);
if(mres==0)
{
speak("canceled");
return;
}
if(mres==1)
{
trg=true;
}
if(mres==2)
{
trg=false;
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"mine "+x+" "+y+" "+damage+" "+minetyp+" "+trg);
mapper.close();
spawn_mine(x, y, damage, minetyp, trg);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="mhd")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the left x of this moving hazard.");
string mx2=virtual_input_box("","Enter the right x of this moving hazard.");
string my=virtual_input_box("","Enter the botum y of this moving hazard.");
string my2=virtual_input_box("","Enter the top y of this moving hazard.");
string sx=virtual_input_box("","Enter the maximum x length of this moving hazard.");
string sy=virtual_input_box("","Enter the maximum y length of this moving hazard.");
string dr=virtual_input_box("","Enter the direction of this moving hazard. 0 for Right and left, 1 for up and down, 2 for Diagonal up/right and down/left, 3 for diagonal up/left and down/right, 4 for Left and right, 5 for Down and up, 6 for Diagonal down/left and up/right, and 7 for diagonal down/right and up/left.");
string sn=virtual_input_box("","Enter the snap mode of this moving hazard. 0 for no snapping, 1 for forward to snap, 2 for backward to snap, and 3 for snap at ends.");
string sp=virtual_input_box("","Enter the sspeed of this moving hazard. 100 is equaled to 1000 milliseconds, 50 is equaled to 500 milliseconds, 10 is equaled to 100 milliseconds, 5 is equaled to 50 milliseconds, and 1 is equaled to 10 milliseconds.");
if(x=="" and paxx=="" and y=="" and paxy=="" and x2=="" and y2=="" and direction=="" and direction2=="" and speedtime=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
x2=string_to_number(sx);
y2=string_to_number(sy);
direction=string_to_number(dr);
direction2=string_to_number(sn);
speedtime=string_to_number(sp);
string[] hazardtype=find_directories("data/sounds/"+soundpack+"/objects/hazards/*");
if(hazardtype.length()==0)
{
dlg_snd("Error. There are no hazards available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=hazardsmenu();
if(res!="")
{
hazztype=res;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"mhazard "+x+" "+paxx+" "+y+" "+paxy+" "+x2+" "+y2+" "+direction+" "+direction2+" "+speedtime+" "+hazztype);
mapper.close();
spawn_moving_hazard(x, paxx, y, paxy, x2, y2, direction, direction2, speedtime, hazztype);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="mpl")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the left x of this moving platform.");
string mx2=virtual_input_box("","Enter the right x of this moving platform.");
string my=virtual_input_box("","Enter the botum y of this moving platform.");
string my2=virtual_input_box("","Enter the top y of this moving platform.");
string sx=virtual_input_box("","Enter the maximum x length of this moving platform.");
string dr=virtual_input_box("","Enter the direction of this moving platform. 0 for Right and left, 1 for up and down, 2 for Diagonal up/right and down/left, 3 for diagonal up/left and down/right, 4 for Left and right, 5 for Down and up, 6 for Diagonal down/left and up/right, and 7 for diagonal down/right and up/left.");
string sn=virtual_input_box("","Enter the snap mode of this moving platform. 0 for no snapping, 1 for forward to snap, 2 for backward to snap, and 3 for snap at ends.");
string sp=virtual_input_box("","Enter the sspeed of this moving platform. 100 is equaled to 1000 milliseconds, 50 is equaled to 500 milliseconds, 10 is equaled to 100 milliseconds, 5 is equaled to 50 milliseconds, and 1 is equaled to 10 milliseconds.");
if(x=="" and paxx=="" and y=="" and paxy=="" and x2=="" and direction=="" and direction2=="" and speedtime=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
x2=string_to_number(sx);
direction=string_to_number(dr);
direction2=string_to_number(sn);
speedtime=string_to_number(sp);
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
string[] mplatform=find_directories("data/sounds/"+soundpack+"/objects/moving platforms/*");
if(mplatform.length()==0)
{
dlg_snd("Error. There are no moving platforms available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=mplatsmenu();
if(res!="")
{
mplattyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres2= s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres2==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume2=s.get_item_value(0);
pitch2=s.get_item_value(1);
//input.set_only_allowed_chars("1234567890-");
string vof=virtual_input_box("","Enter the volume offset of this moving platform.");
if(volset=="")
return;
volset=string_to_number(vof);
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"mplatform "+x+" "+paxx+" "+y+" "+paxy+" "+x2+" "+direction+" "+direction2+" "+speedtime+" "+tiletype+" "+volume+" "+pitch+" "+mplattyp+" "+volume2+" "+pitch2+" "+volset);
mapper.close();
spawn_moving_platform(x, paxx, y, paxy, x2, direction, direction2, speedtime, tiletype, volume, pitch, mplattyp, volume2, pitch2, volset);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="cp")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this checkpoint.");
string my=virtual_input_box("","Enter the y of this checkpoint.");
string sp=virtual_input_box("","Enter the speed of this checkpoint. Press enter to use the default speed, or control backspace to clear the input to type your own speed.", "350");
if(x=="" and y=="" and speedtime=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
speedtime=string_to_number(sp);
string[] checktype=find_directories("data/sounds/"+soundpack+"/objects/checkpoints/*");
if(checktype.length()==0)
{
dlg_snd("Error. There are no checkpoints available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=checksmenu();
if(res!="")
{
checktyp=res;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"checkpoint "+x+" "+y+" "+speedtime+" "+checktyp);
mapper.close();
spawn_checkpoint(x, y, speedtime, checktyp);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="obj")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this item.");
string my=virtual_input_box("","Enter the y of this item.");
string sp=virtual_input_box("","Enter the speed of this item. Press enter to use the default speed, or control backspace to clear the input to type your own speed.", "500");
if(x=="" and y=="" and speedtime=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
speedtime=string_to_number(sp);
setupmenu();
m.add_item_tts("health", "hp");
m.add_item_tts("other", "ot");
int mres=m.run("Items menu",true);
string itsm=m.get_item_name(mres);
if(mres==0)
{
speak("canceled");
return;
}
if(itsm=="hp")
{
string[] ithealth=find_directories("data/sounds/"+soundpack+"/equipments/items/unsorted/health/*");
if(ithealth.length()==0)
{
dlg_snd("Error. There are no health items available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=healthsmenu();
if(res!="")
{
itemtype="health";
itemtype2=res;
}
}
}
if(itsm=="ot")
{
string[] itother=find_directories("data/sounds/"+soundpack+"/equipments/items/unsorted/other/*");
if(itother.length()==0)
{
dlg_snd("Error. There are no other items available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=othersmenu();
if(res!="")
{
itemtype="other";
itemtype2=res;
}
}
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres28=m.run("Do you want this item to be autograbbed when stepped on?",true);
if(mres28==0)
{
speak("canceled");
return;
}
if(mres28==1)
{
itm=true;
}
if(mres28==2)
{
itm=false;
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"item "+x+" "+y+" "+speedtime+" "+itemtype+" "+itemtype2+" "+itm);
mapper.close();
spawn_obj(x, y, speedtime, itemtype, itemtype2, itm);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="iz")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this item zone.");
string mx2=virtual_input_box("","Enter the maximum x of this item zone.");
string my=virtual_input_box("","Enter the minimum y of this item zone.");
string my2=virtual_input_box("","Enter the maximum y of this item zone.");
string sp=virtual_input_box("","Enter the spawn time of this item zone.");
if(x=="" and paxx=="" and y=="" and paxy=="" and speedtime=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
speedtime=string_to_number(sp);
setupmenu();
m.add_item_tts("health", "hp");
m.add_item_tts("other", "ot");
int mres=m.run("Items menu",true);
string itsm=m.get_item_name(mres);
if(mres==0)
{
speak("canceled");
return;
}
if(itsm=="hp")
{
string[] ithealth=find_directories("data/sounds/"+soundpack+"/equipments/items/unsorted/health/*");
if(ithealth.length()==0)
{
dlg_snd("Error. There are no health items available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=healthsmenu();
if(res!="")
{
itemtype="health";
itemtype2=res;
}
}
}
if(itsm=="ot")
{
string[] itother=find_directories("data/sounds/"+soundpack+"/equipments/items/unsorted/other/*");
if(itother.length()==0)
{
dlg_snd("Error. There are no other items available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=othersmenu();
if(res!="")
{
itemtype="other";
itemtype2=res;
}
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"item_zone "+x+" "+paxx+" "+y+" "+paxy+" "+speedtime+" "+itemtype+" "+itemtype2);
mapper.close();
spawn_objzone(x, paxx, y, paxy, speedtime, itemtype, itemtype2);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="lf")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this lift.");
string mx2=virtual_input_box("","Enter the maximum x of this lift.");
string my=virtual_input_box("","Enter the minimum y of this lift.");
string my2=virtual_input_box("","Enter the maximum y of this lift.");
string dr=virtual_input_box("","Enter the direction of this lift. 0 for down and up, and 1 for up and down.");
string sp=virtual_input_box("","Enter the speed of this lift.");
if(x=="" and paxx=="" and y=="" and paxy=="" and direction=="" and speedtime=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
direction=string_to_number(dr);
speedtime=string_to_number(sp);
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
string[] liftform=find_directories("data/sounds/"+soundpack+"/objects/lifts/*");
if(liftform.length()==0)
{
dlg_snd("Error. There are no lifts available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=liftsmenu();
if(res!="")
{
lifttyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres2= s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres2==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume2=s.get_item_value(0);
pitch2=s.get_item_value(1);
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"lift "+x+" "+paxx+" "+y+" "+paxy+" "+direction+" "+speedtime+" "+tiletype+" "+volume+" "+pitch+" "+lifttyp+" "+volume2+" "+pitch2);
mapper.close();
spawn_lift(x, paxx, y, paxy, direction, speedtime, tiletype, volume, pitch, lifttyp, volume2, pitch2);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="mus")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this music source.");
string mx2=virtual_input_box("","Enter the maximum x of this music source.");
string my=virtual_input_box("","Enter the minimum y of this music source.");
string my2=virtual_input_box("","Enter the maximum y of this music source.");
if(x=="" and paxx=="" and y=="" and paxy=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no music sources available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"music_source "+x+" "+paxx+" "+y+" "+paxy+" "+mustyp+" "+volume+" "+pitch);
mapper.close();
spawn_musicsource(x, paxx, y, paxy, mustyp, volume, pitch);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="pf")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this platform.");
string mx2=virtual_input_box("","Enter the maximum x of this platform.");
string my=virtual_input_box("","Enter the y of this platform.");
if(x=="" and paxx=="" and y=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
//input.set_only_allowed_chars("1234567890-");
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"platform "+x+" "+paxx+" "+y+" "+tiletype+" "+volume+" "+pitch);
mapper.close();
spawn_platform(x, paxx, y, y, tiletype, volume, pitch);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="pj")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this projectile.");
string my=virtual_input_box("","Enter the y of this projectile.");
string dr=virtual_input_box("","Enter the direction of this projectile. 0 for left, and 1 for right");
string hp=virtual_input_box("","Enter the health of this projectile.");
string hc=virtual_input_box("","Enter the maximum lives of this projectile.");
string dm=virtual_input_box("","Enter the maximum damage of this projectile.");
string sp=virtual_input_box("","Enter the speed of this projectile.");
string lev=virtual_input_box("","Enter the level of this projectile.");
string exper=virtual_input_box("","Enter the xp of this projectile.");
if(x=="" and y=="" and direction=="" and minhp=="" and card=="" and damage=="" and speedtime=="" and lv=="" and xn=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
direction=string_to_number(dr);
minhp=string_to_number(hp);
card=string_to_number(hc);
damage=string_to_number(dm);
speedtime=string_to_number(sp);
lv=string_to_number(lev);
xn=string_to_number(exper);
string[] projectile=find_directories("data/sounds/"+soundpack+"/npc/normal/projectiles/*");
if(projectile.length()==0)
{
dlg_snd("Error. There are no projectiles available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=projesmenu();
if(res!="")
{
potype=res;
}
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres8=m.run("Should the projectile attack you?",true);
if(mres8==0)
{
speak("canceled");
return;
}
if(mres8==1)
{
fb=true;
}
if(mres8==2)
{
fb=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres9=m.run("Should the projectile move?",true);
if(mres9==0)
{
speak("canceled");
return;
}
if(mres9==1)
{
mb=true;
}
if(mres9==2)
{
mb=false;
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"projectile "+x+" "+y+" "+direction+" "+minhp+" "+card+" "+damage+" "+speedtime+" "+lv+" "+xn+" "+potype+" "+fb+" "+mb);
mapper.close();
spawn_projectile(x, y, direction, minhp, minhp, card, damage, speedtime, lv, xn, potype, fb, mb);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="pz")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this projectile zone.");
string mx2=virtual_input_box("","Enter the maximum x of this projectile zone.");
string my=virtual_input_box("","Enter the y of this projectile zone.");
string sp=virtual_input_box("","Enter the spawn time of this projectile zone.");
if(x=="" and paxx=="" and y=="" and speedtime=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
speedtime=string_to_number(sp);
string[] projectile=find_directories("data/sounds/"+soundpack+"/npc/normal/projectiles/*");
if(projectile.length()==0)
{
dlg_snd("Error. There are no projectiles available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=projesmenu(true);
if(res!="")
{
potype=res;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"projectile_zone "+x+" "+paxx+" "+y+" "+speedtime+" "+potype);
mapper.close();
spawn_projzone(x, paxx, y, speedtime, potype);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="rev")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this reverb.");
string mx2=virtual_input_box("","Enter the maximum x of this reverb.");
string my=virtual_input_box("","Enter the minimum y of this reverb.");
string my2=virtual_input_box("","Enter the maximum y of this reverb.");
//input.set_only_allowed_chars("none");
string rd=virtual_input_box("","Enter the id of this reverb. Press enter to use a random reverb id, or control backspace to clear the input to type your own reverb id.", generate_custom_token(random(5, 10), "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"));
if(x=="" and paxx=="" and y=="" and paxy=="" and reverid=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
reverid=rd;
create_slider();
s.add_slider_item("dry_mix", 0.0, 1.0, 0.0, 0.1);
s.add_slider_item("wet_mix", 0.0, 1.0, 0.0, 0.1);
s.add_slider_item("room_size", 0.0, 1.0, 0.0, 0.1);
s.add_slider_item("damping", 0.0, 1.0, 0.0, 0.1);
s.add_slider_item("width", 0.0, 1.0, 0.0, 0.1);
int sres = s.run_slider("Reverb designer. Press tab or shift tab to cycle through the reverb parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
revdry=s.get_item_value(0);
revwet=s.get_item_value(1);
revsize=s.get_item_value(2);
revdamp=s.get_item_value(3);
revwidth=s.get_item_value(4);
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"reverb "+x+" "+paxx+" "+y+" "+paxy+" "+reverid+" "+revdry+" "+revwet+" "+revsize+" "+revdamp+" "+revwidth);
mapper.close();
spawn_reverb_effect(x, paxx, y, paxy, reverid, revdry, revwet, revsize, revdamp, revwidth);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="rt")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this robot.");
string my=virtual_input_box("","Enter the y of this robot.");
string rng=virtual_input_box("","Enter the horizontal atack range of this robot.");
string rng2=virtual_input_box("","Enter the vertical atack range of this robot.");
string rng3=virtual_input_box("","Enter the horizontal seeing range of this robot.");
string rng4=virtual_input_box("","Enter the vertical seeing range of this robot.");
string hp=virtual_input_box("","Enter the health of this robot.");
string hc=virtual_input_box("","Enter the maximum lives of this robot.");
string dm=virtual_input_box("","Enter the maximum damage of this robot.");
string ft=virtual_input_box("","Enter the fire time of this robot.");
string sp=virtual_input_box("","Enter the speed of this robot.");
string lev=virtual_input_box("","Enter the level of this robot.");
string exper=virtual_input_box("","Enter the xp of this robot.");
if(x=="" and y=="" and robrange=="" and robrange2=="" and robrange3=="" and robrange4=="" and minhp=="" and card=="" and damage=="" and firetime=="" and speedtime=="" and lv=="" and xn=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
robrange=string_to_number(rng);
robrange2=string_to_number(rng2);
robrange3=string_to_number(rng3);
robrange4=string_to_number(rng4);
minhp=string_to_number(hp);
card=string_to_number(hc);
damage=string_to_number(dm);
firetime=string_to_number(ft);
speedtime=string_to_number(sp);
lv=string_to_number(lev);
xn=string_to_number(exper);
string[] robot=find_directories("data/sounds/"+soundpack+"/npc/normal/robots/*");
if(robot.length()==0)
{
dlg_snd("Error. There are no robots available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=robotsmenu();
if(res!="")
{
rotype=res;
}
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Should the robot attack you?",true);
if(mres2==0)
{
speak("canceled");
return;
}
if(mres2==1)
{
fb=true;
}
if(mres2==2)
{
fb=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Should the robot move?",true);
if(mres3==0)
{
speak("canceled");
return;
}
if(mres3==1)
{
mb=true;
}
if(mres3==2)
{
mb=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres4=m.run("Should the robot folow you up on other platforms?",true);
if(mres4==0)
{
speak("canceled");
return;
}
if(mres4==1)
{
mb2=true;
}
if(mres4==2)
{
mb2=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres5=m.run("Should the robot drop an item after killing it?",true);
if(mres5==0)
{
speak("canceled");
return;
}
if(mres5==1)
{
itms=true;
}
if(mres5==2)
{
itms=false;
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"robot "+x+" "+y+" "+robrange+" "+robrange2+" "+robrange3+" "+robrange4+" "+minhp+" "+card+" "+damage+" "+firetime+" "+speedtime+" "+lv+" "+xn+" "+rotype+" "+fb+" "+mb+" "+mb2+" "+itms);
mapper.close();
spawn_robot(x, y, robrange, robrange2, robrange3, robrange4, minhp, minhp, card, damage, firetime, speedtime, lv, xn, rotype, fb, mb, mb2, itms);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="rz")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this robot zone.");
string mx2=virtual_input_box("","Enter the maximum x of this robot zone.");
string my=virtual_input_box("","Enter the y of this robot zone.");
string sp=virtual_input_box("","Enter the spawn time of this robot zone.");
if(x=="" and paxx=="" and y=="" and speedtime=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
speedtime=string_to_number(sp);
string[] robot=find_directories("data/sounds/"+soundpack+"/npc/normal/robots/*");
if(robot.length()==0)
{
dlg_snd("Error. There are no robots available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=robotsmenu(true);
if(res!="")
{
rotype=res;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"robot_zone "+x+" "+paxx+" "+y+" "+speedtime+" "+rotype);
mapper.close();
spawn_robotzone(x, paxx, y, speedtime, rotype);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="sn")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this sign.");
string my=virtual_input_box("","Enter the y of this sign.");
//input.set_only_allowed_chars("none");
string text=virtual_input_box("","Enter the text of this sign.");
if(x=="" and y=="" and txt=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
txt=text;
string[] signs=find_directories("data/sounds/"+soundpack+"/objects/signs/*");
if(signs.length()==0)
{
dlg_snd("Error. There are no signs available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=signsmenu();
if(res!="")
{
signtyp=res;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Do you want this sign to be destroyable?",true);
if(mres==0)
{
speak("canceled");
return;
}
if(mres==1)
{
dmd=true;
}
if(mres==2)
{
dmd=false;
}
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Would you like the sign sound to be looped?",true);
if(mres==0)
{
speak("canceled");
return;
}
if(mres==1)
{
lpg=true;
}
if(mres==2)
{
lpg=false;
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"sign "+x+" "+y+" "+txt+" "+signtyp+" "+dmd+" "+lpg);
mapper.close();
spawn_sign(x, y, txt, signtyp, dmd, lpg);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="src")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this sound source.");
string mx2=virtual_input_box("","Enter the maximum x of this sound source.");
string my=virtual_input_box("","Enter the minimum y of this sound source.");
string my2=virtual_input_box("","Enter the maximum y of this sound source.");
if(x=="" and paxx=="" and y=="" and paxy=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
string[] source=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(source.length()==0)
{
dlg_snd("Error. There are no sources available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
//input.set_only_allowed_chars("1234567890-");
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"sound_source "+x+" "+paxx+" "+y+" "+paxy+" "+sorcetyp+" "+volume+" "+pitch);
mapper.close();
spawn_soundsource(x, paxx, y, paxy, sorcetyp, volume, pitch);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="sp")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this spike.");
string mx2=virtual_input_box("","Enter the maximum x of this spike.");
string my=virtual_input_box("","Enter the minimum y of this spike.");
string my2=virtual_input_box("","Enter the maximum y of this spike.");
string hp=virtual_input_box("","Enter the health of this spike.");
string dm=virtual_input_box("","Enter the maximum damage of this spike.");
string sp=virtual_input_box("","Enter the speed of this spike.");
if(x=="" and paxx=="" and y=="" and paxy=="" and minhp=="" and damage=="" and speedtime=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
minhp=string_to_number(hp);
damage=string_to_number(dm);
speedtime=string_to_number(sp);
string[] spike=find_directories("data/sounds/"+soundpack+"/objects/spikes/*");
if(spike.length()==0)
{
dlg_snd("Error. There are no spikes available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=spikesmenu();
if(res!="")
{
spiktype=res;
}
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Do you want this spike to be destroyable?",true);
if(mres==0)
{
speak("canceled");
return;
}
if(mres==1)
{
dmd=true;
}
if(mres==2)
{
dmd=false;
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"spike "+x+" "+paxx+" "+y+" "+paxy+" "+minhp+" "+damage+" "+speedtime+" "+spiktype+" "+dmd);
mapper.close();
spawn_spike(x, paxx, y, paxy, minhp, minhp, damage, speedtime, spiktype, dmd);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="st")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this spawnpoint.");
string my=virtual_input_box("","Enter the y of this spawnpoint.");
if(x=="" and y=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"spawnpoint "+x+" "+y);
mapper.close();
create_spawnpoint(x, y);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="sf")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this staircase.");
string mx2=virtual_input_box("","Enter the maximum x of this staircase.");
string my=virtual_input_box("","Enter the minimum y of this staircase.");
string my2=virtual_input_box("","Enter the maximum y of this staircase.");
if(x=="" and paxx=="" and y=="" and paxy=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"staircase "+x+" "+paxx+" "+y+" "+paxy+" "+tiletype+" "+volume+" "+pitch);
mapper.close();
spawn_staircase(x, paxx, y, paxy, tiletype, volume, pitch);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="tp")
{
//input.set_only_allowed_chars("1234567890-");
string sx=virtual_input_box("","Enter the starting x of this teleporter.");
string sy=virtual_input_box("","Enter the starting y of this teleporter.");
string nx=virtual_input_box("","Enter the finishing x of this teleporter.");
string ny=virtual_input_box("","Enter the finishing y of this teleporter.");
string rng=virtual_input_box("","Enter the horizontal seeing range of this teleporter.");
string rng2=virtual_input_box("","Enter the vertical seeing range of this teleporter.");
string sp=virtual_input_box("","Enter the speed of this teleporter.");
if(x=="" and y=="" and x2=="" and y2=="" and telrange=="" and telrange2=="" and speedtime=="")
return;
x=string_to_number(sx);
y=string_to_number(sy);
x2=string_to_number(nx);
y2=string_to_number(ny);
telrange=string_to_number(rng);
telrange2=string_to_number(rng2);
speedtime=string_to_number(sp);
string[] teleporter=find_directories("data/sounds/"+soundpack+"/objects/teleporters/*");
if(teleporter.length()==0)
{
dlg_snd("Error. There are no teleporters available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=teleportersmenu();
if(res!="")
{
teltype=res;
}
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres16=m.run("Should the teleporter move?",true);
if(mres16==0)
{
speak("canceled");
return;
}
if(mres16==1)
{
mb=true;
}
if(mres16==2)
{
mb=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres17=m.run("Should the teleporter folow you up on other platforms?",true);
if(mres17==0)
{
speak("canceled");
return;
}
if(mres17==1)
{
mb2=true;
}
if(mres17==2)
{
mb2=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres18=m.run("Should this teleporter be single-use only?",true);
if(mres18==0)
{
speak("canceled");
return;
}
if(mres18==1)
{
sse=true;
}
if(mres18==2)
{
sse=false;
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"teleporter "+x+" "+y+" "+x2+" "+y2+" "+telrange+" "+telrange2+" "+speedtime+" "+teltype+" "+mb+" "+mb2+" "+sse);
mapper.close();
spawn_teleporter(x, y, x2, y2, telrange, telrange2, speedtime, teltype, mb, mb2, sse);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="txt")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this text square.");
string my=virtual_input_box("","Enter the y of this text square.");
//input.set_only_allowed_chars("none");
string text=virtual_input_box("","Enter the text of this text square.");
if(x=="" and y=="" and txt=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
txt=text;
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"text_square "+x+" "+y+" "+txt);
mapper.close();
spawn_text_square(x, y, txt);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="tbm")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this time bomb.");
string my=virtual_input_box("","Enter the y of this time bomb.");
string dm=virtual_input_box("","Enter the maximum damage of this time bomb.");
string sp=virtual_input_box("","Enter the speed of this time bomb.");
if(x=="" and y=="" and damage=="" and speedtime=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
damage=string_to_number(dm);
speedtime=string_to_number(sp);
string[] timebomb=find_directories("data/sounds/"+soundpack+"/objects/time bombs/*");
if(timebomb.length()==0)
{
dlg_snd("Error. There are no time bombs available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=timbombsmenu();
if(res!="")
{
timbotype=res;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"timebomb "+x+" "+y+" "+damage+" "+speedtime+" "+timbotype);
mapper.close();
spawn_timebomb(x, y, damage, speedtime, timbotype);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="trc")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this timed source.");
string mx2=virtual_input_box("","Enter the maximum x of this timed source.");
string my=virtual_input_box("","Enter the minimum y of this timed source.");
string my2=virtual_input_box("","Enter the maximum y of this timed source.");
if(x=="" and paxx=="" and y=="" and paxy=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
string[] source=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
if(source.length()==0)
{
dlg_snd("Error. There are no sources available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=sorcesmenu();
if(res!="")
{
sorcetyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
//input.set_only_allowed_chars("1234567890-");
string sp=virtual_input_box("","Enter the speed of this timed source.");
if(speedtime=="")
return;
speedtime=string_to_number(sp);
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"timed_source "+x+" "+paxx+" "+y+" "+paxy+" "+sorcetyp+" "+volume+" "+pitch+" "+speedtime);
mapper.close();
spawn_timedsource(x, paxx, y, paxy, volume, pitch, speedtime, sorcetyp);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="tmc")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this timed music.");
string mx2=virtual_input_box("","Enter the maximum x of this timed music.");
string my=virtual_input_box("","Enter the minimum y of this timed music.");
string my2=virtual_input_box("","Enter the maximum y of this timed music.");
if(x=="" and paxx=="" and y=="" and paxy=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
string[] music=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
if(music.length()==0)
{
dlg_snd("Error. There are no musics available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=musicsmenu();
if(res!="")
{
mustyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
//input.set_only_allowed_chars("1234567890-");
string sp=virtual_input_box("","Enter the speed of this timed music.");
if(speedtime=="")
return;
speedtime=string_to_number(sp);
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"timed_music "+x+" "+paxx+" "+y+" "+paxy+" "+mustyp+" "+volume+" "+pitch+" "+speedtime);
mapper.close();
spawn_timedmusic(x, paxx, y, paxy, volume, pitch, speedtime, mustyp);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="tmt")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this timed text.");
string mx2=virtual_input_box("","Enter the maximum x of this timed text.");
string my=virtual_input_box("","Enter the minimum y of this timed text.");
string my2=virtual_input_box("","Enter the maximum y of this timed text.");
string sp=virtual_input_box("","Enter the speed of this timed text.");
//input.set_only_allowed_chars("none");
string text=virtual_input_box("","Enter the text of this timed text.");
if(x=="" and paxx=="" and y=="" and paxy=="" and speedtime=="" and txt=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
speedtime=string_to_number(sp);
txt=text;
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"timed_text "+x+" "+paxx+" "+y+" "+paxy+" "+speedtime+" "+txt);
mapper.close();
spawn_timedtext(x, paxx, y, paxy, speedtime, txt);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="trp")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this travelpoint.");
string mx2=virtual_input_box("","Enter the maximum x of this travelpoint.");
string my=virtual_input_box("","Enter the minimum y of this travelpoint.");
string my2=virtual_input_box("","Enter the maximum y of this travelpoint.");
//input.set_only_allowed_chars("none");
string mtext=virtual_input_box("","Enter the destenation map of this travelpoint.");
//input.set_only_allowed_chars("1234567890-");
string dx=virtual_input_box("","Enter the destenation x of this travelpoint.");
string dy=virtual_input_box("","Enter the destenation y of this travelpoint.");
//input.set_only_allowed_chars("none");
string dtext=virtual_input_box("","Enter the destenation text of this travelpoint.");
if(x=="" and paxx=="" and y=="" and paxy=="" and txt=="" and x2=="" and y2=="" and txt2=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
txt=mtext;
x2=string_to_number(dx);
y2=string_to_number(dy);
txt2=dtext;
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Would you like to automatically build the opposite side of this travelpoint?",true);
if(mres==0)
{
speak("canceled");
return;
}
if(mres==1)
{
string mtext2=virtual_input_box("","Enter the destenation map of this travelpoint to go back to.");
if(txt=="")
return;
txt=mtext2;
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"travelpoint "+x+" "+paxx+" "+y+" "+paxy+" "+txt+" "+y2+" "+x2+" "+txt2);
mapper.close();
spawn_travelpoint(x, paxx, y, paxy, txt, y2, x2, txt2);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(mres==2)
{
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"travelpoint "+x+" "+paxx+" "+y+" "+paxy+" "+txt+" "+x2+" "+y2+" "+txt2);
mapper.close();
spawn_travelpoint(x, paxx, y, paxy, txt, x2, y2, txt2);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="tt")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this turret.");
string my=virtual_input_box("","Enter the y of this turret.");
string hp=virtual_input_box("","Enter the health of this turret.");
string hc=virtual_input_box("","Enter the maximum lives of this turret.");
string dm=virtual_input_box("","Enter the maximum damage of this turret.");
string ft=virtual_input_box("","Enter the fire time of this turret.");
string lt=virtual_input_box("","Enter the launch time of this turret.");
string sp=virtual_input_box("","Enter the speed of this turret.");
string lev=virtual_input_box("","Enter the level of this turret.");
string exper=virtual_input_box("","Enter the xp of this turret.");
if(x=="" and y=="" and minhp=="" and card=="" and damage=="" and firetime=="" and launchtime=="" and speedtime=="" and lv=="" and xn=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
minhp=string_to_number(hp);
card=string_to_number(hc);
damage=string_to_number(dm);
firetime=string_to_number(ft);
launchtime=string_to_number(lt);
speedtime=string_to_number(sp);
lv=string_to_number(lev);
xn=string_to_number(exper);
string[] turret=find_directories("data/sounds/"+soundpack+"/npc/normal/turrets/*");
if(turret.length()==0)
{
dlg_snd("Error. There are no turrets available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=turretsmenu();
if(res!="")
{
tutype=res;
}
}
setupmenu();
m.add_item_tts("animal","an2");
m.add_item_tts("enemy","em2");
m.add_item_tts("projectile","pj2");
m.add_item_tts("robot","rt2");
m.add_item_tts("zombie","zb2");
int mres=m.run("What would you like this turret to spawn?",true);
string buildem2=m.get_item_name(mres);
if(mres==0)
{
speak("canceled");
return;
}
if(buildem2=="an2")
{
string[] animal=find_directories("data/sounds/"+soundpack+"/npc/normal/animals/*");
if(animal.length()==0)
{
dlg_snd("Error. There are no animals available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=animalsmenu();
if(res!="")
{
tutype2="animal";
tutype3=res;
}
}
}
if(buildem2=="em2")
{
string[] enemie=find_directories("data/sounds/"+soundpack+"/npc/normal/enemies/*");
if(enemie.length()==0)
{
dlg_snd("Error. There are no enemies available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=enemiesmenu();
if(res!="")
{
tutype2="enemie";
tutype3=res;
}
}
}
if(buildem2=="pj2")
{
string[] projectile=find_directories("data/sounds/"+soundpack+"/npc/normal/projectiles/*");
if(projectile.length()==0)
{
dlg_snd("Error. There are no projectiles available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=projesmenu();
if(res!="")
{
tutype2="projectile";
tutype3=res;
}
}
}
if(buildem2=="rt2")
{
string[] robot=find_directories("data/sounds/"+soundpack+"/npc/normal/robots/*");
if(robot.length()==0)
{
dlg_snd("Error. There are no robots available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=robotsmenu();
if(res!="")
{
tutype2="robot";
tutype3=res;
}
}
}
if(buildem2=="zb2")
{
string[] zombie=find_directories("data/sounds/"+soundpack+"/npc/normal/zombies/*");
if(zombie.length()==0)
{
dlg_snd("Error. There are no zombies available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=zombiesmenu();
if(res!="")
{
tutype2="zombie";
tutype3=res;
}
}
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres18=m.run("Should the turret attack you?",true);
if(mres18==0)
{
speak("canceled");
return;
}
if(mres18==1)
{
fb=true;
}
if(mres18==2)
{
fb=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres19=m.run("Should the turret move?",true);
if(mres19==0)
{
speak("canceled");
return;
}
if(mres19==1)
{
mb=true;
}
if(mres19==2)
{
mb=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres20=m.run("Should the turret folow you up on other platforms?",true);
if(mres20==0)
{
speak("canceled");
return;
}
if(mres20==1)
{
mb2=true;
}
if(mres20==2)
{
mb2=false;
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"turret "+x+" "+y+" "+minhp+" "+card+" "+damage+" "+firetime+" "+launchtime+" "+speedtime+" "+lv+" "+xn+" "+tutype+" "+tutype2+" "+tutype3+" "+fb+" "+mb+" "+mb2);
mapper.close();
spawn_turret(x, y, minhp, minhp, card, damage, firetime, launchtime, speedtime, lv, xn, tutype, tutype2, tutype3, fb, mb, mb2);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="vh")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this vehicle.");
string my=virtual_input_box("","Enter the y of this vehicle.");
string hp=virtual_input_box("","Enter the health of this vehicle.");
string dm=virtual_input_box("","Enter the maximum damage of this vehicle.");
if(x=="" and y=="" and minhp=="" and damage=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
minhp=string_to_number(hp);
damage=string_to_number(dm);
string[] vehicle=find_directories("data/sounds/"+soundpack+"/objects/vehicles/*");
if(vehicle.length()==0)
{
dlg_snd("Error. There are no vehicles available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=vehsmenu();
if(res!="")
{
vehtyp=res;
}
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres8=m.run("Should the vehicle attack enemies while moving?",true);
if(mres8==0)
{
speak("canceled");
return;
}
if(mres8==1)
{
fb=true;
}
if(mres8==2)
{
fb=false;
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"vehicle "+x+" "+y+" "+minhp+" "+damage+" "+vehtyp+" "+fb);
mapper.close();
spawn_vehicle(x, y, minhp, minhp, damage, vehtyp, fb);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="vp")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this vanishing platform.");
string mx2=virtual_input_box("","Enter the maximum x of this vanishing platform.");
string my=virtual_input_box("","Enter the y of this vanishing platform.");
if(x=="" and paxx=="" and y=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
string[] vplatform=find_directories("data/sounds/"+soundpack+"/objects/vanishing platforms/*");
if(vplatform.length()==0)
{
dlg_snd("Error. There are no vanishing platforms available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=vplatsmenu();
if(res!="")
{
vplattyp=res;
}
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres2= s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres2==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume2=s.get_item_value(0);
pitch2=s.get_item_value(1);
//input.set_only_allowed_chars("1234567890-");
string sp=virtual_input_box("","Enter the speed of this vanishing platform.");
if(speedtime=="")
return;
speedtime=string_to_number(sp);
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"vanishing_platform "+x+" "+paxx+" "+y+" "+tiletype+" "+volume+" "+pitch+" "+vplattyp+" "+volume2+" "+pitch2+" "+speedtime);
mapper.close();
spawn_vanishing_platform(x, paxx, y, y, tiletype, volume, pitch, vplattyp, volume2, pitch2, speedtime);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="wl")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this wall.");
string mx2=virtual_input_box("","Enter the maximum x of this wall.");
string my=virtual_input_box("","Enter the minimum y of this wall.");
string my2=virtual_input_box("","Enter the maximum y of this wall.");
string hp=virtual_input_box("","Enter the health of this wall.");
if(x=="" and paxx=="" and y=="" and paxy=="" and minhp=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
minhp=string_to_number(hp);
string[] border=find_directories("data/sounds/"+soundpack+"/objects/walls/*");
if(border.length()==0)
{
dlg_snd("Error. There are no walls available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=wallsmenu();
if(res!="")
{
walltype=res;
}
create_slider();
s.add_slider_item("volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("pitch", 0.0, 500.0, 100.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
resume_pools();
speak("Canceled");
return;
}
resume_pools();
volume=s.get_item_value(0);
pitch=s.get_item_value(1);
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Do you want this wall to be destroyable?",true);
if(mres==0)
{
speak("canceled");
return;
}
if(mres==1)
{
dmd=true;
}
if(mres==2)
{
dmd=false;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"wall "+x+" "+paxx+" "+y+" "+paxy+" "+minhp+" "+walltype+" "+volume+" "+pitch+" "+dmd);
mapper.close();
spawn_wall(x, paxx, y, paxy, minhp, minhp, walltype, volume, pitch, dmd);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="zb")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the x of this zombie.");
string my=virtual_input_box("","Enter the y of this zombie.");
string rng=virtual_input_box("","Enter the horizontal atack range of this zombie.");
string rng2=virtual_input_box("","Enter the vertical atack range of this zombie.");
string rng3=virtual_input_box("","Enter the horizontal seeing range of this zombie.");
string rng4=virtual_input_box("","Enter the vertical seeing range of this zombie.");
string hp=virtual_input_box("","Enter the health of this zombie.");
string hc=virtual_input_box("","Enter the maximum lives of this zombie.");
string dm=virtual_input_box("","Enter the maximum damage of this zombie.");
string ft=virtual_input_box("","Enter the fire time of this zombie.");
string sp=virtual_input_box("","Enter the speed of this zombie.");
string lev=virtual_input_box("","Enter the level of this zombie.");
string exper=virtual_input_box("","Enter the xp of this zombie.");
if(x=="" and y=="" and zombrange=="" and zombrange2=="" and zombrange3=="" and zombrange4=="" and minhp=="" and card=="" and damage=="" and firetime=="" and speedtime=="" and lv=="" and xn=="")
return;
x=string_to_number(mx);
y=string_to_number(my);
zombrange=string_to_number(rng);
zombrange2=string_to_number(rng2);
zombrange3=string_to_number(rng3);
zombrange4=string_to_number(rng4);
minhp=string_to_number(hp);
card=string_to_number(hc);
damage=string_to_number(dm);
firetime=string_to_number(ft);
speedtime=string_to_number(sp);
lv=string_to_number(lev);
xn=string_to_number(exper);
string[] zombie=find_directories("data/sounds/"+soundpack+"/npc/normal/zombies/*");
if(zombie.length()==0)
{
dlg_snd("Error. There are no zombies available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=zombiesmenu();
if(res!="")
{
zotype=res;
}
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres2=m.run("Should the zombie attack you?",true);
if(mres2==0)
{
speak("canceled");
return;
}
if(mres2==1)
{
fb=true;
}
if(mres2==2)
{
fb=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres3=m.run("Should the zombie move?",true);
if(mres3==0)
{
speak("canceled");
return;
}
if(mres3==1)
{
mb=true;
}
if(mres3==2)
{
mb=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres4=m.run("Should the zombie folow you up on other platforms?",true);
if(mres4==0)
{
speak("canceled");
return;
}
if(mres4==1)
{
mb2=true;
}
if(mres4==2)
{
mb2=false;
}
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres5=m.run("Should the zombie drop an item after killing it?",true);
if(mres5==0)
{
speak("canceled");
return;
}
if(mres5==1)
{
itms=true;
}
if(mres5==2)
{
itms=false;
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"zombie "+x+" "+y+" "+zombrange+" "+zombrange2+" "+zombrange3+" "+zombrange4+" "+minhp+" "+card+" "+damage+" "+firetime+" "+speedtime+" "+lv+" "+xn+" "+zotype+" "+fb+" "+mb+" "+mb2+" "+itms);
mapper.close();
spawn_zombie(x, y, zombrange, zombrange2, zombrange3, zombrange4, minhp, minhp, card, damage, firetime, speedtime, lv, xn, zotype, fb, mb, mb2, itms);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="zz")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this zombie zone.");
string mx2=virtual_input_box("","Enter the maximum x of this zombie zone.");
string my=virtual_input_box("","Enter the y of this zombie zone.");
string sp=virtual_input_box("","Enter the spawn time of this zombie zone.");
if(x=="" and paxx=="" and y=="" and speedtime=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
speedtime=string_to_number(sp);
string[] zombie=find_directories("data/sounds/"+soundpack+"/npc/normal/zombies/*");
if(zombie.length()==0)
{
dlg_snd("Error. There are no zombies available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
string res=zombiesmenu(true);
if(res!="")
{
zotype=res;
}
}
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"zombie_zone "+x+" "+paxx+" "+y+" "+speedtime+" "+zotype);
mapper.close();
spawn_zombiezone(x, paxx, y, speedtime, zotype);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="zn")
{
//input.set_only_allowed_chars("1234567890-");
string mx=virtual_input_box("","Enter the minimum x of this zone.");
string mx2=virtual_input_box("","Enter the maximum x of this zone.");
string my=virtual_input_box("","Enter the minimum y of this zone.");
string my2=virtual_input_box("","Enter the maximum y of this zone.");
//input.set_only_allowed_chars("none");
string text=virtual_input_box("","Enter the text of this zone.");
if(x=="" and paxx=="" and y=="" and paxy=="" and txt=="")
return;
x=string_to_number(mx);
paxx=string_to_number(mx2);
y=string_to_number(my);
paxy=string_to_number(my2);
txt=text;
resume_pools();
mapper.open("data/maps/"+mapname+".map","ab");
mapdata=mapper.read();
mapper.write("\r\n"+"zone "+x+" "+paxx+" "+y+" "+paxy+" "+txt);
mapper.close();
spawn_zone(x, paxx, y, paxy, txt);
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="addline")
{
mapper.open("data/maps/"+mapname+".map", "ab");
mapdata=mapper.read();
//input.set_only_allowed_chars("none");
string newline=virtual_input_box("","Enter the line you'd like to add.");
resume_pools();
mapper.write("\r\n"+newline);
mapper.close();
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(buildem=="remline")
{
mapper.open("data/maps/"+mapname+".map", "rb");
mapdata=mapper.read();
string[] lines=string_split(mapdata, "\r\n", true);
string[] filtered_lines;
uint[] original_lines;
filter_empty_lines(lines, filtered_lines, original_lines);
setupmenu();
for (uint i=0; i<filtered_lines.length(); i++)
{
m.add_item_tts(filtered_lines[i],filtered_lines[i], "", true);
}
int mres=m.run("Select a line to remove", true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mres>3 and mres<=filtered_lines.length())
{
uint original_index=original_lines[mres-1];
lines.remove_at(original_index);
string final;
for (uint i=0; i<lines.length(); i++)
{
if(i>0) final+="\r\n";
final+=lines[i];
}
resume_pools();
mapper.open("data/maps/"+mapname+".map", "wb");
mapdata=mapper.read();
mapper.write(final);
mapper.close();
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
}
if(buildem=="editline")
{
mapper.open("data/maps/" + mapname + ".map", "rb");
mapdata=mapper.read();
mapper.close();
string[] lines=string_split(mapdata, "\r\n", true);
string[] filtered_lines;
uint[] original_lines;
filter_empty_lines(lines, filtered_lines, original_lines);
setupmenu();
for (uint i=0; i<filtered_lines.length(); i++)
{
m.add_item_tts(filtered_lines[i],filtered_lines[i], "", true);
}
int mres=m.run("Select a line to edit", true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mres>0 and mres<=filtered_lines.length())
{
uint original_index=original_lines[mres-1];
//input.set_only_allowed_chars("none");
string final=virtual_input_box("","line editor", lines[original_index]);
lines[original_index]=final; 
string mapline;
for (uint i=0; i<lines.length(); i++)
{
if(i>0) mapline+="\r\n";
mapline += lines[i];
}
resume_pools();
mapper.open("data/maps/" + mapname + ".map", "wb");
mapper.write(mapline);
mapper.close();
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
}
if(buildem=="dcm")
{
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Are you sure you want to delete the current map? This action can't be undone.",true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mres==1)
{
if(file_exists("data/maps/"+mapname+".map")) file_delete("data/maps/"+mapname+".map");
if(fademode==0) fade_multi_pool(0);
if(fademode==1) fade_multi_pool(1);
speak("map deleted");
dlgplay("mapdelete.ogg",false);
me.x=0;
me.y=0;
clearmap();
destroymap();
mapmenu();
}
if(mres==2)
{
resume_pools();
speak("canceled");
return;
}
}
if(buildem=="clboard")
{
resume_pools();
mapper.open("data/maps/" + mapname + ".map", "rb");
mapdata=mapper.read();
clipboard_copy_text(mapdata);
speak("The data of "+mapname+" has been copied to your clipboard");
mapper.close();
}
if(buildem=="clboard2")
{
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Are you sure you want to overwrite all existing map data with what's on your clipboard?",true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mres==1)
{
resume_pools();
mapper.open("data/maps/" + mapname + ".map", "wb");
mapdata=mapper.read();
mapdata=clipboard_read_text();
if(mapdata=="") dlg_snd("Error. The map data you've pasted is invalid.");
else
{
resume_pools();
mapper.write(mapdata);
mapper.close();
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
}
if(mres==2)
{
resume_pools();
speak("canceled");
return;
}
}
if(buildem=="rcm")
{
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Are you sure you want to reload the current map?",true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mres==1)
{
resume_pools();
load_map(mapname);
speak("map reloaded");
}
if(mres==2)
{
resume_pools();
speak("canceled");
return;
}
}
}
void infomenu()
{
string[] animaltype=find_directories("data/sounds/"+soundpack+"/npc/normal/animals/*");
string[] bosstype=find_directories("data/sounds/"+soundpack+"/npc/boss/*");
string[] enemietype=find_directories("data/sounds/"+soundpack+"/npc/normal/enemies/*");
string[] projtype=find_directories("data/sounds/"+soundpack+"/npc/normal/projectiles/*");
string[] robottype=find_directories("data/sounds/"+soundpack+"/npc/normal/robots/*");
string[] spiketype=find_directories("data/sounds/"+soundpack+"/objects/spikes/*");
string[] turtype=find_directories("data/sounds/"+soundpack+"/npc/normal/turrets/*");
string[] vehtype=find_directories("data/sounds/"+soundpack+"/objects/vehicles/*");
string[] zombietype=find_directories("data/sounds/"+soundpack+"/npc/normal/zombies/*");
setupmenu();
m.add_item_tts("total objects "+(animals.length()+bosses.length()+bullets.length()+doors.length()+psdoors.length()+enemies.length()+projectiles.length()+robots.length()+spikes.length()+turrets.length()+vehicles.length()+walls.length()+zombies.length()));
for(uint i=0; i<animals.length(); i++)
{
m.add_item_tts(animals[i].animaltype+";"+"at;"+animals[i].amx+";"+animals[i].amy+";"+"HP"+round(animals[i].animalhealth/animals[i].animalmaxhealth*100,2)+"percent"+";"+"level"+animals[i].amlevel);
}
for(uint i=0; i<bosses.length(); i++)
{
m.add_item_tts(bosses[i].bosstype+";"+"at;"+bosses[i].bossx+";"+bosses[i].bossy+";"+"HP"+round(bosses[i].bosshealth/bosses[i].bossmaxhealth*100,2)+"percent"+";"+"level"+bosses[i].bosslevel);
}
for(uint i=0; i<bullets.length(); i++)
{
m.add_item_tts("bullet at;"+bullets[i].bullx+";"+bullets[i].bully);
}
for(uint i=0; i<doors.length(); i++)
{
m.add_item_tts("door at;"+doors[i].startx+";"+doors[i].starty+";"+"HP"+round(doors[i].doorhealth/doors[i].doormaxhealth*100,2)+"percent");
}
for(uint i=0; i<psdoors.length(); i++)
{
m.add_item_tts("locked door at;"+psdoors[i].startx+";"+psdoors[i].starty+";"+"HP"+round(psdoors[i].psdoorhealth/psdoors[i].psdoormaxhealth*100,2)+"percent");
}
for(uint i=0; i<enemies.length(); i++)
{
m.add_item_tts(enemies[i].enemietype+";"+"at;"+enemies[i].emx+";"+enemies[i].emy+";"+"HP"+round(enemies[i].enemiehealth/enemies[i].enemiemaxhealth*100,2)+"percent"+";"+"level"+enemies[i].emlevel);
}
for(uint i=0; i<projectiles.length(); i++)
{
m.add_item_tts(projectiles[i].projtype+";"+"at;"+projectiles[i].prox+";"+projectiles[i].proy+";"+"HP"+round(projectiles[i].projhealth/projectiles[i].projmaxhealth*100,2)+"percent"+";"+"level"+projectiles[i].projlevel);
}
for(uint i=0; i<robots.length(); i++)
{
m.add_item_tts(robots[i].robottype+";"+"at;"+robots[i].robx+";"+robots[i].roby+";"+"HP"+round(robots[i].robothealth/robots[i].robotmaxhealth*100,2)+"percent"+";"+"level"+robots[i].roblevel);
}
for(uint i=0; i<spikes.length(); i++)
{
m.add_item_tts(spikes[i].spiketype+";"+"at;"+spikes[i].minx+";"+spikes[i].miny+";"+"HP"+round(spikes[i].spikehealth/spikes[i].spikemaxhealth*100,2)+"percent");
}
for(uint i=0; i<turrets.length(); i++)
{
m.add_item_tts(turrets[i].turtype+";"+"at;"+turrets[i].turx+";"+turrets[i].tury+";"+"HP"+round(turrets[i].turhealth/turrets[i].turmaxhealth*100,2)+"percent"+";"+"level"+turrets[i].turlevel);
}
for(uint i=0; i<vehicles.length(); i++)
{
m.add_item_tts(vehicles[i].vehtype+";"+"at;"+vehicles[i].vehx+";"+vehicles[i].vehy+";"+"HP"+round(vehicles[i].vehhealth/vehicles[i].vehmaxhealth*100,2)+"percent");
}
for(uint i=0; i<walls.length(); i++)
{
m.add_item_tts(walls[i].wall+";"+"at;"+walls[i].minx+";"+walls[i].miny+";"+"HP"+round(walls[i].wallhealth/walls[i].wallmaxhealth*100,2)+"percent");
}
for(uint i=0; i<zombies.length(); i++)
{
m.add_item_tts(zombies[i].zombietype+";"+"at;"+zombies[i].zombx+";"+zombies[i].zomby+";"+"HP"+round(zombies[i].zombiehealth/zombies[i].zombiemaxhealth*100,2)+"percent"+";"+"level"+zombies[i].zomblevel);
}
int mres=m.run("Object info", true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
resume_pools();
}
void pointsmenu()
{
setupmenu();
m.add_item_tts("You're currently on level"+level+"with"+xp+"experience. Your next level requires"+(xprequiered-xp)+"experience.");
m.add_item_tts("You have"+points+"points available to spend.");
m.add_item_tts("upgrade maximum attack,"+"currently set to;"+attack, "umat");
m.add_item_tts("upgrade maximum defence,"+"currently set to;"+defence, "umd");
if(melee==false) m.add_item_tts("upgrade maximum ammo,"+"currently set to;"+maxammo, "uma");
m.add_item_tts("upgrade maximum health,"+"currently set to;"+maxhealth, "umh");
m.add_item_tts("upgrade maximum lives,"+"currently set to;"+lifecard, "umlf");
m.add_item_tts("upgrade maximum shield strength,"+"currently set to;"+maxshieldstrength, "umst");
m.add_item_tts("upgrade maximum shield defence,"+"currently set to;"+shielddefence, "umsd");
m.add_item_tts("upgrade maximum horizontal weapon range,"+"currently set to;"+weprange, "umra1");
m.add_item_tts("upgrade maximum vertical weapon range,"+"currently set to;"+weprange2, "umra2");
m.add_item_tts("back", "back");
int mres=m.run("Points menu. ",true);
string ptmem=m.get_item_name(mres);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(ptmem=="umat")
{
if(points<=0)
{
dlg_snd("Error, you don't have enough points to complete this action. Press enter to continue.");
resume_pools();
return;
}
else if(points>=1)
{
input.set_only_allowed_chars("1234567890-");
string att=input.input("How much attack would you like to buy?");
if(attack=="")
return;
int tempstat=string_to_number(att);
p.play_stationary("buy"+random(1,4)+".ogg",false);
resume_pools();
speak("Perchis completed.");
attack+=tempstat;
points-=tempstat;
update_char_attack("data/layouts/characters/"+chartype+"/"+chartype+".sif", attack);
}
}
if(ptmem=="umd")
{
if(points<=0)
{
dlg_snd("Error, you don't have enough points to complete this action. Press enter to continue.");
resume_pools();
return;
}
else if(points>=1)
{
input.set_only_allowed_chars("1234567890-");
string def=input.input("How much defence would you like to buy?");
if(defence=="")
return;
int tempstat=string_to_number(def);
p.play_stationary("buy"+random(1,4)+".ogg",false);
resume_pools();
speak("Perchis completed.");
defence+=tempstat;
points-=tempstat;
update_char_defence("data/layouts/characters/"+chartype+"/"+chartype+".sif", defence);
}
}
if(ptmem=="uma")
{
if(points<=0)
{
dlg_snd("Error, you don't have enough points to complete this action. Press enter to continue.");
resume_pools();
return;
}
else if(points>=1)
{
input.set_only_allowed_chars("1234567890-");
string amm=input.input("How much ammo would you like to buy?");
if(ammo=="")
return;
int tempstat=string_to_number(amm);
p.play_stationary("buy"+random(1,4)+".ogg",false);
resume_pools();
speak("Perchis completed.");
ammo+=tempstat;
points-=tempstat;
update_wep_ammo(weapontype, weapontype2, ammo);
}
}
if(ptmem=="umh")
{
if(points<=0)
{
dlg_snd("Error, you don't have enough points to complete this action. Press enter to continue.");
resume_pools();
return;
}
else if(points>=1)
{
input.set_only_allowed_chars("1234567890-");
string hp=input.input("How much health would you like to buy?");
if(health=="")
return;
int tempstat=string_to_number(hp);
p.play_stationary("buy"+random(1,4)+".ogg",false);
resume_pools();
speak("Perchis completed.");
maxhealth+=tempstat;
points-=tempstat;
update_char_maxhealth("data/layouts/characters/"+chartype+"/"+chartype+".sif", maxhealth);
}
}
if(ptmem=="umlf")
{
if(points<=0)
{
dlg_snd("Error, you don't have enough points to complete this action. Press enter to continue.");
resume_pools();
return;
}
else if(points>=1)
{
input.set_only_allowed_chars("1234567890-");
string lc=input.input("How many lives would you like to buy?");
if(lifecard=="")
return;
int tempstat=string_to_number(lc);
p.play_stationary("buy"+random(1,4)+".ogg",false);
resume_pools();
speak("Perchis completed.");
lifecard+=tempstat;
points-=tempstat;
update_char_lives("data/layouts/characters/"+chartype+"/"+chartype+".sif", lifecard);
}
}
if(ptmem=="umst")
{
if(points<=0)
{
dlg_snd("Error, you don't have enough points to complete this action. Press enter to continue.");
resume_pools();
return;
}
else if(points>=1)
{
input.set_only_allowed_chars("1234567890-");
string sg=input.input("How much shield strength would you like to buy?");
if(maxshieldstrength=="")
return;
int tempstat=string_to_number(sg);
p.play_stationary("buy"+random(1,4)+".ogg",false);
resume_pools();
speak("Perchis completed.");
maxshieldstrength+=tempstat;
points-=tempstat;
update_shield_max_strength("data/layouts/equipments/shields/"+shieldtype+"/"+shieldtype+".sif", maxshieldstrength);
}
}
if(ptmem=="umsd")
{
if(points<=0)
{
dlg_snd("Error, you don't have enough points to complete this action. Press enter to continue.");
resume_pools();
return;
}
else if(points>=1)
{
input.set_only_allowed_chars("1234567890-");
string sd=input.input("How much shield defence would you like to buy?");
if(shielddefence=="")
return;
int tempstat=string_to_number(sd);
p.play_stationary("buy"+random(1,4)+".ogg",false);
resume_pools();
speak("Perchis completed.");
shielddefence+=tempstat;
points-=tempstat;
update_shield_defence("data/layouts/equipments/shields/"+shieldtype+"/"+shieldtype+".sif", shielddefence);
}
}
if(ptmem=="umra1")
{
if(points<=0)
{
dlg_snd("Error, you don't have enough points to complete this action. Press enter to continue.");
resume_pools();
return;
}
else if(points>=1)
{
input.set_only_allowed_chars("1234567890-");
string rg1=input.input("How much horizontal weapon range would you like to buy?");
if(weprange=="")
return;
int tempstat=string_to_number(rg1);
p.play_stationary("buy"+random(1,4)+".ogg",false);
resume_pools();
speak("Perchis completed.");
weprange+=tempstat;
points-=tempstat;
update_wep_hl_range(weapontype, weapontype2, weprange);
}
}
if(ptmem=="umra2")
{
if(points<=0)
{
dlg_snd("Error, you don't have enough points to complete this action. Press enter to continue.");
resume_pools();
return;
}
else if(points>=2)
{
input.set_only_allowed_chars("1234567890-");
string rg2=input.input("How much vertical weapon range would you like to buy?");
if(weprange2=="")
return;
int tempstat=string_to_number(rg2);
p.play_stationary("buy"+random(2,4)+".ogg",false);
resume_pools();
speak("Perchis completed.");
weprange2+=tempstat;
points-=tempstat;
update_wep_vl_range(weapontype, weapontype2, weprange2);
}
}
if(ptmem=="back")
{
resume_pools();
return;
}
}
void itemsmenu()
{
setupmenu();
m.add_item_tts("drinks", "refreshments");
m.add_item_tts("foods", "appatiser");
m.add_item_tts("healers", "medical");
m.add_item_tts("back", "back");
int mres=m.run("Items menu",true);
string itsm=m.get_item_name(mres);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(itsm=="refreshments")
{
string res=drinkmenu();
if(res!="")
{
drinktype=res;
drawable=false;
itemcad=1;
useitems=true;
}
}
if(itsm=="appatiser")
{
string res=foodmenu();
if(res!="")
{
foodtype=res;
drawable=false;
itemcad=2;
useitems=true;
}
}
if(itsm=="medical")
{
string res=healermenu();
if(res!="")
{
healtype=res;
drawable=false;
itemcad=3;
useitems=true;
}
}
if(itsm=="back")
{
resume_pools();
return;
}
}
void weaponsmenu()
{
setupmenu();
m.add_item_tts("archery", "arro");
m.add_item_tts("artillery", "shoot");
m.add_item_tts("explosive", "bomb");
m.add_item_tts("melee", "swing");
m.add_item_tts("back", "back");
int mres=m.run("Weapons menu",true);
string wpsm=m.get_item_name(mres);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(wpsm=="arro")
{
string[] archers=find_directories("data/layouts/equipments/weapons/archery/*");
if(archers.length()==0)
{
dlg_snd("Error. There are no archery weapons available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
destroy_all_weapons();
string[] arclist=find_directories("data/layouts/equipments/weapons/archery/*");
for(uint i=0; i<arclist.length(); i++)
{
arcparse(arclist[i]);
}
string res=archersmenu();
if(res!="")
{
drawable=true;
melee=false;
useitems=false;
weapontype="archery";
weapontype2=res;
}
draw_weapon(weapontype, weapontype2, weprange, weprange2, wepdamage, wepspeed, maxammo, melee);
}
}
if(wpsm=="shoot")
{
string[] fighters=find_directories("data/layouts/equipments/weapons/artillery/*");
if(fighters.length()==0)
{
dlg_snd("Error. There are no artillery weapons available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
destroy_all_weapons();
string[] artlist=find_directories("data/layouts/equipments/weapons/artillery/*");
for(uint i=0; i<artlist.length(); i++)
{
artparse(artlist[i]);
}
string res=gunsmenu();
if(res!="")
{
drawable=true;
melee=false;
useitems=false;
weapontype="artillery";
weapontype2=res;
}
draw_weapon(weapontype, weapontype2, weprange, weprange2, wepdamage, wepspeed, maxammo, melee);
}
}
if(wpsm=="bomb")
{
string[] killers=find_directories("data/layouts/equipments/weapons/explosive/*");
if(killers.length()==0)
{
dlg_snd("Error. There are no explosive weapons available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
destroy_all_weapons();
string[] exolist=find_directories("data/layouts/equipments/weapons/explosive/*");
for(uint i=0; i<exolist.length(); i++)
{
exoparse(exolist[i]);
}
string res=explosesmenu();
if(res!="")
{
drawable=true;
melee=false;
useitems=false;
weapontype="explosive";
weapontype2=res;
}
draw_weapon(weapontype, weapontype2, weprange, weprange2, wepdamage, wepspeed, maxammo, melee);
}
}
if(wpsm=="swing")
{
string[] brawlers=find_directories("data/layouts/equipments/weapons/melee/*");
if(brawlers.length()==0)
{
dlg_snd("Error. There are no melee weapons available to view. Press enter to continue.");
resume_pools();
return;
}
else
{
destroy_all_weapons();
string[] melelist=find_directories("data/layouts/equipments/weapons/melee/*");
for(uint i=0; i<melelist.length(); i++)
{
meleparse(melelist[i]);
}
string res=meleesmenu();
if(res!="")
{
drawable=true;
melee=true;
useitems=false;
weapontype="melee";
weapontype2=res;
}
draw_weapon(weapontype, weapontype2, weprange, weprange2, wepdamage, wepspeed, maxammo, melee);
}
}
if(wpsm=="back")
{
resume_pools();
return;
}
}
void pausemenu()
{
p.play_stationary("pause.ogg",false);
if(autosave==1) writedata();
pause_game();
setupmenu();
m.add_item_tts("resume game", "rmg");
m.add_item_tts("view statistics", "vs");
int mres=m.run("Pause menu. ",true);
string psmem=m.get_item_name(mres);
if(mres==0)
{
p.play_stationary("resume.ogg",false);
if(autosave==1) writedata();
resume_game();
return;
}
if(psmem=="rmg")
{
p.play_stationary("resume.ogg",false);
if(autosave==1) writedata();
resume_game();
return;
}
if(psmem=="vs")
{
statsmenu();
}
}
void statsmenu()
{
setupmenu();
if(gamemode==1) m.add_item_tts("there are;"+animals.length()+"animals spawned on the map.");
if(gamemode==2) m.add_item_tts("there are;"+enemies.length()+"enemies spawned on the map.");
if(gamemode==3) m.add_item_tts("there are;"+projectiles.length()+"projectiles spawned on the map.");
if(gamemode==4) m.add_item_tts("there are;"+robots.length()+"robots spawned on the map.");
if(gamemode==5) m.add_item_tts("there are;"+zombies.length()+"zombies spawned on the map.");
if(gamemode==6) m.add_item_tts("there are;"+animals.length()+amtype+";"+"spawned on the map.");
if(gamemode==7) m.add_item_tts("there are;"+enemies.length()+emtype+";"+"spawned on the map.");
if(gamemode==8) m.add_item_tts("there are;"+projectiles.length()+potype+";"+"spawned on the map.");
if(gamemode==9) m.add_item_tts("there are;"+robots.length()+rotype+";"+"spawned on the map.");
if(gamemode==10) m.add_item_tts("there are;"+zombies.length()+zotype+";"+"spawned on the map.");
if(me.y>=1  and gmt(me.x,me.y)=="") m.add_item_tts("current location,"+me.x+",;"+me.y+","+"you're currently in the air,"+"facing;"+facing);
else if(me.y>=0 ) m.add_item_tts("current location,"+me.x+",;"+me.y+","+"you're walking on;"+gmt(me.x,me.y)+","+"facing;"+facing);
if(lifecard>=2) m.add_item_tts("health, "+round(health/maxhealth*100,2)+"percent, "+health+"of "+maxhealth+"hitpoints remaining, with "+lifecard+"lives left.");
else if(lifecard<=1) m.add_item_tts("health, "+round(health/maxhealth*100,2)+"percent, "+health+"of "+maxhealth+"hitpoints remaining, with "+lifecard+"life left.");
if(shieldon==1) m.add_item_tts("shield strength, "+round(shieldstrength/maxshieldstrength*100,2)+"percent, "+shieldstrength+"of "+maxshieldstrength+"hitpoints remaining.");
m.add_item_tts("Your maximum jump height is"+jumpheight+"squares");
m.add_item_tts("Your maximum x position is"+maxx+"tiles");
m.add_item_tts("Your maximum y position is"+maxy+"tiles");
m.add_item_tts("You're currently on level"+level+"with"+xp+"experience. Your next level requires"+(xprequiered-xp)+"experience.");
m.add_item_tts("You have"+points+"points available to spend.");
if(melee==false) m.add_item_tts("you have "+loadedammo+" out of "+maxammo+" ammo loaded, and "+ammo+" ammo in reserve.");
m.add_item_tts("You have killed a total of"+kills+"entidies.");
m.add_item_tts("You've been playing for a total of;"+timeelapsed.m()+"minutes,"+timeelapsed.s()+"seconds");
m.add_item_tts("back","back");
int mres=m.run("Statistics menu. There are "+(m.get_item_count()-1)+" entries available to view. Press enter to continue.",true);
string stmem=m.get_item_name(mres);
if(mres==0)
{
pausemenu();
}
if(stmem=="back")
{
pausemenu();
}
}
