moving_hazard@[]moving_hazards(0);
class moving_hazard
{
int hazard_id;
double minx,maxx,miny,maxy;
double currentx,currenty;
double sizex,sizey;
string hazardtype;
int move_mode;
int snap_mode;
double speed;
bool moving_forward;
double move_accumulator_x,move_accumulator_y;
moving_hazard(double left_x,double right_x,double bottom_y,double top_y,double x_length,double y_length,int direction,int snap,int speed_in,string ht)
{
minx=left_x;
maxx=right_x;
miny=bottom_y;
maxy=top_y;
sizex=x_length;
sizey=y_length;
currentx=minx;
currenty=miny;
move_mode=direction;
snap_mode=snap;
if (speed_in <= 0) speed_in = 1;
speed = 1.0 / speed_in;
hazardtype=ht;
moving_forward=true;
move_accumulator_x=0;
move_accumulator_y=0;
hazard_id = spawn_hazard(currentx, currentx + sizex, currenty, currenty + sizey, hazardtype, false);
}
void update_hazard_position()
{
update_hazard(hazard_id, currentx, currentx + sizex, currenty, currenty + sizey);
}
void move()
{
double dx=0,dy=0;
bool reached_endpoint =false;
switch(move_mode)
{
case 0:
case 4:
dx=(move_mode==0?1:-1)*(moving_forward?speed:-speed);
reached_endpoint =(moving_forward && currentx>=maxx)||(!moving_forward && currentx<=minx);
break;
case 1:
case 5:
dy=(move_mode==1?1:-1)*(moving_forward?speed:-speed);
reached_endpoint =(moving_forward && currenty>=maxy)||(!moving_forward && currenty<=miny);
break;
case 2:
case 6:
dx=(move_mode==2?1:-1)*(moving_forward?speed:-speed);
dy=(move_mode==2?1:-1)*(moving_forward?speed:-speed);
reached_endpoint =(moving_forward && (currentx>=maxx||currenty>=maxy))||(!moving_forward && (currentx<=minx||currenty<=miny));
break;
case 3:
case 7:
dx=(move_mode==3?-1:1)*(moving_forward?speed:-speed);
dy=(move_mode==3?1:-1)*(moving_forward?speed:-speed);
reached_endpoint =(moving_forward && (currentx<=minx||currenty>=maxy))||(!moving_forward && (currentx>=maxx||currenty<=miny));
break;
}
move_accumulator_x+=dx;
move_accumulator_y+=dy;
if(abs(move_accumulator_x)>=1)
{
int steps=int (move_accumulator_x);
currentx+=steps;
move_accumulator_x-=steps;
}
if(abs(move_accumulator_y)>=1)
{
int steps=int (move_accumulator_y);
currenty+=steps;
move_accumulator_y-=steps;
}
if(reached_endpoint )
{
switch(snap_mode)
{
case 0:
moving_forward=!moving_forward;
break;
case 1:
if(moving_forward)
{
currentx=minx;
currenty=miny;
}
break;
case 2:
if(!moving_forward)
{
currentx=maxx;
currenty=maxy;
}
break;
case 3:
if(moving_forward)
{
currentx=maxx;
currenty=maxy;
}
else
{
currentx=minx;
currenty=miny;
}
break;
}
}
currentx=clamp(currentx,minx,maxx);
currenty=clamp(currenty,miny,maxy);
update_hazard_position();
}
}
void mhazardcheck()
{
for(uint  i=0; i<moving_hazards.length(); i++)
{
moving_hazards[i].move();
}
}
void spawn_moving_hazard(double left_x,double right_x,double bottom_y,double top_y,double x_length,double y_length,int direction,int snap,int speed,string hazardtype)
{
moving_hazard mh1(left_x,right_x,bottom_y,top_y,x_length,y_length,direction,snap,speed,hazardtype);
moving_hazards.insert_last(mh1);
}
void destroy_all_moving_hazards()
{
for(uint  i=0; i<moving_hazards.length(); i++)
{
remove_hazard(moving_hazards[i].hazard_id);
}
moving_hazards.resize(0);
}

hazard@ [] hazards(0);
class hazard
{
bool ledgespawn;
int fallsound, hazardsound;
double minx, maxx, miny, maxy;
string hazardtype;
hazard(double mx,double mx2,double my,double my2,string ht,bool lgp)
{
minx=mx;
maxx=mx2;
miny=my;
maxy=my2;
hazardtype=ht;
ledgespawn=lgp;
string[] plattype=find_directories("sounds/"+soundpack+"/objects/platforms/*ledge*");
if(plattype.length() != 0 and ledgespawn == true)
{
string ledgetype=random_string(plattype);
spawn_platform(minx - 2, minx - 1, miny, miny, ledgetype, 0, 100);    
spawn_platform(maxx + 1, maxx + 2, miny, miny, ledgetype, 0, 100);
}
hazardsound=hazardpool.play_extended_2d(find_sound("sounds/"+soundpack+"/objects/hazards/"+hazardtype+"/*loop*"),me.x,me.y,minx,miny,0,0,0,0,true,0,0,painvolume,painpitch,false);
hazardpool.update_sound_2d(hazardsound,minx,miny);
hazardpool.update_sound_range_2d(hazardsound,0,maxx-minx,0,maxy-miny);
}
bool is_on_hazard()
{
return (me.x >= minx && me.x <= maxx && me.y >= miny && me.y <= maxy);
}
}
void hazardcheck()
{
for (uint i=0; i<hazards.length(); i++)
{
if(hazards[i].is_on_hazard())
{
if(hazards[i].is_on_hazard() and lifecard>=2)
{
if(charlifesound==1) hazardpool.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*life*"),false);
lifecard-=1;
health=maxhealth;
hearttime=maxhealth;
pbounce(5);
return;
}
if(lifecard<=1)
{
if (last_checkpoint !is null)
{
checkpool.play_stationary_extended(find_sound("sounds/" + soundpack + "/objects/checkpoints/" + last_checkpoint.checktype + "/*get*"), false, 0, 0, itemvolume, itempitch, false);
me.x = last_checkpoint.checkx;
me.y = last_checkpoint.checky;
health = maxhealth;
hearttime = maxhealth;
if(building==true) load_map(mapname, mapowner);
}
else
{
hazardpool.destroy_sound(hazards[i].hazardsound);
dlgplay(find_sound("sounds/"+soundpack+"/objects/hazards/"+hazards[i].hazardtype+"/*fall*"));
hazards.remove_at(i);
if(building==true) destroymap();
if(building==false) destroygame();
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("You have died. Would you like to try again?",true);
if(mres==0)
{
wait(500);
p.destroy_sound(refslot);
jumpable=false;
moveable=false;
sitting=true;
wepdef=0;
bonehealth=0;
broken_bones.delete_all();
clear_inv();
kombatlog.resize(0);
destroy_all_charas();
charparse();
}
if(mres==1)
{
wait(500);
p.destroy_sound(refslot);
jumpable=false;
moveable=false;
sitting=true;
wepdef=0;
clear_inv();
kombatlog.resize(0);
destroy_all_charas();
charparse();
}
if(mres==2)
{
p.destroy_sound(refslot);
jumpable=false;
moveable=false;
sitting=true;
wepdef=0;
clear_inv();
kombatlog.resize(0);
destroy_all_charas();
charparse();
me.x=0;
me.y=0;
if(building==true) clearmap();
if(building==true) destroymap();
if(building==true) mainmenu();
if(building==false) destroygame();
if(building==false) mainmenu();
}
}
}
}
}
}
int spawn_hazard(double minx, double maxx, double miny, double maxy, string hazardtype,bool ledgespawn)
{
    hazard hz1(minx,maxx,miny,maxy,hazardtype,ledgespawn);
    hazards.insert_last(hz1);
    return hazards.length() - 1;
}
void update_hazard(int id, double minx, double maxx, double miny, double maxy)
{
    if (id >= 0 && id < hazards.length())
    {
        hazards[id].minx = minx;
        hazards[id].maxx = maxx;
        hazards[id].miny = miny;
        hazards[id].maxy = maxy;
        double centerx = (minx + maxx) / 2;
        double centery = (miny + maxy) / 2;
        hazardpool.update_sound_2d(hazards[id].hazardsound, centerx, centery);
        hazardpool.update_sound_range_2d(hazards[id].hazardsound, 0, maxx - minx, 0, maxy - miny);
    }
}
void remove_hazard(int id)
{
    if (id >= 0 && id < hazards.length())
    {
        hazardpool.destroy_sound(hazards[id].hazardsound);
        hazards.remove_at(id);
    }
}
void destroy_all_hazards()
{
for(uint i=0; i<hazards.length(); i++)
{
hazardpool.destroy_sound(hazards[i].hazardsound);
}
hazards.resize(0);
}
