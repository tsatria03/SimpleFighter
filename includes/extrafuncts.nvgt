bool alt_is_down()
{
if(key_down(KEY_LMENU) or key_down(KEY_RMENU))
{
return true;
}
return false;
}
bool control_is_down()
{
if(key_down(KEY_LCONTROL) or key_down(KEY_RCONTROL))
{
return true;
}
return false;
}
bool shift_is_down()
{
if(key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
return true;
}
return false;
}

bool int_to_bool(int i)
{
return i==1? true:false;
}
int bool_to_int(bool b)
{
return b? 1:0;
}

bool directory_empty(const string&in dir)
{
if (!directory_exists(dir))
{
return false;
}
string[] files=find_files(dir+"/*");
string[] folders=find_directories(dir+"/*");
return files.length()==0 and folders.length()==0;
}
bool validate_map_data(string[] lines)
{
bool has_name = false, has_contributor = false, has_minx = false, has_maxx = false, has_miny = false, has_maxy = false;
for (uint i = 0; i < lines.length(); i++)
{
string[] parts = string_split(lines[i], " ", true);
if (parts.length() < 2) continue;
string key = string_trim_sides(parts[0]);
if (key == "name") has_name = true;
if (key == "contributor") has_contributor = true;
if (key == "minx") has_minx = true;
if (key == "maxx") has_maxx = true;
if (key == "miny") has_miny = true;
if (key == "maxy") has_maxy = true;
}
return has_name && has_contributor && has_minx && has_maxx && has_miny && has_maxy;
}

int string_to_int(string str)
{
    int result = 0;
    bool isNegative = false;
    if (str.length() == 0)
        return 0;
    if (str.substr(0, 1) == "-")
    {
        isNegative = true;
        str = str.substr(1);
    }
    for (uint i = 0; i < str.length(); i++)
    {
        string digitStr = str.substr(i, 1);
        int digit = 0;
        if (digitStr == "0") digit = 0;
        else if (digitStr == "1") digit = 1;
        else if (digitStr == "2") digit = 2;
        else if (digitStr == "3") digit = 3;
        else if (digitStr == "4") digit = 4;
        else if (digitStr == "5") digit = 5;
        else if (digitStr == "6") digit = 6;
        else if (digitStr == "7") digit = 7;
        else if (digitStr == "8") digit = 8;
        else if (digitStr == "9") digit = 9;
        else return 0;
        result = result * 10 + digit;
    }
    return isNegative ? -result : result;
}

string find_sound(string soundname)
{
string[] snd=find_files(soundname);
if (snd.length()>0)
{
string[] a_path=string_split(soundname,"/",true);
string path=string_replace(soundname,a_path[a_path.length()-1],"",true);
return path+snd[random(0,snd.length()-1)];
}
else
return "";
}

    string[] clean_lines(string filepath)
{
        file f;
        string[] result;
        if (f.open(filepath, "r"))
{
            string raw = f.read();
            string[] lines = string_split(raw, "\r\n", true);
            for (uint i = 0; i < lines.length(); i++)
{
                string line = string_trim_sides(lines[i]);
                if (line != "") result.insert_last(line);
            }
            f.close();
        }
        return result;
    }
string random_string(string[] array)
{
string retval=array[random(0,array.length()-1)];
return retval;
}

string strip_extension(string filename)
{
    int dotIndex = filename.rfind(".");
    if (dotIndex != -1)
    {
        return filename.substr(0, dotIndex);
    }
    return filename;
}
string strip_directory(string path)
{
    int lastSlash = path.rfind("/");
    if (lastSlash == -1)
        lastSlash = path.rfind("\\");
    if (lastSlash != -1)
        return path.substr(lastSlash + 1);
    return path;
}

double clamp(double value, double min, double max)
{
value=value<min? min:value;
value=value>max? max:value;
return value;
}

double min(double a, double b)
{
return (a < b) ? a : b;
}
double max(double a, double b)
{
return (a > b) ? a : b;
}
double buy_item(double item, double base_cost, double cost_multiplier)
{
return 1+(item*0.1)*base_cost*cost_multiplier;
}

double convert_to_pan(double length, double index, double range1, double range2)
{
try
{
double range = range2 - range1;
double percent = index / (length - 1);
double value = range1 + range * percent;
return value;
}
catch
{
return 0;
}
}
double convert_to_volume(double length,double index,double min_volume=-100,double max_volume=0)
{
try
{
double range=max_volume-min_volume;
double percent=index/(length-1);
double value=min_volume+range*percent;
return value;
}
catch
{
return 0;
}
}
double convert_to_pitch(double length,double index,double min_pitch=0,double max_pitch=200)
{
try
{
double range=max_pitch-min_pitch;
double percent=index/(length-1);
double value=min_pitch+range*percent;
return value;
}
catch
{
return 100;
}
}

uint8 active_sr()
{
uint8 ret=0;
for(uint8 i=0; i<=4; i++)
{
if(screen_reader_is_running(i))
{
ret=i;
break;
}
}
return ret;
}

uint64 get_directory_size(const string&in dir)
{
uint64 result=0;
string[]@ subdirs = find_directories(dir + "/*");
for (uint i = 0; i < subdirs.length(); i++)
{
result += get_directory_size(dir + "/" + subdirs[i]);
}
string[]@ files = find_files(dir + "/*");
for (uint i = 0; i < files.length(); i++)
{
result += file_get_size(dir + "/" + files[i]);
}
return result;
}

string convert_to_currency(double number, string currency_symbol)
{
if (number < 0) return "";
uint dollars = number / 100;
uint cents = number % 100;
string cents_str = "" + cents;
if (string_len (cents_str) == 1) cents_str = "0" + cents_str;
return currency_symbol + dollars + "." + cents_str;
}

string measure_file_size(int64 bytes)
{
if(bytes<1024)
{
return bytes+"bytes";
}
else if(bytes<1024*1024)
{
return round(double(bytes)/1024,2)+"KB";
}
else if(bytes<1024*1024*1024)
{
return round(double(bytes)/(1024*1024),2)+"MB";
}
else 
{
return round(double(bytes)/(1024*1024*1024),2)+"GB";
}
}
string measure_time_units(int64 milliseconds)
{
int64 seconds = milliseconds / 1000;
if(seconds < 1)
{
return milliseconds + " ms";
}
else if(seconds < 60)
{
int whole_seconds = int(seconds);
int ms = int(milliseconds % 1000);
return whole_seconds + " seconds, " + ms + " ms";
}
else if(seconds < 3600)
{
int minutes = int(seconds / 60);
int remaining_seconds = int(seconds % 60);
int ms = int(milliseconds % 1000);
return minutes + " minutes, " + remaining_seconds + " seconds, " + ms + " ms";
}
else
{
int hours = int(seconds / 3600);
int minutes = int((seconds % 3600) / 60);
int remaining_seconds = int(seconds % 60);
int ms = int(milliseconds % 1000);
return hours + " hours, " + minutes + " minutes, " + remaining_seconds + " seconds, " + ms + " ms";
}
}

string string_trim_sides(const string& in str)
{
string result=str;
while (result.length()>0 && (result[0]==" "||result[0]=="\t"||result[0]=="\r"||result[0]=="\n"))
{
result=string_trim_left(result,1);
}
while (result.length()>0 && (result[result.length()-1]==" "||result[result.length()-1]=="\t"||result[result.length()-1]=="\r"||result[result.length()-1]=="\n"))
{
result=string_trim_right(result,1);
}
return result;
}

bool string_starts_with(const string& in str, const string& in start)
{
if (str.length()>=start.length())
{
return (str.substr(0, start.length()) == start);
}
return false;
}
bool string_ends_with(const string& in str,const string& in ending)
{
if (str.length()>=ending.length())
{
return (str.substr(str.length()-ending.length())==ending);
}
return false;
}

bool string_to_bool(string str)
{
return str.trim_whitespace().lower()=="true"? true:false;
}
float stn(string str)
{
if (string_contains(str,"random",1)>-1)
{
string a=string_replace(str,"random(","",true);
a=string_replace(a,")","",true);
string[] b=string_split(a,",",true);
double c=0;
c=random(string_to_number(b[0]),string_to_number(b[1]));
return c;
}
else
return string_to_number(str);
}

string gmt(double x, double y)
{
string mt;
for(uint i=0; i<platforms.length(); i++)
{
if(platforms[i].minx<=x and platforms[i].maxx>=x and platforms[i].miny<=y and platforms[i].maxy>=y)
{
mt=platforms[i].tile;
tilevolume=platforms[i].volume;
tilepitch=platforms[i].pitch;
}
}
for(uint i=0; i<walls.length(); i++)
{
if(walls[i].minx<=x and walls[i].maxx>=x and walls[i].miny<=y and walls[i].maxy>=y)
{
wallvolume=walls[i].volume;
wallpitch=walls[i].pitch;
}
}
return mt;
}
string gct(double x, double y)
{
string ct;
for(uint i=0; i<platforms.length(); i++)
{
if(platforms[i].minx<=x and platforms[i].maxx>=x and platforms[i].miny<=y and platforms[i].maxy>=y)
{
ct=platforms[i].tile;
tilevolume=platforms[i].volume;
tilepitch=platforms[i].pitch;
}
}
for(uint i=0; i<walls.length(); i++)
{
if(walls[i].minx<=x and walls[i].maxx>=x and walls[i].miny<=y and walls[i].maxy>=y)
{
wallvolume=walls[i].volume;
wallpitch=walls[i].pitch;
}
}
return ct;
}

string[] delinear(string a)
{
return string_split(a, "\r\n", false);
}
string linear(string[] a)
{
string final;
for(uint i=0; i<a.length(); i++)
{
final+=(a[i]+"\r\n");
}
return final;
}

string join_string_array(string[] arr, uint start, uint end)
{
string result = "";
for(uint i = start; i < end; i++)
{
if(i>start) result+=" ";
result+=arr[i];
}
return result;
}
string string_join(string[]@ arr, string delimiter=" ", int start_index = 0)
{
	if(arr.length()<=0 or delimiter.is_empty()) return "";
	string val;
	for(int i=start_index; i<arr.length()-1; i++)
	{
		val += arr[i]+delimiter;
	}
	val += arr[arr.length()-1];
	return val;
}

string get_key_echo_description(int mode)
{
if (mode==textflag_none)
return "echo off";
else if (mode==textflag_characters)
return "echo characters";
else if (mode==textflag_words)
return "echo words";
else if (mode==textflag_characters_words)
return "echo both characters and words";
return "";
}

void key_echocheck(audio_form@ form)
{
if (key_pressed(KEY_F2))
{
echomode++;
if (echomode>3) echomode=0;
writepreffs();
form.set_default_keyboard_echo(echomode);
speak(get_key_echo_description(echomode));
}
}
void filter_empty_lines(string[] lines, string[]& filtered_lines, uint[]& original_lines)
{
filtered_lines.resize(0);
original_lines.resize(0);
for (uint i=0; i<lines.length(); i++)
{
if (lines[i].length()>0)
{
filtered_lines.insert_last(lines[i]);
original_lines.insert_last(i);
}
}
}

void sort_naturally(array<string>& inout arr)
{
arr.sort(natural_number_sort);
}
void stun_target(string entity, string id, int st)
{
stundir=st;
if(entity=="me")
{
stuntimer.restart();
stunned=true;
cammable=false;
fireable=false;
jumpable=false;
moveable=false;
speedable=false;
spiable=false;
sittable=false;
turnable=false;
telable=false;
wepref=false;
}
else if(entity=="animal")
{
for(uint i=0; i<animals.length(); i++)
{
if(animals[i].animaltype==id)
{
stuntimer.restart();
stunned=true;
animals[i].fireable=false;
animals[i].moveable=false;
animals[i].moveable2=false;
}
}
}
else if(entity=="human")
{
for(uint i=0; i<humans.length(); i++)
{
if(humans[i].humantype==id)
{
stuntimer.restart();
stunned=true;
humans[i].fireable=false;
humans[i].moveable=false;
humans[i].moveable2=false;
}
}
}
else if(entity=="boss")
{
for(uint i=0; i<bosses.length(); i++)
{
if(bosses[i].bosstype==id)
{
stuntimer.restart();
stunned=true;
bosses[i].fireable=false;
bosses[i].moveable=false;
bosses[i].moveable2=false;
bosses[i].regenhp=false;
bosses[i].telleble=false;
bosses[i].telleble2=false;
}
}
}
else if(entity=="projectile")
{
for(uint i=0; i<projectiles.length(); i++)
{
if(projectiles[i].projtype==id)
{
stuntimer.restart();
stunned=true;
projectiles[i].fireable=false;
projectiles[i].moveable=false;
}
}
}
else if(entity=="robot")
{
for(uint i=0; i<robots.length(); i++)
{
if(robots[i].robottype==id)
{
stuntimer.restart();
stunned=true;
robots[i].fireable=false;
robots[i].moveable=false;
robots[i].moveable2=false;
}
}
}
else if(entity=="turret")
{
for(uint i=0; i<turrets.length(); i++)
{
if(turrets[i].turtype==id)
{
stuntimer.restart();
stunned=true;
turrets[i].fireable=false;
turrets[i].moveable=false;
turrets[i].moveable2=false;
}
}
}
else if(entity=="zombie")
{
for(uint i=0; i<zombies.length(); i++)
{
if(zombies[i].zombietype==id)
{
stuntimer.restart();
stunned=true;
zombies[i].fireable=false;
zombies[i].moveable=false;
zombies[i].moveable2=false;
}
}
}
}
void stuncheck()
{
if(stunned==true && stuntimer.elapsed>=stundir)
{
stunned = false;
cammable = true;
fireable = true;
jumpable = true;
moveable = true;
speedable = true;
spiable = true;
sittable = true;
turnable = true;
telable = true;
wepref=true;
}
for(uint i=0; i<animals.length(); i++)
{
if(stunned==true && stuntimer.elapsed>=stundir)
{
stunned=false;
animals[i].fireable=true;
animals[i].moveable=true;
animals[i].moveable2=true;
}
}
for(uint i=0; i<humans.length(); i++)
{
if(stunned==true && stuntimer.elapsed>=stundir)
{
stunned=false;
humans[i].fireable=true;
humans[i].moveable=true;
humans[i].moveable2=true;
}
}
for(uint i=0; i<bosses.length(); i++)
{
if(stunned==true && stuntimer.elapsed>=stundir)
{
stunned=false;
bosses[i].fireable=true;
bosses[i].moveable=true;
bosses[i].moveable2=true;
bosses[i].regenhp=true;
bosses[i].telleble=true;
bosses[i].telleble2=true;
}
}
for(uint i=0; i<projectiles.length(); i++)
{
if(stunned==true && stuntimer.elapsed>=stundir)
{
stunned=false;
projectiles[i].fireable=true;
projectiles[i].moveable=true;
}
}
for(uint i=0; i<robots.length(); i++)
{
if(stunned==true && stuntimer.elapsed>=stundir)
{
stunned=false;
robots[i].fireable=true;
robots[i].moveable=true;
robots[i].moveable2=true;
}
}
for(uint i=0; i<turrets.length(); i++)
{
if(stunned==true && stuntimer.elapsed>=stundir)
{
stunned=false;
turrets[i].fireable=true;
turrets[i].moveable=true;
turrets[i].moveable2=true;
}
}
for(uint i=0; i<zombies.length(); i++)
{
if(stunned==true && stuntimer.elapsed>=stundir)
{
stunned=false;
zombies[i].fireable=true;
zombies[i].moveable=true;
zombies[i].moveable2=true;
}
}
}

bool string_file_encrypt(string input_file, string output_file, string key)
{
bool success;
file f;
success=f.open(input_file, "rb");
if(!success) return false;
string text=f.read();
text=string_encrypt(text, key);
if(text=="") return false;
success=f.open(output_file, "wb");
if(!success) return false;
f.write(text);
success=f.close();
return success;
}
bool string_file_decrypt(const string& input_file, const string& output_file, const string& encryption_key)
{
file input;
if (!input.open(input_file, "rb"))
return false;
string encrypted_content = input.read();
input.close();
string decrypted_content = string_decrypt(encrypted_content, encryption_key);
file output;
if (!output.open(output_file, "wb"))
return false;
output.write(decrypted_content);
output.close();
return true;
}

string file_decrypt(const string& encrypted_content, const string& encryption_key)
{
return string_decrypt(encrypted_content, encryption_key);
}

int get_distance(int a, int b)
{
return absolute(a - b);
}
double percent(double n1, double n2)
{
return (n1/n2)*100;
}
double average(double[] vals, int roundval=2)
{
double res=0;
for(uint i=0; i<vals.length(); i++)
{
res=res+vals[i];
}
res=res/vals.length();
res=round(res,roundval);
return res;
}

string get_new_tile(string tile,int direction)
{
string[] plats=find_directories("sounds/objects/platforms/*");
int platindex=-1;
for (uint i=0; i<plats.length(); i++)
{
if(tile==plats[i])
{
platindex=i;
break;
}
}
if(platindex==-1)
return tile;
if (direction==1)
{
if(platindex>-1)
platindex--;
if(platindex<0)
platindex=plats.length()-1;
}
else if (direction==2)
{
if(platindex>-1)
platindex++;
if(platindex>=plats.length())
platindex=0;
}
else if (direction==3)
{
if(platindex>-1)
platindex=random(0,plats.length()-1);
}
return plats[platindex];
}
string get_new_wall(string wall,int direction)
{
string[] borders=find_directories("sounds/objects/walls/*");
int wallindex=-1;
for (uint i=0; i<borders.length(); i++)
{
if(wall==borders[i])
{
wallindex=i;
break;
}
}
if(wallindex==-1)
return wall;
if (direction==1)
{
if(wallindex>-1)
wallindex--;
if(wallindex<0)
wallindex=borders.length()-1;
}
else if (direction==2)
{
if(wallindex>-1)
wallindex++;
if(wallindex>=borders.length())
wallindex=0;
}
else if (direction==3)
{
if(wallindex>-1)
wallindex=random(0,borders.length()-1);
}
return borders[wallindex];
}

string string2file(string thing)
{
thing=string_replace(thing,"\\","/",true);
thing=string_replace(thing,"/"," ",true);
return thing;
}
string string_join(const string[]& in arr, const string& in delimiter)
{
string result="";
for (uint i=0; i<arr.length(); i++)
{
if(i>0)
result += delimiter;
result += arr[i];
}
return result;
}

string script_get_path()
{
string scriptpath;
if(SCRIPT_COMPILED==false)
{
scriptpath=SCRIPT_CURRENT_FILE;
}
else
{
scriptpath=SCRIPT_EXECUTABLE;
}
return scriptpath;
}
string script_get_folder()
{
string path=script_get_path();
string[] spl=string_split(path, "\\", true);
spl.resize(spl.length()-1);
string folder;
for(uint i=0; i<spl.length(); i++)
{
folder+=spl[i];
if(i<spl.length()-1) folder+="\\";
}
return folder;
}

class kh
{
bool already_installed;
void install()
{
if (screen_reader_is_running(1) and !already_installed)
{
install_keyhook();
already_installed=true;
}
}
void uninstall()
{
if (screen_reader_is_running(1) and !already_installed)
{
uninstall_keyhook();
already_installed=false;
}
}
}

class key_hold
{
bool status;
uint key_flag=0;
int key_code;
int repeat_time;
int setting_1;
int setting_2;
timer key_timer;
key_hold(int _key_code, int _setting_1, int _setting_2)
{
key_code=_key_code;
setting_1=_setting_1;
setting_2=_setting_2;
repeat_time=setting_1;
}
bool pressing()
{
status=key_down(key_code);
if(status==false)
{
repeat_time=0;
key_timer.restart();
key_flag=0;
return false;
}
if(key_timer.elapsed>=repeat_time)
{
switch(key_flag)
{
case 0:
key_flag=1;
repeat_time=setting_1;
key_timer.restart();
break;
case 1:
repeat_time=setting_2;
key_timer.restart();
break;
}
return true;
}
return false;
}
}

buggreport@[] reports(0); // Initialize an empty array for bug reports
class buggreport {
    string name;
    string subject;
    string content;
    string id;
    bool closed;

    buggreport(string n, string s, string c) {
        name = n;
        subject = s;
        content = c;
        id = generate_token(4); // Generate a 4-character token
        closed = false; // Initialize the closed status
    }

    void send_report() {
        // Submits this report to a server to be viewed by admins
        // Placeholder for server submission logic
    }
}

void report_bug(string n, string s, string c) {
    buggreport new_report(n, s, c); // Create a new bug report
    reports.insert_last(@new_report); // Add the report to the array

    // Alert with report details
    alert("New Report!", "You received a new report from " + new_report.name + 
          ", with ID " + new_report.id + 
          ". Subject: " + new_report.subject + 
          ". Content: " + new_report.content);
}

class parsed_data
{
string[] peramitors;
string[] values;
string source;
string decryption_key;
parsed_data(string text,string decryption_key,bool filename=true)
{
source=text;
this.decryption_key=decryption_key;
if(filename)
{
parse_data_from_file();
}
else
{
parse_data_from_string();
}
}
void parse_data_from_file()
{
file f;
bool success=f.open(source,"rb");
if(!success)
return;
else
{
string d;
if(decryption_key!="")
d=string_decrypt(f.read(),decryption_key);
else
d=f.read();
string[] parseddata=string_split(d,"\r\n",true);
for(int i=0; i<parseddata.length(); i++)
{
string[] parseddata2=string_split(parseddata[i],"=",true);
if(parseddata2.length()!=2)
continue;
else
{
peramitors.insert_last(parseddata2[0]);
values.insert_last(parseddata2[1]);
}
}
}
}
void parse_data_from_string()
{
string d;
if(decryption_key!="")
d=string_decrypt(source,decryption_key);
else
d=source;
string[] parseddata=string_split(d,"\r\n",true);
for(int i=0; i<parseddata.length(); i++)
{
string[] parseddata2=string_split(parseddata[i],"=",true);
if(parseddata2.length()!=2)
continue;
else
{
peramitors.insert_last(parseddata2[0]);
values.insert_last(parseddata2[1]);
}
}
}
string get_value(string peramitor)
{
if(peramitors.find(peramitor)!=-1)
return values[peramitors.find(peramitor)];
else
return "";
}
}

preload@[] preloads(0);
class preload
{
 string file_path;
 sound preloaded;
 preload(const string&in path)
{
  file_path = path;
  preloaded.load(file_path, pk);
  if(!preloaded.active)
{
   alert("Preload Error", "Could not load "+file_path+".");
   return;
  }
 }
}
void preload_file(const string&in file_path)
{
 preloads.insert_last(preload(file_path));
}
void preload_directory(const string&in dir)
{
 string[] dir_list = pk.list_files();
 for(uint i = 0; i < dir_list.length(); i++)
{
  if(dir_list[i].starts_with(dir))
{
preloads.insert_last(preload(dir_list[i]));
}
}
}
