animal@[]animals(0);
class animal
{
bool dropitem, fireable, moveable, moveable2, spotted;
int amsound, defsound, hurtsound, spawnsound, stepsound, tilesound, wepsound;
int animalcard;
int anihealth;
double amlevel;
double amxp;
double animalhealth;
double animalmaxhealth;
int amx;
int amy;
int anirange;
int anirange2;
int anirange3;
int anirange4;
int damage;
int animaltime;
int firetime;
string animaltype;
timer animaltimer, firetimer;
animal(int ax,int ay,int anrange,int anrange2,int anrange3,int anrange4,double hp,double maxhp,int ac,int dm,int ft,int sp,double amlv,double axp,string at,bool amf,bool amt,bool amt2,bool dpm)
{
this.anihealth=hp;
amx=ax;
amy=ay;
anirange=anrange;
anirange2=anrange2;
anirange3=anrange3;
anirange4=anrange4;
animalhealth=hp;
animalmaxhealth=maxhp;
animalcard=ac;
damage=dm;
firetime=ft;
animaltime=sp;
amlevel=amlv;
amxp=axp;
animaltype=at;
fireable=amf;
moveable=amt;
moveable2=amt2;
dropitem=dpm;
spawnsound=animalpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/animals/"+animaltype+"/*spawn*"),me.x,me.y,amx,amy,0,0,0,0,false,0,0,painvolume,painpitch,false);
amsound=animalpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/animals/"+animaltype+"/*taunt*"),me.x,me.y,amx,amy,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void animalloop()
{
for(uint i=0; i<animals.length(); i++)
{
if(animals[i].animaltimer.elapsed>=animals[i].animaltime)
{
bool within_horizontal_range= absolute(me.x - animals[i].amx) <= animals[i].anirange3;
bool within_vertical_range= absolute(me.y - animals[i].amy) <= animals[i].anirange4;
animals[i].spotted = within_horizontal_range and within_vertical_range;
if(animals[i].spotted)
{
bool moved = false;
if(animals[i].amx<me.x && animals[i].moveable==true && paused==0)
{
if (string_contains(gmt(animals[i].amx+1, animals[i].amy), "wall", 1) > -1 or is_in_safe(animals[i].amx+1, animals[i].amy))
{
animals[i].amx--;
moved = true;
}
else
{
animals[i].amx++;
moved = true;
}
}
else if(animals[i].amx>me.x && animals[i].moveable==true && paused==0)
{
if (string_contains(gmt(animals[i].amx-1, animals[i].amy), "wall", 1) > -1 or is_in_safe(animals[i].amx-1, animals[i].amy))
{
animals[i].amx++;
moved = true;
}
else
{
animals[i].amx--;
moved = true;
}
}
if(animals[i].amy<me.y && animals[i].moveable2==true && paused==0)
{
if (string_contains(gmt(animals[i].amx, animals[i].amy+1), "wall", 1) > -1 or is_in_safe(animals[i].amx, animals[i].amy+1))
{
animals[i].amy--;
moved = true;
}
else
{
animals[i].amy++;
moved = true;
}
}
else if(animals[i].amy>me.y && animals[i].moveable2==true && paused==0)
{
if (string_contains(gmt(animals[i].amx, animals[i].amy-1), "wall", 1) > -1 or is_in_safe(animals[i].amx, animals[i].amy-1))
{
animals[i].amy++;
moved = true;
}
else
{
animals[i].amy--;
moved = true;
}
}
if (moved)
{
animals[i].tilesound = animalpool.play_extended_2d(find_sound("sounds/" + soundpack + "/npc/animals/" + animals[i].animaltype + "/*step*"),me.x, me.y, animals[i].amx, animals[i].amy, 0, 0, 0, 0, false, 0, 0, tilevolume, tilepitch, false);
animals[i].stepsound = 1;
}
else
{
animals[i].stepsound = 0;
}
animalpool.update_sound_2d(animals[i].amsound, animals[i].amx, animals[i].amy);
animals[i].animaltimer.restart();
}
}
if(absolute(me.x-animals[i].amx)<=animals[i].anirange and absolute(me.y-animals[i].amy)<=animals[i].anirange2 and animals[i].firetimer.elapsed>=animals[i].firetime and animals[i].fireable==true and invehicle==false and paused==0)
{
animals[i].stepsound=0;
if(melee==true and weapontype=="melee" and wepdef==1)
{
int refchance = random(0, 100);
int refprob = 80;
if(refchance < refprob)
{
weaponslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*block*"),false,0,0,weaponvolume,weaponpitch,false);
}
else
{
if(shieldon==1)
{
if(shieldhitsound==1) shieldslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*"),false,0,0,shieldvolume,shieldpitch,false);
shieldstrength -= (animals[i].damage * 0.5) * animals[i].amlevel - shielddefence;
}
else
{
animals[i].wepsound=animalpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/*hit*"),false,0,0,weaponvolume,weaponpitch,false);
if(charhurtsound==1) painslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
int dmg = (animals[i].damage * 0.5) * animals[i].amlevel - defence;
health -= dmg;
hearttime -= dmg;
int ct = clamp(dmg * 2, 0, 100);
int count = clamp(dmg / 15, 1, 5);
break_charbones(ct, dmg, 1 * dmg, count);
}
}
}
else if (shieldon == 1)
{
if(shieldhitsound==1) shieldslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*"),false,0,0,shieldvolume,shieldpitch,false);
shieldstrength -= animals[i].damage * animals[i].amlevel - shielddefence;
}
else
{
animals[i].wepsound=animalpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/*hit*"),false,0,0,weaponvolume,weaponpitch,false);
if(charhurtsound==1) painslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
int dmg = animals[i].damage * animals[i].amlevel - defence;
health -= dmg;
hearttime -= dmg;
int ct = clamp(dmg * 2, 0, 100);
int count = clamp(dmg / 15, 1, 5);
break_charbones(ct, dmg, 1 * dmg, count);
}
animals[i].firetimer.restart();
}
for(uint i1=0; i1<objs.length(); i1++)
{
if(objs[i1].itx==animals[i].amx and objs[i1].ity==animals[i].amy and animals[i].firetimer.elapsed>=animals[i].firetime and animals[i].fireable==true)
{
animals[i].wepsound=animalpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/*hit*"),me.x,me.y,animals[i].amx,animals[i].amy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
itempool.destroy_sound(objs[i1].objsound);
objs[i1].hurtsound=itempool.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/items/unsorted/"+objs[i1].objtype+"/"+objs[i1].objtype2+"/*break*"),me.x,me.y,objs[i1].itx,objs[i1].ity,0,0,0,0,false,0,0,itemvolume,itempitch,false);
animals[i].firetimer.restart();
objs.remove_at(i1);
return;
}
}
for(uint i2=0; i2<vehicles.length(); i2++)
{
if(vehicles[i2].vehx==animals[i].amx and vehicles[i2].vehy==animals[i].amy and animals[i].firetimer.elapsed>=animals[i].firetime and animals[i].fireable==true and invehicle==true)
{
vehicles[i2].hurtsound=vehpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/objects/vehicles/"+vehicles[i2].vehtype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
vehicles[i2].vehhealth-=animals[i].damage;
animals[i].firetimer.restart();
}
}
if(animals[i].animalhealth<=0)
{
if(animals[i].animalcard>=2 and paused==0)
{
animalpool.play_2d(find_sound("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/*life*"),me.x,me.y,animals[i].amx,animals[i].amy,false);
animals[i].animalhealth=animals[i].anihealth;
animals[i].animalcard-=1;
}
else if(animals[i].animalcard<=1 and paused==0)
{
animalpool.destroy_sound(animals[i].hurtsound);
animalpool.destroy_sound(animals[i].amsound);
animals[i].defsound=animalpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/*death*"),me.x,me.y,animals[i].amx,animals[i].amy,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=animals[i].amxp*animals[i].amlevel*xpmod;
kills+=1;
spawn_bodyfall(animals[i].amx, animals[i].amy, random(500,1000));
string[] healtype=find_directories("sounds/"+soundpack+"/equipments/items/unsorted/health/*");
if(healtype.length()!=0 and animals[i].dropitem==true) spawn_obj(animals[i].amx, animals[i].amy, 500, "health", random_string(healtype), true);
if(charkillsound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*kill*"),false);
animals.remove_at(i);
return;
}
}
}
}
void spawn_animal(int x,int y,int animrange,int animrange2,int animrange3,int animrange4,double hp,double maxhp,int ac,int dm,int firetime,int animaltime,double amlevel,double xp,string animaltype,bool fireable,bool moveable,bool moveable2,bool dropitem)
{
animal an1(x,y,animrange,animrange2,animrange3,animrange4,hp,maxhp,ac,dm,firetime,animaltime,amlevel,xp,animaltype,fireable,moveable,moveable2,dropitem);
animals.insert_last(an1);
}
void destroy_all_animals()
{
for(uint i=0; i<animals.length(); i++)
{
animalpool.destroy_sound(animals[i].amsound);
}
animals.resize(0);
}

boss@[]bosses(0);
class boss
{
bool dropitem, fireable, moveable, moveable2, regenhp, spotted, telleble, telleble2;
int bossesound, healsound, defsound, firesound, hurtsound, spawnsound, stepsound, tilesound, telsound, wepsound;
int bosscard;
int bossehealth;
double bosslevel;
double bossxp;
double bosshealth;
double bossmaxhealth;
int bossx;
int bossy;
int boserange;
int boserange2;
int boserange3;
int boserange4;
int damage;
int bosstime;
int firetime;
int healtime;
int launchtime;
int teltime;
string bosstype;
string bosstype2;
string bosstype3;
timer bosstimer, firetimer, healtimer, launchtimer, teltimer;
boss(int bx,int by,int bsrange,int bsrange2,int bsrange3,int bsrange4,double hp,double maxhp,int bc,int dm,int ft,int lt,int sp,int tlt,int hlt,double blv,double bxp,string bt,string bs,string bs2,bool bf,bool bm,bool bm2,bool tb,bool tb2,bool rgp,bool dpm)
{
this.bossehealth=hp;
bossx=bx;
bossy=by;
boserange=bsrange;
boserange2=bsrange2;
boserange3=bsrange3;
boserange4=bsrange4;
bosshealth=hp;
bossmaxhealth=maxhp;
bosscard=bc;
damage=dm;
firetime=ft;
launchtime=lt;
bosstime=sp;
teltime=tlt;
healtime=hlt;
bosslevel=blv;
bossxp=bxp;
bosstype=bt;
bosstype2=bs;
bosstype3=bs2;
fireable=bf;
moveable=bm;
moveable2=bm2;
telleble=tb;
telleble2=tb2;
regenhp=rgp;
dropitem=dpm;
spawnsound=bosspool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/bosses/"+bosstype+"/*spawn*"),me.x,me.y,bossx,bossy,0,0,0,0,false,0,0,painvolume,painpitch,false);
bossesound=bosspool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/bosses/"+bosstype+"/*taunt*"),me.x,me.y,bossx,bossy,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
void regenerate_bosshp(double hp)
{
healsound=bosspool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/bosses/"+bosstype+"/*heal*"),me.x,me.y,bossx,bossy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
bosshealth+=hp;
bossmaxhealth+=hp;
}
void teleport_boss(int bx,int by)
{
telsound=bosspool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/bosses/"+bosstype+"/*tel*"),me.x,me.y,bossx,bossy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
bossx=bx;
bossy=by;
}
}
void bossloop()
{
for(uint i=0; i<bosses.length(); i++)
{
if(bosses[i].healtimer.elapsed>=bosses[i].healtime)
{
if(bosses[i].regenhp==true) bosses[i].regenerate_bosshp(random(bosses[i].bossmaxhealth/60, bosses[i].bossmaxhealth/30));
bosses[i].healtimer.restart();
}
if(bosses[i].launchtimer.elapsed>=bosses[i].launchtime)
{
if(facing=="left" or facing=="right") bosses[i].firesound=bosspool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/bosses/"+bosses[i].bosstype+"/*launch*"),me.x,me.y,bosses[i].bossx,bosses[i].bossy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
if(bosses[i].bosstype2=="animal" and facing=="left") spawn_animal(bosses[i].bossx-1, bosses[i].bossy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), bosses[i].bosslevel, 1*level, bosses[i].bosstype3, true, true, random_bool(), random_bool());
if(bosses[i].bosstype2=="animal" and facing=="right") spawn_animal(bosses[i].bossx+1, bosses[i].bossy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), bosses[i].bosslevel, 1*level, bosses[i].bosstype3, true, true, random_bool(), random_bool());
if(bosses[i].bosstype2=="human" and facing=="left") spawn_human(bosses[i].bossx-1, bosses[i].bossy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), bosses[i].bosslevel, 1*level, bosses[i].bosstype3, true, true, random_bool(), random_bool());
if(bosses[i].bosstype2=="human" and facing=="right") spawn_human(bosses[i].bossx+1, bosses[i].bossy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), bosses[i].bosslevel, 1*level, bosses[i].bosstype3, true, true, random_bool(), random_bool());
if(bosses[i].bosstype2=="projectile" and facing=="left") spawn_projectile(bosses[i].bossx-1, bosses[i].bossy, 0, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(50, 500), bosses[i].bosslevel, 1*level, bosses[i].bosstype3, true, true);
if(bosses[i].bosstype2=="projectile" and facing=="right") spawn_projectile(bosses[i].bossx+1, bosses[i].bossy, 1, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(50, 500), bosses[i].bosslevel, 1*level, bosses[i].bosstype3, true, true);
if(bosses[i].bosstype2=="robot" and facing=="left") spawn_robot(bosses[i].bossx-1, bosses[i].bossy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), bosses[i].bosslevel, 1*level, bosses[i].bosstype3, true, true, random_bool(), random_bool());
if(bosses[i].bosstype2=="robot" and facing=="right") spawn_robot(bosses[i].bossx+1, bosses[i].bossy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), bosses[i].bosslevel, 1*level, bosses[i].bosstype3, true, true, random_bool(), random_bool());
//if(bosses[i].bosstype2=="turret" and facing=="left") spawn_turret(bosses[i].bossx-1, bosses[i].bossy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), bosses[i].launchtime, random(100, 1000), bosses[i].bosslevel, 1*level, bosses[i].bosstype, bosses[i].bosstype2, bosses[i].bosstype3, true, true, random_bool());
//if(bosses[i].bosstype2=="turret" and facing=="right") spawn_turret(bosses[i].bossx+1, bosses[i].bossy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), bosses[i].launchtime, random(100, 1000), bosses[i].bosslevel, 1*level, bosses[i].bosstype, bosses[i].bosstype2, bosses[i].bosstype3, true, true, random_bool());
if(bosses[i].bosstype2=="zombie" and facing=="left") spawn_zombie(bosses[i].bossx-1, bosses[i].bossy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), bosses[i].bosslevel, 1*level, bosses[i].bosstype3, true, true, random_bool(), random_bool());
if(bosses[i].bosstype2=="zombie" and facing=="right") spawn_zombie(bosses[i].bossx+1, bosses[i].bossy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), bosses[i].bosslevel, 1*level, bosses[i].bosstype3, true, true, random_bool(), random_bool());
bosses[i].launchtimer.restart();
}
if(bosses[i].teltimer.elapsed>=bosses[i].teltime)
{
bosses[i].telsound=bosspool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/bosses/"+bosses[i].bosstype+"/*tel*"),me.x,me.y,bosses[i].bossx,bosses[i].bossy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
if(bosses[i].telleble==true) bosses[i].teleport_boss(random(0, maxx), bosses[i].bossy);
if(bosses[i].telleble2==true) bosses[i].teleport_boss(random(0, maxx), random(0, maxy));
bosspool.update_sound_2d(bosses[i].bossesound,bosses[i].bossx,bosses[i].bossy);
bosspool.update_sound_2d(bosses[i].telsound,bosses[i].bossx,bosses[i].bossy);
bosses[i].teltimer.restart();
}
if(bosses[i].bosstimer.elapsed>=bosses[i].bosstime)
{
bool within_horizontal_range = absolute(me.x - bosses[i].bossx) <= bosses[i].boserange3;
bool within_vertical_range = absolute(me.y - bosses[i].bossy) <= bosses[i].boserange4;
bosses[i].spotted = within_horizontal_range && within_vertical_range;
if(bosses[i].spotted)
{
bool moved = false;
if(bosses[i].bossx<me.x && bosses[i].moveable==true && paused==0)
{
if (string_contains(gmt(bosses[i].bossx+1, bosses[i].bossy), "wall", 1) > -1 or is_in_safe(bosses[i].bossx+1, bosses[i].bossy))
{
bosses[i].bossx--;
moved = true;
}
else
{
bosses[i].bossx++;
moved = true;
}
}
else if(bosses[i].bossx>me.x && bosses[i].moveable==true && paused==0)
{
if (string_contains(gmt(bosses[i].bossx-1, bosses[i].bossy), "wall", 1) > -1 or is_in_safe(bosses[i].bossx-1, bosses[i].bossy))
{
bosses[i].bossx++;
moved = true;
}
else
{
bosses[i].bossx--;
moved = true;
}
}
if(bosses[i].bossy<me.y && bosses[i].moveable2==true && paused==0)
{
if (string_contains(gmt(bosses[i].bossx, bosses[i].bossy+1), "wall", 1) > -1 or is_in_safe(bosses[i].bossx, bosses[i].bossy+1))
{
bosses[i].bossy--;
moved = true;
}
else
{
bosses[i].bossy++;
moved = true;
}
}
else if(bosses[i].bossy>me.y && bosses[i].moveable2==true && paused==0)
{
if (string_contains(gmt(bosses[i].bossx, bosses[i].bossy-1), "wall", 1) > -1 or is_in_safe(bosses[i].bossx, bosses[i].bossy-1))
{
bosses[i].bossy++;
moved = true;
}
else
{
bosses[i].bossy--;
moved = true;
}
}
if (moved)
{
bosses[i].tilesound = bosspool.play_extended_2d(find_sound("sounds/" + soundpack + "/npc/" + bosses[i].bosstype + "/*step*"),me.x, me.y, bosses[i].bossx, bosses[i].bossy, 0, 0, 0, 0, false, 0, 0, tilevolume, tilepitch, false);
bosses[i].stepsound = 1;
}
else
{
bosses[i].stepsound = 0;
}
bosspool.update_sound_2d(bosses[i].bossesound, bosses[i].bossx, bosses[i].bossy);
bosses[i].bosstimer.restart();
}
}
if(absolute(me.x-bosses[i].bossx)<=bosses[i].boserange and absolute(me.y-bosses[i].bossy)<=bosses[i].boserange2 and bosses[i].firetimer.elapsed>=bosses[i].firetime and bosses[i].fireable==true and invehicle==false and paused==0)
{
bosses[i].stepsound=0;
if(melee==true and weapontype=="melee" and wepdef==1)
{
int refchance = random(0, 100);
int refprob = 80;
if(refchance < refprob)
{
weaponslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*block*"),false,0,0,weaponvolume,weaponpitch,false);
}
else
{
if(shieldon==1)
{
if(shieldhitsound==1) shieldslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*"),false,0,0,shieldvolume,shieldpitch,false);
shieldstrength -= (bosses[i].damage * 0.5) * bosses[i].bosslevel - shielddefence;
}
else
{
bosses[i].wepsound=bosspool.play_stationary_extended(find_sound("sounds/"+soundpack+"/npc/bosses/"+bosses[i].bosstype+"/*hit*"),false,0,0,weaponvolume,weaponpitch,false);
if(charhurtsound==1) painslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
health -= (bosses[i].damage * 0.5) * bosses[i].bosslevel - defence;
hearttime -= (bosses[i].damage * 0.5) * bosses[i].bosslevel - defence;
}
}
}
else if (shieldon == 1)
{
if(shieldhitsound==1) shieldslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*"),false,0,0,shieldvolume,shieldpitch,false);
shieldstrength -= bosses[i].damage * bosses[i].bosslevel - shielddefence;
}
else
{
bosses[i].wepsound=bosspool.play_stationary_extended(find_sound("sounds/"+soundpack+"/npc/bosses/"+bosses[i].bosstype+"/*hit*"),false,0,0,weaponvolume,weaponpitch,false);
if(charhurtsound==1) painslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
health -= bosses[i].damage * bosses[i].bosslevel - defence;
hearttime -= bosses[i].damage * bosses[i].bosslevel - defence;
}
bosses[i].firetimer.restart();
}
for(uint i=0; i<objs.length(); i++)
{
if(objs[i].itx==bosses[i].bossx and objs[i].ity==bosses[i].bossy and bosses[i].firetimer.elapsed>=bosses[i].firetime and bosses[i].fireable==true)
{
bosses[i].wepsound=animalpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/bosses/"+bosses[i].bosstype+"/*hit*"),me.x,me.y,bosses[i].bossx,bosses[i].bossy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
itempool.destroy_sound(objs[i].objsound);
objs[i].hurtsound=itempool.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/items/unsorted/"+objs[i].objtype+"/"+objs[i].objtype2+"/*break*"),me.x,me.y,objs[i].itx,objs[i].ity,0,0,0,0,false,0,0,itemvolume,itempitch,false);
bosses[i].firetimer.restart();
objs.remove_at(i);
return;
}
}
for(uint i=0; i<vehicles.length(); i++)
{
if(vehicles[i].vehx==bosses[i].bossx and vehicles[i].vehy==bosses[i].bossy and bosses[i].firetimer.elapsed>=bosses[i].firetime and bosses[i].fireable==true and invehicle==true)
{
vehicles[i].hurtsound=vehpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/objects/vehicles/"+vehicles[i].vehtype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
vehicles[i].vehhealth-=bosses[i].damage;
bosses[i].firetimer.restart();
}
}
if(bosses[i].bosshealth<=0)
{
if(bosses[i].bosscard>=2 and paused==0)
{
bosspool.play_2d(find_sound("sounds/"+soundpack+"/npc/bosses/"+bosses[i].bosstype+"/*life*"),me.x,me.y,bosses[i].bossx,bosses[i].bossy,false);
bosses[i].bosshealth=bosses[i].bossehealth;
bosses[i].bosscard-=1;
}
else if(bosses[i].bosscard<=1 and paused==0)
{
bosspool.destroy_sound(bosses[i].hurtsound);
bosspool.destroy_sound(bosses[i].bossesound);
bosses[i].defsound=bosspool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/bosses/"+bosses[i].bosstype+"/*death*"),me.x,me.y,bosses[i].bossx,bosses[i].bossy,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=bosses[i].bossxp*bosses[i].bosslevel*xpmod;
kills+=1;
spawn_bodyfall(bosses[i].bossx, bosses[i].bossy, random(500,1000));
string[] healtype=find_directories("sounds/"+soundpack+"/equipments/items/unsorted/health/*");
if(healtype.length()!=0 and bosses[i].dropitem==true) spawn_obj(bosses[i].bossx, bosses[i].bossy, 500, "health", random_string(healtype), true);
if(charkillsound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*kill*"),false);
bosses.remove_at(i);
return;
}
}
}
}
void spawn_boss(int x,int y,int bossrange,int bossrange2,int bossrange3,int bossrange4,double hp,double maxhp,int bc,int dm,int firetime,int launchtime,int bosstime,int teltime,int healtime,double bosslevel,double xp,string bosstype,string bosstype2,string bosstype3,bool fireable,bool moveable,bool moveable2,bool telleble,bool telleble2,bool regenhp,bool dropitem)
{
boss bs1(x,y,bossrange,bossrange2,bossrange3,bossrange4,hp,maxhp,bc,dm,firetime,launchtime,bosstime,teltime,healtime,bosslevel,xp,bosstype,bosstype2,bosstype3,fireable,moveable,moveable2,telleble,telleble2,regenhp,dropitem);
bosses.insert_last(bs1);
}
void destroy_all_bosses()
{
for(uint i=0; i<bosses.length(); i++)
{
bosspool.destroy_sound(bosses[i].bossesound);
}
bosses.resize(0);
}

human@[]humans(0);
class human
{
bool dropitem, fireable, moveable, moveable2, spotted;
int drawsound, defsound, firesound, humsound, hitsound, hurtsound, refsound, refsound2, shellsound, spawnsound, stepsound, tilesound;
int humancard;
int humihealth;
int wepdef;
double humlevel;
double humxp;
double humanhealth;
double humanmaxhealth;
int humx;
int humy;
int humrange;
int humrange2;
int humrange3;
int humrange4;
int damage;
int humantime;
int firetime;
string humantype, weapontype, weapontype2;
timer humantimer, firetimer, reftimer;
human(int hux,int huy,int hurange,int hurange2,int hurange3,int hurange4,double hp,double maxhp,int huc,int dm,int ft,int sp,double humlv,double huxp,string hut,bool humf,bool humt,bool humt2,bool dpm)
{
this.humihealth=hp;
humx=hux;
humy=huy;
humrange=hurange;
humrange2=hurange2;
humrange3=hurange3;
humrange4=hurange4;
humanhealth=hp;
humanmaxhealth=maxhp;
humancard=huc;
damage=dm;
firetime=ft;
humantime=sp;
humlevel=humlv;
humxp=huxp;
humantype=hut;
fireable=humf;
moveable=humt;
moveable2=humt2;
dropitem=dpm;
string[] wepcad = { "archery", "artillery", "explosive", "melee" };
weapontype = wepcad[random(0, wepcad.length() - 1)];
string[] weapon=find_directories("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/*");
weapontype2 = weapon[random(0, weapon.length() - 1)];
drawsound=humanpool.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*draw*"),me.x,me.y,humx,humy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
spawnsound=humanpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/humans/"+humantype+"/*spawn*"),me.x,me.y,humx,humy,0,0,0,0,false,0,0,painvolume,painpitch,false);
humsound=humanpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/humans/"+humantype+"/*taunt*"),me.x,me.y,humx,humy,0,0,0,0,true,0,0,painvolume,painpitch,false);
if(weapontype=="melee")
{
wepdef = 0;
}
}
}
void humiloop()
{
for(uint i=0; i<humans.length(); i++)
{
if (humans[i].weapontype == "melee" && humans[i].reftimer.elapsed >= random(5000, 10000))
{
if (humans[i].wepdef == 0)
{
humanpool.destroy_sound(humans[i].refsound2);
humans[i].refsound = humanpool.play_extended_2d(find_sound("sounds/" + soundpack + "/equipments/weapons/" + humans[i].weapontype + "/" + humans[i].weapontype2 + "/*on*"), me.x, me.y, humans[i].humx, humans[i].humy, 0, 0, 0, 0, false, 0, 0, weaponvolume, weaponpitch, false);
humans[i].refsound2 = humanpool.play_extended_2d(find_sound("sounds/" + soundpack + "/equipments/weapons/" + humans[i].weapontype + "/" + humans[i].weapontype2 + "/*ref*"), me.x, me.y, humans[i].humx, humans[i].humy, 0, 0, 0, 0, true, 0, 0, weaponvolume, weaponpitch, false);
humans[i].wepdef = 1;
}
else
{
humanpool.destroy_sound(humans[i].refsound2);
humans[i].refsound = humanpool.play_extended_2d(find_sound("sounds/" + soundpack + "/equipments/weapons/" + humans[i].weapontype + "/" + humans[i].weapontype2 + "/*off*"), me.x, me.y, humans[i].humx, humans[i].humy, 0, 0, 0, 0, false, 0, 0, weaponvolume, weaponpitch, false);
humans[i].wepdef = 0;
}
humans[i].reftimer.restart();
}
if(humans[i].humantimer.elapsed>=humans[i].humantime)
{
bool within_horizontal_range = absolute(me.x - humans[i].humx) <= humans[i].humrange3;
bool within_vertical_range = absolute(me.y - humans[i].humy) <= humans[i].humrange4;
humans[i].spotted = within_horizontal_range && within_vertical_range;
if(humans[i].spotted)
{
bool moved = false;
if(humans[i].humx<me.x && humans[i].moveable==true && paused==0)
{
if (string_contains(gmt(humans[i].humx+1, humans[i].humy), "wall", 1) > -1 or is_in_safe(humans[i].humx+1, humans[i].humy))
{
humans[i].humx--;
moved = true;
}
else
{
humans[i].humx++;
moved = true;
}
}
else if(humans[i].humx>me.x && humans[i].moveable==true && paused==0)
{
if (string_contains(gmt(humans[i].humx-1, humans[i].humy), "wall", 1) > -1 or is_in_safe(humans[i].humx-1, humans[i].humy))
{
humans[i].humx++;
moved = true;
}
else
{
humans[i].humx--;
moved = true;
}
}
if(humans[i].humy<me.y && humans[i].moveable2==true && paused==0)
{
if (string_contains(gmt(humans[i].humx, humans[i].humy+1), "wall", 1) > -1 or is_in_safe(humans[i].humx, humans[i].humy+1))
{
humans[i].humy--;
moved = true;
}
else
{
humans[i].humy++;
moved = true;
}
}
else if(humans[i].humy>me.y && humans[i].moveable2==true && paused==0)
{
if (string_contains(gmt(humans[i].humx, humans[i].humy-1), "wall", 1) > -1 or is_in_safe(humans[i].humx, humans[i].humy-1))
{
humans[i].humy++;
moved = true;
}
else
{
humans[i].humy--;
moved = true;
}
}
if (moved)
{
humans[i].tilesound = humanpool.play_extended_2d(find_sound("sounds/" + soundpack + "/objects/platforms/" + gmt(humans[i].humx,humans[i].humy) + "/*step*"),me.x, me.y, humans[i].humx, humans[i].humy, 0, 0, 0, 0, false, 0, 0, tilevolume, tilepitch, false);
humans[i].stepsound = 1;
}
else
{
humans[i].stepsound = 0;
}
humanpool.update_sound_2d(humans[i].humsound, humans[i].humx, humans[i].humy);
humans[i].humantimer.restart();
}
}
if(absolute(me.x-humans[i].humx)<=humans[i].humrange and absolute(me.y-humans[i].humy)<=humans[i].humrange2 and humans[i].firetimer.elapsed>=humans[i].firetime and humans[i].fireable==true and invehicle==false and paused==0)
{
humans[i].stepsound=0;
if(melee==true and weapontype=="melee" and wepdef==1)
{
int refchance = random(0, 100);
int refprob = 80;
if(refchance < refprob)
{
humans[i].firesound=humanpool.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+humans[i].weapontype+"/"+humans[i].weapontype2+"/*fire*"),me.x,me.y,humans[i].humx,humans[i].humy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
weaponslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*block*"),false,0,0,weaponvolume,weaponpitch,false);
}
else
{
if(shieldon==1)
{
humans[i].firesound=humanpool.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+humans[i].weapontype+"/"+humans[i].weapontype2+"/*fire*"),me.x,me.y,humans[i].humx,humans[i].humy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
if(shieldhitsound==1) shieldslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*"),false,0,0,shieldvolume,shieldpitch,false);
shieldstrength -= (humans[i].damage * 0.5) * humans[i].humlevel - shielddefence;
}
else
{
humans[i].firesound=humanpool.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+humans[i].weapontype+"/"+humans[i].weapontype2+"/*fire*"),me.x,me.y,humans[i].humx,humans[i].humy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
humans[i].hitsound=humanpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/weapons/"+humans[i].weapontype+"/"+humans[i].weapontype2+"/*hit*"),false,0,0,weaponvolume,weaponpitch,false);
humans[i].shellsound=humanpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/weapons/"+humans[i].weapontype+"/"+humans[i].weapontype2+"/*shell*"),false,0,0,weaponvolume,weaponpitch,false);
if(charhurtsound==1) painslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
health -= (humans[i].damage * 0.5) * humans[i].humlevel - defence;
hearttime -= (humans[i].damage * 0.5) * humans[i].humlevel - defence;
}
}
}
else if (shieldon == 1)
{
humans[i].firesound=humanpool.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+humans[i].weapontype+"/"+humans[i].weapontype2+"/*fire*"),me.x,me.y,humans[i].humx,humans[i].humy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
if(shieldhitsound==1) shieldslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*"),false,0,0,shieldvolume,shieldpitch,false);
shieldstrength -= humans[i].damage * humans[i].humlevel - shielddefence;
}
else
{
humans[i].firesound=humanpool.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+humans[i].weapontype+"/"+humans[i].weapontype2+"/*fire*"),me.x,me.y,humans[i].humx,humans[i].humy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
humans[i].hitsound=humanpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/weapons/"+humans[i].weapontype+"/"+humans[i].weapontype2+"/*hit*"),false,0,0,weaponvolume,weaponpitch,false);
humans[i].shellsound=humanpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/weapons/"+humans[i].weapontype+"/"+humans[i].weapontype2+"/*shell*"),false,0,0,weaponvolume,weaponpitch,false);
if(charhurtsound==1) painslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
health -= humans[i].damage * humans[i].humlevel - defence;
hearttime -= humans[i].damage * humans[i].humlevel - defence;
}
humans[i].firetimer.restart();
}
for(uint i1=0; i1<objs.length(); i1++)
{
if(objs[i1].itx==humans[i].humx and objs[i1].ity==humans[i].humy and humans[i].firetimer.elapsed>=humans[i].firetime and humans[i].fireable==true)
{
humans[i].firesound=humanpool.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+humans[i].weapontype+"/"+humans[i].weapontype2+"/*fire*"),me.x,me.y,humans[i].humx,humans[i].humy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
humans[i].hitsound=humanpool.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+humans[i].weapontype+"/"+humans[i].weapontype2+"/*hit*"),me.x,me.y,humans[i].humx,humans[i].humy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
humans[i].shellsound=humanpool.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+humans[i].weapontype+"/"+humans[i].weapontype2+"/*shell*"),me.x,me.y,humans[i].humx,humans[i].humy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
itempool.destroy_sound(objs[i1].objsound);
objs[i1].hurtsound=itempool.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/items/unsorted/"+objs[i1].objtype+"/"+objs[i1].objtype2+"/*break*"),me.x,me.y,objs[i1].itx,objs[i1].ity,0,0,0,0,false,0,0,itemvolume,itempitch,false);
humans[i].firetimer.restart();
objs.remove_at(i1);
return;
}
}
for(uint i2=0; i2<vehicles.length(); i2++)
{
if(vehicles[i2].vehx==humans[i].humx and vehicles[i2].vehy==humans[i].humy and humans[i].firetimer.elapsed>=humans[i].firetime and humans[i].fireable==true and invehicle==true)
{
vehicles[i2].hurtsound=vehpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/objects/vehicles/"+vehicles[i2].vehtype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
vehicles[i2].vehhealth-=humans[i].damage;
humans[i].firetimer.restart();
}
}
if(humans[i].humanhealth<=0)
{
if(humans[i].humancard>=2 and paused==0)
{
humanpool.play_2d(find_sound("sounds/"+soundpack+"/npc/humans/"+humans[i].humantype+"/*life*"),me.x,me.y,humans[i].humx,humans[i].humy,false);
humans[i].humanhealth=humans[i].humihealth;
humans[i].humancard-=1;
}
else if(humans[i].humancard<=1 and paused==0)
{
humanpool.destroy_sound(humans[i].refsound2);
humanpool.destroy_sound(humans[i].hurtsound);
humanpool.destroy_sound(humans[i].humsound);
humans[i].defsound=humanpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/humans/"+humans[i].humantype+"/*death*"),me.x,me.y,humans[i].humx,humans[i].humy,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=humans[i].humxp*humans[i].humlevel*xpmod;
kills+=1;
spawn_bodyfall(humans[i].humx, humans[i].humy, random(500,1000));
string[] healtype=find_directories("sounds/"+soundpack+"/equipments/items/unsorted/health/*");
if(healtype.length()!=0 and humans[i].dropitem==true) spawn_obj(humans[i].humx, humans[i].humy, 500, "health", random_string(healtype), true);
if(charkillsound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*kill*"),false);
humans.remove_at(i);
return;
}
}
}
}
void spawn_human(int x,int y,int humarange,int humarange2,int humarange3,int humarange4,double hp,double maxhp,int huc,int dm,int firetime,int humantime,double humlevel,double xp,string humantype,bool fireable,bool moveable,bool moveable2,bool dropitem)
{
human huma1(x,y,humarange,humarange2,humarange3,humarange4,hp,maxhp,huc,dm,firetime,humantime,humlevel,xp,humantype,fireable,moveable,moveable2,dropitem);
humans.insert_last(huma1);
}
void destroy_all_humans()
{
for(uint i=0; i<humans.length(); i++)
{
humanpool.destroy_sound(humans[i].drawsound);
humanpool.destroy_sound(humans[i].humsound);
humanpool.destroy_sound(humans[i].spawnsound);
humanpool.destroy_sound(humans[i].refsound2);
}
humans.resize(0);
}

helper@[]helpers(0);
class helper
{
int destsound, defsound, helpersound, hurtsound, spawnsound, stepsound, tilesound, wepsound;
int helpercard;
int helphealth;
double helplevel;
double helperhealth;
double helpermaxhealth;
int helpx;
int helpy;
int damage;
int helpertime;
int firetime;
string helpertype;
timer helpertimer, firetimer;
helper(int hx,int hy,double hp,double maxhp,int hc,int dm,int ft,int sp,double helplv,string ht)
{
this.helphealth=hp;
helpx=hx;
helpy=hy;
helperhealth=hp;
helpermaxhealth=maxhp;
helpercard=hc;
damage=dm;
firetime=ft;
helpertime=sp;
helplevel=helplv;
helpertype=ht;
spawnsound=helperpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/helpers/"+helpertype+"/*spawn*"),me.x,me.y,helpx,helpy,0,0,0,0,false,0,0,painvolume,painpitch,false);
helpersound=helperpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/helpers/"+helpertype+"/*loop*"),me.x,me.y,helpx,helpy,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void helperloop()
{
for(uint i=0; i<helpers.length(); i++)
{
if(helpers[i].helpertimer.elapsed>=helpers[i].helpertime)
{
if(helpers[i].stepsound==1 and paused==0) helpers[i].tilesound=p.play_extended_2d(find_sound("sounds/"+soundpack+"/objects/platforms/"+gmt(helpers[i].helpx, helpers[i].helpy)+"/*step*"),me.x,me.y,helpers[i].helpx,helpers[i].helpy,0,0,0,0,false,0,0,tilevolume,tilepitch,false);
helperpool.update_sound_2d(helpers[i].helpersound,helpers[i].helpx,helpers[i].helpy);
helpers[i].helpertimer.restart();
for(uint i1=0; i1<animals.length(); i1++)
{
if(helpers[i].helpx<animals[i1].amx and paused==0)
{
helpers[i].helpx++;
helpers[i].stepsound=1;
}
if(helpers[i].helpx>animals[i1].amx and paused==0)
{
helpers[i].helpx--;
helpers[i].stepsound=1;
}
if(helpers[i].helpy<animals[i1].amy and paused==0)
{
helpers[i].helpy++;
helpers[i].stepsound=1;
}
if(helpers[i].helpy>animals[i1].amy and paused==0)
{
helpers[i].helpy--;
helpers[i].stepsound=1;
}
}
for(uint i2=0; i2<humans.length(); i2++)
{
if(helpers[i].helpx<humans[i2].humx and paused==0)
{
helpers[i].helpx++;
helpers[i].stepsound=1;
}
if(helpers[i].helpx>humans[i2].humx and paused==0)
{
helpers[i].helpx--;
helpers[i].stepsound=1;
}
if(helpers[i].helpy<humans[i2].humy and paused==0)
{
helpers[i].helpy++;
helpers[i].stepsound=1;
}
if(helpers[i].helpy>humans[i2].humy and paused==0)
{
helpers[i].helpy--;
helpers[i].stepsound=1;
}
}
for(uint i3=0; i3<robots.length(); i3++)
{
if(helpers[i].helpx<robots[i3].robx and paused==0)
{
helpers[i].helpx++;
helpers[i].stepsound=1;
}
if(helpers[i].helpx>robots[i3].robx and paused==0)
{
helpers[i].helpx--;
helpers[i].stepsound=1;
}
if(helpers[i].helpy<robots[i3].roby and paused==0)
{
helpers[i].helpy++;
helpers[i].stepsound=1;
}
if(helpers[i].helpy>robots[i3].roby and paused==0)
{
helpers[i].helpy--;
helpers[i].stepsound=1;
}
}
for(uint i4=0; i4<zombies.length(); i4++)
{
if(helpers[i].helpx<zombies[i4].zombx and paused==0)
{
helpers[i].helpx++;
helpers[i].stepsound=1;
}
if(helpers[i].helpx>zombies[i4].zombx and paused==0)
{
helpers[i].helpx--;
helpers[i].stepsound=1;
}
if(helpers[i].helpy<zombies[i4].zomby and paused==0)
{
helpers[i].helpy++;
helpers[i].stepsound=1;
}
if(helpers[i].helpy>zombies[i4].zomby and paused==0)
{
helpers[i].helpy--;
helpers[i].stepsound=1;
}
}
for(uint i5=0; i5<bosses.length(); i5++)
{
if(helpers[i].helpx<bosses[i5].bossx and paused==0)
{
helpers[i].helpx++;
helpers[i].stepsound=1;
}
if(helpers[i].helpx>bosses[i5].bossx and paused==0)
{
helpers[i].helpx--;
helpers[i].stepsound=1;
}
if(helpers[i].helpy<bosses[i5].bossy and paused==0)
{
helpers[i].helpy++;
helpers[i].stepsound=1;
}
if(helpers[i].helpy>bosses[i5].bossy and paused==0)
{
helpers[i].helpy--;
helpers[i].stepsound=1;
}
}
for(uint i6=0; i6<objs.length(); i6++)
{
if(helpers[i].helpx<objs[i6].itx and paused==0)
{
helpers[i].helpx++;
helpers[i].stepsound=1;
}
if(helpers[i].helpx>objs[i6].itx and paused==0)
{
helpers[i].helpx--;
helpers[i].stepsound=1;
}
if(helpers[i].helpy<objs[i6].ity and paused==0)
{
helpers[i].helpy++;
helpers[i].stepsound=1;
}
if(helpers[i].helpy>objs[i6].ity and paused==0)
{
helpers[i].helpy--;
helpers[i].stepsound=1;
}
}
}
for(uint i1=0; i1<animals.length(); i1++)
{
if(animals[i1].amx==helpers[i].helpx and animals[i1].amy==helpers[i].helpy and helpers[i].firetimer.elapsed>=helpers[i].firetime)
{
helpers[i].wepsound=helperpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/helpers/"+helpers[i].helpertype+"/*hit*"),me.x,me.y,helpers[i].helpx,helpers[i].helpy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
animals[i1].hurtsound=animalpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/animals/"+animals[i1].animaltype+"/*hurt*"),me.x,me.y,animals[i1].amx,animals[i1].amy,0,0,0,0,false,0,0,painvolume,painpitch,false);
animals[i1].animalhealth-=helpers[i].damage*helpers[i].helplevel;
helpers[i].firetimer.restart();
}
}
for(uint i2=0; i2<humans.length(); i2++)
{
if(humans[i2].humx==helpers[i].helpx and humans[i2].humy==helpers[i].helpy and helpers[i].firetimer.elapsed>=helpers[i].firetime)
{
helpers[i].wepsound=helperpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/helpers/"+helpers[i].helpertype+"/*hit*"),me.x,me.y,helpers[i].helpx,helpers[i].helpy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
humans[i2].hurtsound=humanpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/humans/"+humans[i2].humantype+"/*hurt*"),me.x,me.y,humans[i2].humx,humans[i2].humy,0,0,0,0,false,0,0,painvolume,painpitch,false);
humans[i2].humanhealth-=helpers[i].damage*helpers[i].helplevel;
helpers[i].firetimer.restart();
}
}
for(uint i3=0; i3<robots.length(); i3++)
{
if(robots[i3].robx==helpers[i].helpx and robots[i3].roby==helpers[i].helpy and helpers[i].firetimer.elapsed>=helpers[i].firetime)
{
helpers[i].wepsound=helperpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/helpers/"+helpers[i].helpertype+"/*hit*"),me.x,me.y,helpers[i].helpx,helpers[i].helpy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
robots[i3].hurtsound=robpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/robots/"+robots[i3].robottype+"/*hurt*"),me.x,me.y,robots[i3].robx,robots[i3].roby,0,0,0,0,false,0,0,painvolume,painpitch,false);
robots[i3].robothealth-=helpers[i].damage*helpers[i].helplevel;
helpers[i].firetimer.restart();
}
}
for(uint i4=0; i4<zombies.length(); i4++)
{
if(zombies[i4].zombx==helpers[i].helpx and zombies[i4].zomby==helpers[i].helpy and helpers[i].firetimer.elapsed>=helpers[i].firetime)
{
helpers[i].wepsound=helperpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/helpers/"+helpers[i].helpertype+"/*hit*"),me.x,me.y,helpers[i].helpx,helpers[i].helpy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
zombies[i4].hurtsound=zombpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/zombies/"+zombies[i4].zombietype+"/*hurt*"),me.x,me.y,zombies[i4].zombx,zombies[i4].zomby,0,0,0,0,false,0,0,painvolume,painpitch,false);
zombies[i4].zombiehealth-=helpers[i].damage*helpers[i].helplevel;
helpers[i].firetimer.restart();
}
}
for(uint i5=0; i5<bosses.length(); i5++)
{
if(bosses[i5].bossx==helpers[i].helpx and bosses[i5].bossy==helpers[i].helpy and helpers[i].firetimer.elapsed>=helpers[i].firetime)
{
helpers[i].wepsound=helperpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/helpers/"+helpers[i].helpertype+"/*hit*"),me.x,me.y,helpers[i].helpx,helpers[i].helpy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
bosses[i5].hurtsound=bosspool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/"+bosses[i5].bosstype+"/*hurt*"),me.x,me.y,bosses[i5].bossx,bosses[i5].bossy,0,0,0,0,false,0,0,painvolume,painpitch,false);
bosses[i5].bosshealth-=helpers[i].damage*helpers[i].helplevel;
helpers[i].firetimer.restart();
}
}
for(uint i6=0; i6<objs.length(); i6++)
{
if(objs[i6].itx==helpers[i].helpx and objs[i6].ity==helpers[i].helpy and helpers[i].firetimer.elapsed>=helpers[i].firetime)
{
objs[i6].getsound=itempool.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/items/unsorted/"+objs[i6].objtype+"/"+objs[i6].objtype2+"/*get*"),false,0,0,itemvolume,itempitch,false);
give(objs[i6].objtype2,1);
speak(objs[i6].objtype2);
objs.remove_at(i);
return;
}
}
if(helpers[i].helperhealth<=0)
{
if(helpers[i].helpercard>=2 and paused==0)
{
helperpool.play_2d(find_sound("sounds/"+soundpack+"/npc/helpers/"+helpers[i].helpertype+"/*life*"),me.x,me.y,helpers[i].helpx,helpers[i].helpy,false);
helpers[i].helperhealth=helpers[i].helphealth;
helpers[i].helpercard-=1;
}
else if(helpers[i].helpercard<=1 and paused==0)
{
helperpool.destroy_sound(helpers[i].hurtsound);
helperpool.destroy_sound(helpers[i].helpersound);
helpers[i].defsound=helperpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/helpers/"+helpers[i].helpertype+"/*death*"),me.x,me.y,helpers[i].helpx,helpers[i].helpy,0,0,0,0,false,0,0,painvolume,painpitch,false);
spawn_bodyfall(helpers[i].helpx, helpers[i].helpy, random(500,1000));
helpers.remove_at(i);
return;
}
}
}
}
void spawn_helper(int x,int y,double hp,double maxhp,int hc,int dm,int firetime,int helpertime,double helplevel,string helpertype)
{
helper hp1(x,y,hp,maxhp,hc,dm,firetime,helpertime,helplevel,helpertype);
helpers.insert_last(hp1);
}
void destroy_all_helpers()
{
for(uint i=0; i<helpers.length(); i++)
{
helperpool.destroy_sound(helpers[i].helpersound);
helpers[i].destsound=helperpool.play_2d(find_sound("sounds/"+soundpack+"/npc/helpers/"+helpers[i].helpertype+"/*remove*"),me.x,me.y,helpers[i].helpx,helpers[i].helpy,false);
}
helpers.resize(0);
}

projectile@[]projectiles(0);
class projectile
{
bool fireable, moveable;
int defsound, hurtsound, projsound, wepsound;
double projlevel;
double poxp;
int projcard;
int projehealth;
double projhealth;
double projmaxhealth;
int prox;
int proy;
int projdir;
int damage;
int firetime=projtime;
int projtime;
string projtype;
timer firetimer, projtimer;
projectile(int px,int py,int dir,double hp,double maxhp,int pc,int dm,int sp,double plv,double pxp,string pt,bool pf,bool pm)
{
this.projehealth=hp;
prox=px;
proy=py;
projdir=dir;
projhealth=hp;
projmaxhealth=maxhp;
projcard=pc;
damage=dm;
projtime=sp;
projlevel=plv;
poxp=pxp;
projtype=pt;
fireable=pf;
moveable=pm;
projsound=projpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/projectiles/"+projtype+"/*loop*"),me.x,me.y,prox,proy,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void projloop()
{
for(uint i=0; i<projectiles.length(); i++)
{
if(projectiles[i].projtimer.elapsed>=projectiles[i].projtime)
{
projpool.update_sound_2d(projectiles[i].projsound,projectiles[i].prox,projectiles[i].proy);
projectiles[i].projtimer.restart();
if(projectiles[i].projdir==1 && projectiles[i].moveable==true && paused==0)
{
if(projectiles[i].prox>=maxx+1 || string_contains(gmt(projectiles[i].prox+1,projectiles[i].proy),"wall",1)>-1 || is_in_safe(projectiles[i].prox+1, projectiles[i].proy))
{
projectiles[i].wepsound=projpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/projectiles/"+projectiles[i].projtype+"/*hit*"),me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
projectiles[i].projdir=0;
}
else 
{
projectiles[i].prox++;
}
}
else if(projectiles[i].projdir==0 && projectiles[i].moveable==true && paused==0)
{
if(projectiles[i].prox<=minx-1 || string_contains(gmt(projectiles[i].prox-1,projectiles[i].proy),"wall",1)>-1 || is_in_safe(projectiles[i].prox-1, projectiles[i].proy))
{
projectiles[i].wepsound=projpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/projectiles/"+projectiles[i].projtype+"/*hit*"),me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
projectiles[i].projdir=1;
}
else 
{
projectiles[i].prox--;
}
}
if(me.x==projectiles[i].prox and me.y==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true and invehicle==false and paused==0)
{
if(melee==true and weapontype=="melee" and wepdef==1)
{
int refchance = random(0, 100);
int refprob = 80;
if(refchance < refprob)
{
weaponslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*block*"),false,0,0,weaponvolume,weaponpitch,false);
}
else
{
if(shieldon==1)
{
if(shieldhitsound==1) shieldslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*"),false,0,0,shieldvolume,shieldpitch,false);
shieldstrength -= (projectiles[i].damage * 0.5) * projectiles[i].projlevel - shielddefence;
}
else
{
projectiles[i].wepsound=projpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/npc/projectiles/"+projectiles[i].projtype+"/*hit*"),false,0,0,weaponvolume,weaponpitch,false);
if(charhurtsound==1) painslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
health -= (projectiles[i].damage * 0.5) * projectiles[i].projlevel - defence;
hearttime -= (projectiles[i].damage * 0.5) * projectiles[i].projlevel - defence;
}
}
}
else if (shieldon == 1)
{
if(shieldhitsound==1) shieldslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*"),false,0,0,shieldvolume,shieldpitch,false);
shieldstrength -= projectiles[i].damage * projectiles[i].projlevel - shielddefence;
}
else
{
projectiles[i].wepsound=projpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/npc/projectiles/"+projectiles[i].projtype+"/*hit*"),false,0,0,weaponvolume,weaponpitch,false);
if(charhurtsound==1) painslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
health -= projectiles[i].damage * projectiles[i].projlevel - defence;
hearttime -= projectiles[i].damage * projectiles[i].projlevel - defence;
}
projectiles[i].firetimer.restart();
}
for(uint i1=0; i1<animals.length(); i1++)
{
if(animals[i1].amx==projectiles[i].prox and animals[i1].amy==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true)
{
projectiles[i].wepsound=projpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/projectiles/"+projectiles[i].projtype+"/*hit*"),me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
animals[i1].hurtsound=animalpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/animals/"+animals[i1].animaltype+"/*hurt*"),me.x,me.y,animals[i1].amx,animals[i1].amy,0,0,0,0,false,0,0,painvolume,painpitch,false);
animals[i1].animalhealth-=projectiles[i].damage;
projectiles[i].firetimer.restart();
}
}
for(uint i2=0; i2<humans.length(); i2++)
{
if(humans[i2].humx==projectiles[i].prox and humans[i2].humy==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true)
{
projectiles[i].wepsound=projpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/projectiles/"+projectiles[i].projtype+"/*hit*"),me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
humans[i2].hurtsound=humanpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/humans/"+humans[i2].humantype+"/*hurt*"),me.x,me.y,humans[i2].humx,humans[i2].humy,0,0,0,0,false,0,0,painvolume,painpitch,false);
humans[i2].humanhealth-=projectiles[i].damage;
projectiles[i].firetimer.restart();
}
}
for(uint i3=0; i3<robots.length(); i3++)
{
if(robots[i3].robx==projectiles[i].prox and robots[i3].roby==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true)
{
projectiles[i].wepsound=projpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/projectiles/"+projectiles[i].projtype+"/*hit*"),me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
robots[i3].hurtsound=robpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/robots/"+robots[i3].robottype+"/*hurt*"),me.x,me.y,robots[i3].robx,robots[i3].roby,0,0,0,0,false,0,0,painvolume,painpitch,false);
robots[i3].robothealth-=projectiles[i].damage;
projectiles[i].firetimer.restart();
}
}
for(uint i4=0; i4<zombies.length(); i4++)
{
if(zombies[i4].zombx==projectiles[i].prox and zombies[i4].zomby==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true)
{
projectiles[i].wepsound=projpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/projectiles/"+projectiles[i].projtype+"/*hit*"),me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
zombies[i4].hurtsound=zombpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/zombies/"+zombies[i4].zombietype+"/*hurt*"),me.x,me.y,zombies[i4].zombx,zombies[i4].zomby,0,0,0,0,false,0,0,painvolume,painpitch,false);
zombies[i4].zombiehealth-=projectiles[i].damage;
projectiles[i].firetimer.restart();
}
}
for(uint i5=0; i5<vehicles.length(); i5++)
{
if(vehicles[i5].vehx==projectiles[i].prox and vehicles[i5].vehy==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true and invehicle==true)
{
vehicles[i5].hurtsound=vehpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/objects/vehicles/"+vehicles[i5].vehtype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
vehicles[i5].vehhealth-=projectiles[i].damage;
projectiles[i].firetimer.restart();
}
}
for(uint i6=0; i6<objs.length(); i6++)
{
if(objs[i6].itx==projectiles[i].prox and objs[i6].ity==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true)
{
projectiles[i].wepsound=projpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/projectiles/"+projectiles[i].projtype+"/*hit*"),me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
objs[i6].hurtsound=itempool.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/items/unsorted/"+objs[i6].objtype+"/"+objs[i6].objtype2+"/*break*"),me.x,me.y,objs[i6].itx,objs[i6].ity,0,0,0,0,false,0,0,itemvolume,itempitch,false);
projectiles[i].firetimer.restart();
objs.remove_at(i6);
return;
}
}
if(projectiles[i].projhealth<=0)
{
if(projectiles[i].projcard>=2 and paused==0)
{
projpool.play_2d(find_sound("sounds/"+soundpack+"/npc/projectiles/"+projectiles[i].projtype+"/*life*"),me.x,me.y,projectiles[i].prox,projectiles[i].proy,false);
projectiles[i].projhealth=projectiles[i].projehealth;
projectiles[i].projcard-=1;
}
else if(projectiles[i].projcard<=1 and paused==0)
{
projpool.destroy_sound(projectiles[i].hurtsound);
projpool.destroy_sound(projectiles[i].projsound);
projectiles[i].defsound=projpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/projectiles/"+projectiles[i].projtype+"/*death*"),me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=projectiles[i].poxp*projectiles[i].projlevel*xpmod;
kills+=1;
if(charkillsound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*kill*"),false);
projectiles.remove_at(i);
return;
}
}
}
}
}
void spawn_projectile(int x,int y,int dir,double hp,double maxhp,int pc,int dm,int projtime,double projlevel,double xp,string projtype,bool fireable,bool moveable)
{
projectile p1(x,y,dir,hp,maxhp,pc,dm,projtime,projlevel,xp,projtype,fireable,moveable);
projectiles.insert_last(p1);
}
void destroy_all_projectiles()
{
for(uint i=0; i<projectiles.length(); i++)
{
projpool.destroy_sound(projectiles[i].projsound);
}
projectiles.resize(0);
}

robot@[]robots(0);
class robot
{
bool dropitem, fireable, moveable, moveable2, spotted;
int robsound, defsound, hurtsound, stepsound, spawnsound, tilesound, wepsound;
int robotcard;
int robhealth;
double roblevel;
double robxp;
double robothealth;
double robotmaxhealth;
int robx;
int roby;
int roborange;
int roborange2;
int roborange3;
int roborange4;
int damage;
int robottime;
int firetime;
string robottype;
timer robottimer, firetimer;
robot(int rx,int ry,int rbrange,int rbrange2,int rbrange3,int rbrange4,double hp,double maxhp,int rc,int dm,int ft,int sp,double roblv,double rxp,string rt,bool robf,bool robt,bool robt2,bool dpm)
{
this.robhealth=hp;
robx=rx;
roby=ry;
roborange=rbrange;
roborange2=rbrange2;
roborange3=rbrange3;
roborange4=rbrange4;
robothealth=hp;
robotmaxhealth=maxhp;
robotcard=rc;
damage=dm;
firetime=ft;
robottime=sp;
roblevel=roblv;
robxp=rxp;
robottype=rt;
fireable=robf;
moveable=robt;
moveable2=robt2;
dropitem=dpm;
spawnsound=robpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/robots/"+robottype+"/*spawn*"),me.x,me.y,robx,roby,0,0,0,0,false,0,0,painvolume,painpitch,false);
robsound=robpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/robots/"+robottype+"/*taunt*"),me.x,me.y,robx,roby,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void robloop()
{
for(uint i=0; i<robots.length(); i++)
{
if(robots[i].robottimer.elapsed>=robots[i].robottime)
{
bool within_horizontal_range = absolute(me.x - robots[i].robx) <= robots[i].roborange3;
bool within_vertical_range = absolute(me.y - robots[i].roby) <= robots[i].roborange4;
robots[i].spotted = within_horizontal_range && within_vertical_range;
if(robots[i].spotted)
{
bool moved = false;
if(robots[i].robx<me.x && robots[i].moveable==true && paused==0)
{
if (string_contains(gmt(robots[i].robx+1, robots[i].roby), "wall", 1) > -1 or is_in_safe(robots[i].robx+1, robots[i].roby))
{
robots[i].robx--;
moved = true;
}
else
{
robots[i].robx++;
moved = true;
}
}
else if(robots[i].robx>me.x && robots[i].moveable==true && paused==0)
{
if (string_contains(gmt(robots[i].robx-1, robots[i].roby), "wall", 1) > -1 or is_in_safe(robots[i].robx-1, robots[i].roby))
{
robots[i].robx++;
moved = true;
}
else
{
robots[i].robx--;
moved = true;
}
}
if(robots[i].roby<me.y && robots[i].moveable2==true && paused==0)
{
if (string_contains(gmt(robots[i].robx, robots[i].roby+1), "wall", 1) > -1 or is_in_safe(robots[i].robx, robots[i].roby+1))
{
robots[i].roby--;
moved = true;
}
else
{
robots[i].roby++;
moved = true;
}
}
else if(robots[i].roby>me.y && robots[i].moveable2==true && paused==0)
{
if (string_contains(gmt(robots[i].robx, robots[i].roby-1), "wall", 1) > -1 or is_in_safe(robots[i].robx, robots[i].roby-1))
{
robots[i].roby++;
moved = true;
}
else
{
robots[i].roby--;
moved = true;
}
}
if (moved)
{
robots[i].tilesound = robpool.play_extended_2d(find_sound("sounds/" + soundpack + "/npc/robots/" + robots[i].robottype + "/*step*"),me.x, me.y, robots[i].robx, robots[i].roby, 0, 0, 0, 0, false, 0, 0, tilevolume, tilepitch, false);
robots[i].stepsound = 1;
}
else
{
robots[i].stepsound = 0;
}
robpool.update_sound_2d(robots[i].robsound, robots[i].robx, robots[i].roby);
robots[i].robottimer.restart();
}
}
if(absolute(me.x-robots[i].robx)<=robots[i].roborange and absolute(me.y-robots[i].roby)<=robots[i].roborange2 and robots[i].firetimer.elapsed>=robots[i].firetime and robots[i].fireable==true and invehicle==false and paused==0)
{
robots[i].stepsound=0;
if(melee==true and weapontype=="melee" and wepdef==1)
{
int refchance = random(0, 100);
int refprob = 80;
if(refchance < refprob)
{
weaponslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*block*"),false,0,0,weaponvolume,weaponpitch,false);
}
else
{
if(shieldon==1)
{
if(shieldhitsound==1) shieldslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*"),false,0,0,shieldvolume,shieldpitch,false);
shieldstrength -= (robots[i].damage * 0.5) * robots[i].roblevel - shielddefence;
}
else
{
robots[i].wepsound=robpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/npc/robots/"+robots[i].robottype+"/*hit*"),false,0,0,weaponvolume,weaponpitch,false);
if(charhurtsound==1) painslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
health -= (robots[i].damage * 0.5) * robots[i].roblevel - defence;
hearttime -= (robots[i].damage * 0.5) * robots[i].roblevel - defence;
}
}
}
else if (shieldon == 1)
{
if(shieldhitsound==1) shieldslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*"),false,0,0,shieldvolume,shieldpitch,false);
shieldstrength -= robots[i].damage * robots[i].roblevel - shielddefence;
}
else
{
robots[i].wepsound=robpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/npc/robots/"+robots[i].robottype+"/*hit*"),false,0,0,weaponvolume,weaponpitch,false);
if(charhurtsound==1) painslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
health -= robots[i].damage * robots[i].roblevel - defence;
hearttime -= robots[i].damage * robots[i].roblevel - defence;
}
robots[i].firetimer.restart();
}
for(uint i1=0; i1<objs.length(); i1++)
{
if(objs[i1].itx==robots[i].robx and objs[i1].ity==robots[i].roby and robots[i].firetimer.elapsed>=robots[i].firetime and robots[i].fireable==true)
{
robots[i].wepsound=robpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/robots/"+robots[i].robottype+"/*hit*"),me.x,me.y,robots[i].robx,robots[i].roby,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
itempool.destroy_sound(objs[i1].objsound);
objs[i1].hurtsound=itempool.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/items/unsorted/"+objs[i1].objtype+"/"+objs[i1].objtype2+"/*break*"),me.x,me.y,objs[i1].itx,objs[i1].ity,0,0,0,0,false,0,0,itemvolume,itempitch,false);
robots[i].firetimer.restart();
objs.remove_at(i1);
return;
}
}
for(uint i2=0; i2<vehicles.length(); i2++)
{
if(vehicles[i2].vehx==robots[i].robx and vehicles[i2].vehy==robots[i].roby and robots[i].firetimer.elapsed>=robots[i].firetime and robots[i].fireable==true and invehicle==true)
{
vehicles[i2].hurtsound=vehpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/objects/vehicles/"+vehicles[i2].vehtype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
vehicles[i2].vehhealth-=robots[i].damage;
robots[i].firetimer.restart();
}
}
if(robots[i].robothealth<=0)
{
if(robots[i].robotcard>=2 and paused==0)
{
robpool.play_2d(find_sound("sounds/"+soundpack+"/npc/robots/"+robots[i].robottype+"/*life*"),me.x,me.y,robots[i].robx,robots[i].roby,false);
robots[i].robothealth=robots[i].robhealth;
robots[i].robotcard-=1;
}
else if(robots[i].robotcard<=1 and paused==0)
{
robpool.destroy_sound(robots[i].hurtsound);
robpool.destroy_sound(robots[i].robsound);
robots[i].defsound=robpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/robots/"+robots[i].robottype+"/*death*"),me.x,me.y,robots[i].robx,robots[i].roby,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=robots[i].robxp*robots[i].roblevel*xpmod;
kills+=1;
spawn_bodyfall(robots[i].robx, robots[i].roby, random(500,1000));
string[] healtype=find_directories("sounds/"+soundpack+"/equipments/items/unsorted/health/*");
if(healtype.length()!=0 and robots[i].dropitem==true) spawn_obj(robots[i].robx, robots[i].roby, 500, "health", random_string(healtype), true);
if(charkillsound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*kill*"),false);
robots.remove_at(i);
return;
}
}
}
}
void spawn_robot(int x,int y,int robotrange,int robotrange2,int robotrange3,int robotrange4,double hp,double maxhp,int rc,int dm,int firetime,int robottime,double roblevel,double xp,string robottype,bool fireable,bool moveable,bool moveable2,bool dropitem)
{
robot rb1(x,y,robotrange,robotrange2,robotrange3,robotrange4,hp,maxhp,rc,dm,firetime,robottime,roblevel,xp,robottype,fireable,moveable,moveable2,dropitem);
robots.insert_last(rb1);
}
void destroy_all_robots()
{
for(uint i=0; i<robots.length(); i++)
{
robpool.destroy_sound(robots[i].robsound);
}
robots.resize(0);
}

turret@[]turrets(0);
class turret
{
bool fireable, moveable, moveable2;
int defsound, firesound, hurtsound, tursound, wepsound;
double turlevel;
double turxp;
int turcard;
int turehealth;
double turhealth;
double turmaxhealth;
int turx;
int tury;
int damage;
int firetime;
int launchtime;
int turtime;
string turtype;
string turtype2;
string turtype3;
timer firetimer, launchtimer, turtimer;
turret(int tx,int ty,double hp,double maxhp,int tc,int dm,int ft,int lt,int sp,double tlv,double txp,string tt,string ts,string ts2,bool tf,bool tm,bool tm2)
{
this.turehealth=hp;
turx=tx;
tury=ty;
turhealth=hp;
turmaxhealth=maxhp;
turcard=tc;
damage=dm;
firetime=ft;
launchtime=lt;
turtime=sp;
turlevel=tlv;
turxp=txp;
turtype=tt;
turtype2=ts;
turtype3=ts2;
fireable=tf;
moveable=tm;
moveable2=tm2;
tursound=turpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/turrets/"+turtype+"/*loop*"),me.x,me.y,turx,tury,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void turretloop()
{
for(uint i=0; i<turrets.length(); i++)
{
if(turrets[i].launchtimer.elapsed>=turrets[i].launchtime)
{
if(facing=="left" or facing=="right") turrets[i].firesound=turpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/turrets/"+turrets[i].turtype+"/*launch*"),me.x,me.y,turrets[i].turx,turrets[i].tury,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
if(turrets[i].turtype2=="animal" and facing=="left") spawn_animal(turrets[i].turx-1, turrets[i].tury, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, random_bool(), random_bool());
if(turrets[i].turtype2=="animal" and facing=="right") spawn_animal(turrets[i].turx+1, turrets[i].tury, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, random_bool(), random_bool());
if(turrets[i].turtype2=="human" and facing=="left") spawn_human(turrets[i].turx-1, turrets[i].tury, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, random_bool(), random_bool());
if(turrets[i].turtype2=="human" and facing=="right") spawn_human(turrets[i].turx+1, turrets[i].tury, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, random_bool(), random_bool());
if(turrets[i].turtype2=="projectile" and facing=="left") spawn_projectile(turrets[i].turx-1, turrets[i].tury, 0, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(50, 500), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true);
if(turrets[i].turtype2=="projectile" and facing=="right") spawn_projectile(turrets[i].turx+1, turrets[i].tury, 1, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(50, 500), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true);
if(turrets[i].turtype2=="robot" and facing=="left") spawn_robot(turrets[i].turx-1, turrets[i].tury, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, random_bool(), random_bool());
if(turrets[i].turtype2=="robot" and facing=="right") spawn_robot(turrets[i].turx+1, turrets[i].tury, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, random_bool(), random_bool());
if(turrets[i].turtype2=="zombie" and facing=="left") spawn_zombie(turrets[i].turx-1, turrets[i].tury, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, random_bool(), random_bool());
if(turrets[i].turtype2=="zombie" and facing=="right") spawn_zombie(turrets[i].turx+1, turrets[i].tury, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, random_bool(), random_bool());
turpool.update_sound_2d(turrets[i].firesound,turrets[i].turx,turrets[i].tury);
turrets[i].launchtimer.restart();
}
if(turrets[i].turtimer.elapsed>=turrets[i].turtime)
{
turpool.update_sound_2d(turrets[i].tursound,turrets[i].turx,turrets[i].tury);
turrets[i].turtimer.restart();
if(turrets[i].turx<me.x and turrets[i].moveable==true and paused==0)
{
turrets[i].turx++;
}
if(turrets[i].turx>me.x and turrets[i].moveable==true and paused==0)
{
turrets[i].turx--;
}
if(turrets[i].tury<me.y and turrets[i].moveable2==true and paused==0)
{
turrets[i].tury++;
}
if(turrets[i].tury>me.y and turrets[i].moveable2==true and paused==0)
{
turrets[i].tury--;
}
}
if(me.x==turrets[i].turx and me.y==turrets[i].tury and turrets[i].firetimer.elapsed>=turrets[i].firetime and turrets[i].fireable==true and invehicle==false and paused==0)
{
if(melee==true and weapontype=="melee" and wepdef==1)
{
int refchance = random(0, 100);
int refprob = 80;
if(refchance < refprob)
{
weaponslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*block*"),false,0,0,weaponvolume,weaponpitch,false);
}
else
{
if(shieldon==1)
{
if(shieldhitsound==1) shieldslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*"),false,0,0,shieldvolume,shieldpitch,false);
shieldstrength -= (turrets[i].damage * 0.5) * turrets[i].turlevel - shielddefence;
}
else
{
turrets[i].wepsound=turpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/npc/turrets/"+turrets[i].turtype+"/*hit*"),false,0,0,weaponvolume,weaponpitch,false);
if(charhurtsound==1) painslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
health -= (turrets[i].damage * 0.5) * turrets[i].turlevel - defence;
hearttime -= (turrets[i].damage * 0.5) * turrets[i].turlevel - defence;
}
}
}
else if (shieldon == 1)
{
if(shieldhitsound==1) shieldslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*"),false,0,0,shieldvolume,shieldpitch,false);
shieldstrength -= turrets[i].damage * turrets[i].turlevel - shielddefence;
}
else
{
turrets[i].wepsound=turpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/npc/turrets/"+turrets[i].turtype+"/*hit*"),false,0,0,weaponvolume,weaponpitch,false);
if(charhurtsound==1) painslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
health -= turrets[i].damage * turrets[i].turlevel - defence;
hearttime -= turrets[i].damage * turrets[i].turlevel - defence;
}
turrets[i].firetimer.restart();
}
for(uint i1=0; i1<objs.length(); i1++)
{
if(objs[i1].itx==turrets[i].turx and objs[i1].ity==turrets[i].tury and turrets[i].firetimer.elapsed>=turrets[i].firetime and turrets[i].fireable==true)
{
turrets[i].wepsound=turpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/turrets/"+turrets[i].turtype+"/*hit*"),me.x,me.y,turrets[i].turx,turrets[i].tury,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
itempool.destroy_sound(objs[i1].objsound);
objs[i1].hurtsound=itempool.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/items/unsorted/"+objs[i1].objtype+"/"+objs[i1].objtype2+"/*break*"),me.x,me.y,objs[i1].itx,objs[i1].ity,0,0,0,0,false,0,0,itemvolume,itempitch,false);
turrets[i].firetimer.restart();
objs.remove_at(i1);
return;
}
}
for(uint i2=0; i2<vehicles.length(); i2++)
{
if(vehicles[i2].vehx==turrets[i].turx and vehicles[i2].vehy==turrets[i].tury and turrets[i].firetimer.elapsed>=turrets[i].firetime and turrets[i].fireable==true and invehicle==true)
{
vehicles[i2].hurtsound=vehpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/objects/vehicles/"+vehicles[i2].vehtype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
vehicles[i2].vehhealth-=turrets[i].damage;
turrets[i].firetimer.restart();
}
}
if(turrets[i].turhealth<=0)
{
if(turrets[i].turcard>=2 and paused==0)
{
turpool.play_2d(find_sound("sounds/"+soundpack+"/npc/turrets/"+turrets[i].turtype+"/*life*"),me.x,me.y,turrets[i].turx,turrets[i].tury,false);
turrets[i].turhealth=turrets[i].turehealth;
turrets[i].turcard-=1;
}
else if(turrets[i].turcard<=1 and paused==0)
{
turpool.destroy_sound(turrets[i].hurtsound);
turpool.destroy_sound(turrets[i].tursound);
turrets[i].defsound=turpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/turrets/"+turrets[i].turtype+"/*death*"),me.x,me.y,turrets[i].turx,turrets[i].tury,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=turrets[i].turxp*turrets[i].turlevel*xpmod;
kills+=1;
if(charkillsound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*kill*"),false);
turrets.remove_at(i);
return;
}
}
}
}
void spawn_turret(int x,int y,double hp,double maxhp,int tc,int dm,int firetime,int launchtime,int turtime,double turlevel,double xp,string turtype,string turtype2,string turtype3,bool fireable,bool moveable,bool moveable2)
{
turret t1(x,y,hp,maxhp,tc,dm,firetime,launchtime,turtime,turlevel,xp,turtype,turtype2,turtype3,fireable,moveable,moveable2);
turrets.insert_last(t1);
}
void destroy_all_turrets()
{
for(uint i=0; i<turrets.length(); i++)
{
turpool.destroy_sound(turrets[i].tursound);
}
turrets.resize(0);
}

zombie@[]zombies(0);
class zombie
{
bool dropitem, fireable, moveable, moveable2, spotted;
int zombsound, defsound, hurtsound, stepsound, spawnsound, tilesound, wepsound;
int zombiecard;
int zombhealth;
double zomblevel;
double zombxp;
double zombiehealth;
double zombiemaxhealth;
int zombx;
int zomby;
int zombirange;
int zombirange2;
int zombirange3;
int zombirange4;
int damage;
int zombietime;
int firetime;
string zombietype;
timer zombietimer, firetimer;
zombie(int zx,int zy,int zbrange,int zbrange2,int zbrange3,int zbrange4,double hp,double maxhp,int zc,int dm,int ft,int sp,double zomblv,double zxp,string zt,bool zombf,bool zombt,bool zombt2,bool dpm)
{
this.zombhealth=hp;
zombx=zx;
zomby=zy;
zombirange=zbrange;
zombirange2=zbrange2;
zombirange3=zbrange3;
zombirange4=zbrange4;
zombiehealth=hp;
zombiemaxhealth=maxhp;
zombiecard=zc;
damage=dm;
firetime=ft;
zombietime=sp;
zomblevel=zomblv;
zombxp=zxp;
zombietype=zt;
fireable=zombf;
moveable=zombt;
moveable2=zombt2;
dropitem=dpm;
spawnsound=zombpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/zombies/"+zombietype+"/*spawn*"),me.x,me.y,zombx,zomby,0,0,0,0,false,0,0,painvolume,painpitch,false);
zombsound=zombpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/zombies/"+zombietype+"/*taunt*"),me.x,me.y,zombx,zomby,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void zombloop()
{
for(uint i=0; i<zombies.length(); i++)
{
if(zombies[i].zombietimer.elapsed>=zombies[i].zombietime)
{
bool within_horizontal_range = absolute(me.x - zombies[i].zombx) <= zombies[i].zombirange3;
bool within_vertical_range = absolute(me.y - zombies[i].zomby) <= zombies[i].zombirange4;
zombies[i].spotted = within_horizontal_range && within_vertical_range;
if(zombies[i].spotted)
{
bool moved = false;
if(zombies[i].zombx<me.x && zombies[i].moveable==true && paused==0)
{
if (string_contains(gmt(zombies[i].zombx+1, zombies[i].zomby), "wall", 1) > -1 or is_in_safe(zombies[i].zombx+1, zombies[i].zomby))
{
zombies[i].zombx--;
moved = true;
}
else
{
zombies[i].zombx++;
moved = true;
}
}
else if(zombies[i].zombx>me.x && zombies[i].moveable==true && paused==0)
{
if (string_contains(gmt(zombies[i].zombx-1, zombies[i].zomby), "wall", 1) > -1 or is_in_safe(zombies[i].zombx-1, zombies[i].zomby))
{
zombies[i].zombx++;
moved = true;
}
else
{
zombies[i].zombx--;
moved = true;
}
}
if(zombies[i].zomby<me.y && zombies[i].moveable2==true && paused==0)
{
if (string_contains(gmt(zombies[i].zombx, zombies[i].zomby+1), "wall", 1) > -1 or is_in_safe(zombies[i].zombx, zombies[i].zomby+1))
{
zombies[i].zomby--;
moved = true;
}
else
{
zombies[i].zomby++;
moved = true;
}
}
else if(zombies[i].zomby>me.y && zombies[i].moveable2==true && paused==0)
{
if (string_contains(gmt(zombies[i].zombx, zombies[i].zomby-1), "wall", 1) > -1 or is_in_safe(zombies[i].zombx, zombies[i].zomby-1))
{
zombies[i].zomby++;
moved = true;
}
else
{
zombies[i].zomby--;
moved = true;
}
}
if (moved)
{
zombies[i].tilesound = zombpool.play_extended_2d(find_sound("sounds/" + soundpack + "/npc/zombies/" + zombies[i].zombietype + "/*step*"),me.x, me.y, zombies[i].zombx, zombies[i].zomby, 0, 0, 0, 0, false, 0, 0, tilevolume, tilepitch, false);
zombies[i].stepsound = 1;
}
else
{
zombies[i].stepsound = 0;
}
zombpool.update_sound_2d(zombies[i].zombsound, zombies[i].zombx, zombies[i].zomby);
zombies[i].zombietimer.restart();
}
}
if(absolute(me.x-zombies[i].zombx)<=zombies[i].zombirange and absolute(me.y-zombies[i].zomby)<=zombies[i].zombirange2 and zombies[i].firetimer.elapsed>=zombies[i].firetime and zombies[i].fireable==true and invehicle==false and paused==0)
{
zombies[i].stepsound=0;
if(melee==true and weapontype=="melee" and wepdef==1)
{
int refchance = random(0, 100);
int refprob = 80;
if(refchance < refprob)
{
weaponslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*block*"),false,0,0,weaponvolume,weaponpitch,false);
}
else
{
if(shieldon==1)
{
if(shieldhitsound==1) shieldslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*"),false,0,0,shieldvolume,shieldpitch,false);
shieldstrength -= (zombies[i].damage * 0.5) * zombies[i].zomblevel - shielddefence;
}
else
{
zombies[i].wepsound=zombpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/npc/zombies/"+zombies[i].zombietype+"/*hit*"),false,0,0,weaponvolume,weaponpitch,false);
if(charhurtsound==1) painslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
int dmg = (zombies[i].damage * 0.5) * zombies[i].zomblevel - defence;
health -= dmg;
hearttime -= dmg;
int ct = clamp(dmg * 2, 0, 100);
int count = clamp(dmg / 15, 1, 5);
break_charbones(ct, dmg, 1 * dmg, count);
}
}
}
else if (shieldon == 1)
{
if(shieldhitsound==1) shieldslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*"),false,0,0,shieldvolume,shieldpitch,false);
shieldstrength -= zombies[i].damage * zombies[i].zomblevel - shielddefence;
}
else
{
zombies[i].wepsound=zombpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/npc/zombies/"+zombies[i].zombietype+"/*hit*"),false,0,0,weaponvolume,weaponpitch,false);
if(charhurtsound==1) painslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
int dmg = zombies[i].damage * zombies[i].zomblevel - defence;
health -= dmg;
hearttime -= dmg;
int ct = clamp(dmg * 2, 0, 100);
int count = clamp(dmg / 15, 1, 5);
break_charbones(ct, dmg, 1 * dmg, count);
}
zombies[i].firetimer.restart();
}
for(uint i1=0; i1<objs.length(); i1++)
{
if(objs[i1].itx==zombies[i].zombx and objs[i1].ity==zombies[i].zomby and zombies[i].firetimer.elapsed>=zombies[i].firetime and zombies[i].fireable==true)
{
zombies[i].wepsound=turpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/zombies/"+zombies[i].zombietype+"/*hit*"),me.x,me.y,zombies[i].zombx,zombies[i].zomby,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
itempool.destroy_sound(objs[i1].objsound);
objs[i1].hurtsound=itempool.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/items/unsorted/"+objs[i1].objtype+"/"+objs[i1].objtype2+"/*break*"),me.x,me.y,objs[i1].itx,objs[i1].ity,0,0,0,0,false,0,0,itemvolume,itempitch,false);
zombies[i].firetimer.restart();
objs.remove_at(i1);
return;
}
}
for(uint i2=0; i2<vehicles.length(); i2++)
{
if(vehicles[i2].vehx==zombies[i].zombx and vehicles[i2].vehy==zombies[i].zomby and zombies[i].firetimer.elapsed>=zombies[i].firetime and zombies[i].fireable==true and invehicle==true)
{
vehicles[i2].hurtsound=vehpool.play_stationary_extended(find_sound("sounds/"+soundpack+"/objects/vehicles/"+vehicles[i2].vehtype+"/*hurt*"),false,0,0,painvolume,painpitch,false);
vehicles[i2].vehhealth-=zombies[i].damage;
zombies[i].firetimer.restart();
}
}
if(zombies[i].zombiehealth<=0)
{
if(zombies[i].zombiecard>=2 and paused==0)
{
zombpool.play_2d(find_sound("sounds/"+soundpack+"/npc/zombies/"+zombies[i].zombietype+"/*life*"),me.x,me.y,zombies[i].zombx,zombies[i].zomby,false);
zombies[i].zombiehealth=zombies[i].zombhealth;
zombies[i].zombiecard-=1;
}
else if(zombies[i].zombiecard<=1 and paused==0)
{
zombpool.destroy_sound(zombies[i].hurtsound);
zombpool.destroy_sound(zombies[i].zombsound);
zombies[i].defsound=zombpool.play_extended_2d(find_sound("sounds/"+soundpack+"/npc/zombies/"+zombies[i].zombietype+"/*death*"),me.x,me.y,zombies[i].zombx,zombies[i].zomby,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=zombies[i].zombxp*zombies[i].zomblevel*xpmod;
kills+=1;
spawn_bodyfall(zombies[i].zombx, zombies[i].zomby, random(500,1000));
string[] healtype=find_directories("sounds/"+soundpack+"/equipments/items/unsorted/health/*");
if(healtype.length()!=0 and zombies[i].dropitem==true) spawn_obj(zombies[i].zombx, zombies[i].zomby, 500, "health", random_string(healtype), true);
if(charkillsound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*kill*"),false);
zombies.remove_at(i);
return;
}
}
}
}
void spawn_zombie(int x,int y,int zombierange,int zombierange2,int zombierange3,int zombierange4,double hp,double maxhp,int zc,int dm,int firetime,int zombietime,double zomblevel,double xp,string zombietype,bool fireable,bool moveable,bool moveable2,bool dropitem)
{
zombie zb1(x,y,zombierange,zombierange2,zombierange3,zombierange4,hp,maxhp,zc,dm,firetime,zombietime,zomblevel,xp,zombietype,fireable,moveable,moveable2,dropitem);
zombies.insert_last(zb1);
}
void destroy_all_zombies()
{
for(uint i=0; i<zombies.length(); i++)
{
zombpool.destroy_sound(zombies[i].zombsound);
}
zombies.resize(0);
}
