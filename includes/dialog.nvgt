dialog@[] dialogs(0);
class dialog
{
bool automatic;
double minx, maxx, miny, maxy;
string text;
string dlgtype;
dialog(double mx,double mx2,double my,double my2,string txt,string dlt,bool acl)
{
minx=mx;
maxx=mx2;
miny=my;
maxy=my2;dlgtype=dlt;
text=txt;
dlgtype=dlt;
automatic=acl;
}
}
void dlgloop()
{
for(uint i=0; i<dialogs.length(); i++)
{
if(dialogs[i].minx<=me.x and dialogs[i].maxx>=me.x and dialogs[i].miny<=me.y and dialogs[i].maxy>=me.y and dialogs[i].automatic==true)
{
pause_pools();
dlgmessage(dialogs[i].text);
dialogs[i].automatic=false;
resume_pools();
}
if(dialogs[i].minx<=me.x and dialogs[i].maxx>=me.x and dialogs[i].miny<=me.y and dialogs[i].maxy>=me.y and dialogs[i].automatic==false and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and key_repeating(KEY_RETURN))
{
pause_pools();
dlgmessage(dialogs[i].text);
resume_pools();
}
}
}
void spawn_dialog(double x1,double x2,double y1,double y2,string text,string dlgtype,bool automatic)
{
dialog dlg1(x1,x2,y1,y2,text,dlgtype,automatic);
dialogs.insert_last(dlg1);
}
void destroy_all_dialogs()
{
dialogs.resize(0);
}

bool dlg(string message, bool dlgcoppy=true, int timeout=-1)
{
timer timeouter;
speak(message);
while(true)
{
wait(5);
if (timeout>-1 and timeouter.elapsed>=timeout)
return false;
if (key_repeating(KEY_C) and dlgcoppy==true)
{
temp.destroy_all();
temp.play_stationary(find_sound("sounds/"+soundpack+"/dialogs/"+dlgtyp+"/*copy*"),false);
speak("Text copied");
clipboard_copy_text(message);
}
if (key_repeating(KEY_LEFT) or key_repeating(KEY_RIGHT) or key_repeating(KEY_UP) or key_repeating(KEY_DOWN))
{
speak(message);
}
if (key_repeating(KEY_ESCAPE))
{
temp.destroy_all();
return true;
}
if(key_repeating(KEY_RETURN) or key_down(KEY_A))
{
temp.destroy_all();
break;
}
}
return false;
}
void dlgmessage(string messages)
{
temp.play_stationary(find_sound("sounds/"+soundpack+"/dialogs/"+dlgtyp+"/*open*"),false);
string[] d = string_split(messages, "--", true);
bool escaped = dlg(d[0]);
if (escaped)
{
temp.play_stationary(find_sound("sounds/"+soundpack+"/dialogs/"+dlgtyp+"/*close*"),false);
return;
}
for (uint i = 1; i < d.length(); i++)
{
temp.play_stationary(find_sound("sounds/"+soundpack+"/dialogs/"+dlgtyp+"/*scroll*"),false);
escaped = dlg(d[i]);
if (escaped)
{
temp.play_stationary(find_sound("sounds/"+soundpack+"/dialogs/"+dlgtyp+"/*close*"),false);
return;
}
}
temp.play_stationary(find_sound("sounds/"+soundpack+"/dialogs/"+dlgtyp+"/*close*"),false);
}
void dlg_snd(string message, string dlgsound="error.ogg", bool dlgcoppy=true, int timeout=-1)
{
timer timeouter;
temp.play_stationary(dlgsound, false);
speak(message);
while(true)
{
wait(5);
if (timeout>-1 and timeouter.elapsed>=timeout)
return;
if (key_repeating(KEY_C) and dlgcoppy==true)
{
temp.destroy_all();
temp.play_stationary(find_sound("sounds/"+soundpack+"/dialogs/"+dlgtyp+"/*copy*"),false);
speak("Copied");
clipboard_copy_text(message);
}
if (key_repeating(KEY_LEFT) or key_repeating(KEY_RIGHT) or key_repeating(KEY_UP) or key_repeating(KEY_DOWN))
{
speak(message);
}
if(key_repeating(KEY_RETURN) or key_down(KEY_A))
{
temp.destroy_all();
break;
}
}
}
void dlgplay(string dlgsound, bool skippable=true, bool fadeable=true, int fadetime=30)
{
sound dlgaudio;
dlgaudio.load(dlgsound);
dlgaudio.play();
while(dlgaudio.playing)
{
wait(5);
if(key_repeating(KEY_RETURN) and skippable==true or key_down(KEY_A) and skippable==true)
{
if (fadeable==true)
{
while (dlgaudio.volume>=-40)
{
dlgaudio.volume=dlgaudio.volume-2;
wait(fadetime);
}
}
dlgaudio.stop();
break;
}
}
}
