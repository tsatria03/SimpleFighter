character@[]charas(0);
class character
{
string weapontype;
string weapontype2;
string shieldtype;
int shieldweight;
double attack;
double defence;
double points;
double fallmod;
double health;
double maxhealth;
double kills;
double lifecard;
double level;
double levmod;
double xp;
double xpmod;
double xprequiered;
int charbuysound;
int charbreaksound;
int charcamsound;
int charcamsound2;
int charcamsound3;
int chardeathsound;
int charfallsound;
int charfallsound2;
int charhurtsound;
int charhealsound;
int charhealsound2;
int charhealsound3;
int charinvsound;
int charjumpsound;
int charjumpsound2;
int charkillsound;
int charlandsound;
int charlevsound;
int charlifesound;
int charmovesound;
int charshakesound;
int charsitsound;
int charstandsound;
int charswingsound;
int chartelsound;
int chartelsound2;
int chartelsound3;
int charturnsound;
character(const string&in weapontype,const string&in weapontype2,const string&in shieldtype,int shieldweight,double attack,double defence,double points,double fallmod,double health,double maxhealth,double kills,double lifecard,double level,double levmod,double xp,double xpmod,double xprequiered,int charbuysound,int charbreaksound,int charcamsound,int charcamsound2,int charcamsound3,int chardeathsound,int charfallsound,int charfallsound2,int charhealsound,int charhealsound2,int charhealsound3,int charhurtsound,int charinvsound,int charjumpsound,int charjumpsound2,int charkillsound,int charlandsound,int charlevsound,int charlifesound,int charmovesound,int charshakesound,int charsitsound,int charstandsound,int charswingsound,int chartelsound,int chartelsound2,int chartelsound3,int charturnsound)
{
this.weapontype=weapontype;
this.weapontype2=weapontype2;
this.shieldtype=shieldtype;
this.shieldweight=shieldweight;
this.attack=attack;
this.defence=defence;
this.points=points;
this.fallmod=fallmod;
this.health=health;
this.maxhealth=maxhealth;
this.kills=kills;
this.lifecard=lifecard;
this.level=level;
this.levmod=levmod;
this.xp=xp;
this.xpmod=xpmod;
this.xprequiered=xprequiered;
this.charbuysound=charbuysound;
this.charbreaksound=charbreaksound;
this.charcamsound=charcamsound;
this.charcamsound2=charcamsound2;
this.charcamsound3=charcamsound3;
this.chardeathsound=chardeathsound;
this.charfallsound=charfallsound;
this.charfallsound2=charfallsound2;
this.charhurtsound=charhurtsound;
this.charhealsound=charhealsound;
this.charhealsound2=charhealsound2;
this.charhealsound3=charhealsound3;
this.charinvsound=charinvsound;
this.charjumpsound=charjumpsound;
this.charjumpsound2=charjumpsound2;
this.charkillsound=charkillsound;
this.charlandsound=charlandsound;
this.charlevsound=charlevsound;
this.charlifesound=charlifesound;
this.charmovesound=charmovesound;
this.charshakesound=charshakesound;
this.charsitsound=charsitsound;
this.charstandsound=charstandsound;
this.charswingsound=charswingsound;
this.chartelsound=chartelsound;
this.chartelsound2=chartelsound2;
this.chartelsound3=chartelsound3;
this.charturnsound=charturnsound;
}
}
void add_character(const string&in weapontype,const string&in weapontype2,const string&in shieldtype,int shieldweight,double attack,double defence,double points,double fallmod,double health,double maxhealth,double kills,double lifecard,double level,double levmod,double xp,double xpmod,double xprequiered,int charbuysound,int charbreaksound,int charcamsound,int charcamsound2,int charcamsound3,int chardeathsound,int charfallsound,int charfallsound2,int charhealsound,int charhealsound2,int charhealsound3,int charhurtsound,int charinvsound,int charjumpsound,int charjumpsound2,int charkillsound,int charlandsound,int charlevsound,int charlifesound,int charmovesound,int charshakesound,int charsitsound,int charstandsound,int charswingsound,int chartelsound,int chartelsound2,int chartelsound3,int charturnsound)
{
character ch1(weapontype,weapontype2,shieldtype,shieldweight,attack,defence,points,fallmod,health,maxhealth,kills,lifecard,level,levmod,xp,xpmod,xprequiered,charbuysound,charbreaksound,charcamsound,charcamsound2,charcamsound3,chardeathsound,charfallsound,charfallsound2,charhealsound,charhealsound2,charhealsound3,charhurtsound,charinvsound,charjumpsound,charjumpsound2,charkillsound,charlandsound,charlevsound,charlifesound,charmovesound,charshakesound,charsitsound,charstandsound,charswingsound,chartelsound,chartelsound2,chartelsound3,charturnsound);
charas.insert_last(ch1);
}
void destroy_all_charas()
{
charas.resize(0);
}

shield@[]shields(0);
class shield
{
double shielddefence;
int shieldmode;
int shieldweight;
double shieldstrength;
double maxshieldstrength;
double shieldlevel;
int shieldbreaksound;
int shielddrawsound;
int shieldhitsound;
int shieldloopsound;
int shieldremovesound;
int shieldwearsound;
shield(double shielddefence,int shieldmode,int shieldweight,double shieldstrength,double maxshieldstrength,double shieldlevel,int shieldbreaksound,int shielddrawsound,int shieldhitsound,int shieldloopsound,int shieldremovesound,int shieldwearsound)
{
this.shielddefence=shielddefence;
this.shieldmode=shieldmode;
this.shieldweight=shieldweight;
this.shieldstrength=shieldstrength;
this.maxshieldstrength=maxshieldstrength;
this.shieldlevel=shieldlevel;
this.shieldbreaksound=shieldbreaksound;
this.shielddrawsound=shielddrawsound;
this.shieldhitsound=shieldhitsound;
this.shieldloopsound=shieldloopsound;
this.shieldremovesound=shieldremovesound;
this.shieldwearsound=shieldwearsound;
}
}
void add_shield(double shielddefence,int shieldmode,int shieldweight,double shieldstrength,double maxshieldstrength,double shieldlevel,int shieldbreaksound,int shielddrawsound,int shieldhitsound,int shieldloopsound,int shieldremovesound,int shieldwearsound)
{
shield sd1(shielddefence,shieldmode,shieldweight,shieldstrength,maxshieldstrength,shieldlevel,shieldbreaksound,shielddrawsound,shieldhitsound,shieldloopsound,shieldremovesound,shieldwearsound);
shields.insert_last(sd1);
}
void destroy_all_shields()
{
shields.resize(0);
}

weapon@[]weapons(0);
class weapon
{
int wepdamage;
int wephold;
int weprange;
int weprange2;
int wepspeed;
int weapontime;
int weapontime2;
int wepweight;
double ammo;
double loadedammo;
double maxammo;
double weplevel;
int wepdrawsound;
int wepemptysound;
int wepfiresound;
int wephitsound;
int weploopsound;
int weprecsound;
int wepreloadsound;;
int wepshellsound;
weapon(int wepdamage,int wephold,int weprange,int weprange2,int wepspeed,int weapontime,int weapontime2,int wepweight,double ammo,double loadedammo,double maxammo,double weplevel,int wepdrawsound,int wepemptysound,int wepfiresound,int wephitsound,int weploopsound,int weprecsound,int wepreloadsound,int wepshellsound)
{
this.wepdamage=wepdamage;
this.wephold=wephold;
this.weprange=weprange;
this.weprange2=weprange2;
this.wepspeed=wepspeed;
this.weapontime=weapontime;
this.weapontime2=weapontime2;
this.wepweight=wepweight;
this.ammo=ammo;
this.loadedammo=loadedammo;
this.maxammo=maxammo;
this.weplevel=weplevel;
this.wepdrawsound=wepdrawsound;
this.wepemptysound=wepemptysound;
this.wepfiresound=wepfiresound;
this.wephitsound=wephitsound;
this.weploopsound=weploopsound;
this.weprecsound=weprecsound;
this.wepreloadsound=wepreloadsound;
this.wepshellsound=wepshellsound;
}
}
void add_weapon(int wepdamage,int wephold,int weprange,int weprange2,int wepspeed,int weapontime,int weapontime2,int wepweight,double ammo,double loadedammo,double maxammo,double weplevel,int wepdrawsound,int wepemptysound,int wepfiresound,int wephitsound,int weploopsound,int weprecsound,int wepreloadsound,int wepshellsound)
{
weapon wp1(wepdamage,wephold,weprange,weprange2,wepspeed,weapontime,weapontime2,wepweight,ammo,loadedammo,maxammo,weplevel,wepdrawsound,wepemptysound,wepfiresound,wephitsound,weploopsound,weprecsound,wepreloadsound,wepshellsound);
weapons.insert_last(wp1);
}
void destroy_all_weapons()
{
weapons.resize(0);
}

void break_charbones(int chance, int dmg, int st, int count = 1)
{
int breaks = 0;
array<string> messages;
for (int i = 0; i < count; i++)
{
int oldsize = broken_bones.get_size();
array<string>@ keys = broken_bones.get_keys();
string oldkeys = string_join(keys, ",");
stundir = st;
attacktype = clean_lines("sounds/" + soundpack + "/characters/" + chartype + "/attacks.sif");
bodypart = clean_lines("sounds/" + soundpack + "/characters/" + chartype + "/bodyparts.sif");
randomattacktype = random_string(attacktype);
randombodypart = random_string(bodypart);
string spoken_bodypart = randombodypart.replace("_", " ");
if (random(0, 100) < chance && !broken_bones.exists(randombodypart))
{
broken_bones.set(randombodypart, randomattacktype);
bonehealth+=random(5,10);
bonebreak = true;
if (charbreaksound == 1) p.play_stationary(find_sound("sounds/" + soundpack + "/characters/" + chartype + "/*break*"), false);
stun_target("me", "", st);
bonetimer.restart();
messages.insert_last(randomattacktype + " your " + spoken_bodypart);
breaks++;
}
}
if (breaks == 0)
{
return;
}
else
{
string message = "Ouch! You just ";
if (messages.length() == 1)
{
message += messages[0] + ". Causing "+dmg+"damage.";
}
else
{
for (uint i = 0; i < messages.length(); i++)
{
message += messages[i];
if (i == messages.length() - 2)
message += ", and ";
else if (i < messages.length() - 2)
message += ", ";
else
message += ". Causing "+dmg+"damage.";
}
}
speak(message);
}
}
void bonecheck(int bt = random(2000, 4000))
{
if (bonetimer.elapsed >= bt && broken_bones.get_size() > 0)
{
array<string> keys = broken_bones.get_keys();
if (keys.length() == 0)
return;
string hurting_bone = keys[random(0, keys.length() - 1)];
string spoken_bodypart = hurting_bone.replace("_", " ");
stun_target("me", "", random(1000, 2000));
if (charhurtsound == 1) p.play_stationary(find_sound("sounds/" + soundpack + "/characters/" + chartype + "/*pain*"), false);
speak("Ouch! Your " + spoken_bodypart + " hurts!");
bonehealth+=random(5,10);
bonetimer.restart();
if(bonehealth>=maxbonehealth)
{
if(lifecard>=2)
{
if(charbreaksound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*fail*"),false);
if(charlifesound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*life*"),false);
lifecard-=1;
health=maxhealth;
hearttime=maxhealth;
bonehealth=0;
broken_bones.delete_all();
}
else if(lifecard<=1)
{
if(building==true) destroymap();
if(building==false) destroygame();
p.destroy_sound(painslot);
if(charbreaksound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*fail*"),false);
if(chardeathsound==1) dlgplay(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*death*"), true, true, 30);
dlgplay(find_sound("sounds/"+soundpack+"/objects/platforms/"+gmt(me.x,me.y)+"/*fall*"));
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("You have died. Would you like to try again?",true);
if(mres==0)
{
wait(500);
p.destroy_sound(refslot);
jumpable=false;
moveable=false;
sitting=true;
wepdef=0;
bonehealth=0;
broken_bones.delete_all();
clear_inv();
destroy_all_charas();
charparse();
}
if(mres==1)
{
wait(500);
p.destroy_sound(refslot);
jumpable=false;
moveable=false;
sitting=true;
wepdef=0;
broken_bones.delete_all();
clear_inv();
destroy_all_charas();
charparse();
}
if(mres==2)
{
p.destroy_sound(refslot);
jumpable=false;
moveable=false;
sitting=true;
wepdef=0;
broken_bones.delete_all();
clear_inv();
destroy_all_charas();
charparse();
me.x=0;
me.y=0;
if(building==true) clearmap();
if(building==true) destroymap();
if(building==true) mainmenu();
if(building==false) destroygame();
if(building==false) mainmenu();
}
}
}
}
}
void heal_bones(int amount, double remove_threshold = 0)
{
if (broken_bones.get_size() == 0) return;
array<string> keys = broken_bones.get_keys();
string target = keys[random(0, keys.length() - 1)];
string spoken_bodypart = target.replace("_", " ");
int before_health = bonehealth;
bonehealth -= amount;
int after_health = bonehealth;
if (after_health <= remove_threshold)
{
broken_bones.delete(target);
speak("Your " + spoken_bodypart + " is fully healed.");
}
else
{
speak("The healing cast reduced your " + spoken_bodypart + " damage from " + before_health + " to " + after_health + ".");
}
}

void charparse()
{
if(file_exists("sounds/"+soundpack+"/characters/"+chartype+"/info.sif"))
{
bool success=info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "rb");
if(!success)
{
mainmenu();
}
string content=info.read();
string[] lines=string_split(content,"\r\n",true);
for(uint i=0; i<lines.length(); i++)
{
string[] data=string_split(lines[i],"=",true);
if (data.length()<2)
{
alert("Error","Error reading line "+(i+1)+".");
mainmenu();
}
if (data[0]=="name")
{
name=data[1];
}
if (data[0]=="weapon type")
{
weapontype=data[1];
}
if (data[0]=="weapon type2")
{
weapontype2=data[1];
}
if (data[0]=="shield type")
{
shieldtype=data[1];
}
if (data[0]=="shield weight")
{
shieldweight=parse_int(data[1]);
}
if (data[0]=="attack")
{
attack=parse_double(data[1]);
}
if (data[0]=="defence")
{
defence=parse_double(data[1]);
}
if (data[0]=="points")
{
points=parse_double(data[1]);
}
if (data[0]=="fall modifier")
{
fallmod=parse_double(data[1]);
}
if (data[0]=="health")
{
health=parse_double(data[1]);
maxhealth=parse_double(data[1]);
}
if (data[0]=="kills")
{
kills=parse_double(data[1]);
}
if (data[0]=="lives")
{
lifecard=parse_double(data[1]);
}
if (data[0]=="level")
{
level=parse_double(data[1]);
}
if (data[0]=="level modifier")
{
levmod=parse_double(data[1]);
}
if (data[0]=="experience")
{
xp=parse_double(data[1]);
}
if (data[0]=="experience modifier")
{
xpmod=parse_double(data[1]);
}
if (data[0]=="experience required")
{
xprequiered=parse_double(data[1]);
}
if(data[0]=="buy sound")
{
charbuysound=parse_int(data[1]);
}
if(data[0]=="break sound")
{
charbreaksound=parse_int(data[1]);
}
if(data[0]=="cam sound")
{
charcamsound=parse_int(data[1]);
}
if(data[0]=="cam sound2")
{
charcamsound2=parse_int(data[1]);
}
if(data[0]=="cam sound3")
{
charcamsound3=parse_int(data[1]);
}
if(data[0]=="death sound")
{
chardeathsound=parse_int(data[1]);
}
if(data[0]=="fall sound")
{
charfallsound=parse_int(data[1]);
}
if(data[0]=="fall sound2")
{
charfallsound2=parse_int(data[1]);
}
if(data[0]=="heal sound")
{
charhealsound=parse_int(data[1]);
}
if(data[0]=="heal sound2")
{
charhealsound2=parse_int(data[1]);
}
if(data[0]=="heal sound3")
{
charhealsound3=parse_int(data[1]);
}
if(data[0]=="hurt sound")
{
charhurtsound=parse_int(data[1]);
}
if(data[0]=="inv sound")
{
charinvsound=parse_int(data[1]);
}
if(data[0]=="jump sound")
{
charjumpsound=parse_int(data[1]);
}
if(data[0]=="jump sound2")
{
charjumpsound2=parse_int(data[1]);
}
if(data[0]=="land sound")
{
charlandsound=parse_int(data[1]);
}
if(data[0]=="kill sound")
{
charkillsound=parse_int(data[1]);
}
if(data[0]=="lev sound")
{
charlevsound=parse_int(data[1]);
}
if(data[0]=="life sound")
{
charlifesound=parse_int(data[1]);
}
if(data[0]=="move sound")
{
charmovesound=parse_int(data[1]);
}
if(data[0]=="rock sound")
{
charshakesound=parse_int(data[1]);
}
if(data[0]=="sit sound")
{
charsitsound=parse_int(data[1]);
}
if(data[0]=="stand sound")
{
charstandsound=parse_int(data[1]);
}
if(data[0]=="swing sound")
{
charswingsound=parse_int(data[1]);
}
if(data[0]=="tel sound")
{
chartelsound=parse_int(data[1]);
}
if(data[0]=="tel sound2")
{
chartelsound2=parse_int(data[1]);
}
if(data[0]=="tel sound3")
{
chartelsound3=parse_int(data[1]);
}
if(data[0]=="turn sound")
{
charturnsound=parse_int(data[1]);
}
}
add_character(weapontype, weapontype2, shieldtype, shieldweight, attack, defence, points, fallmod, health, health, kills, lifecard, level, levmod, xp, xpmod, xprequiered, charbuysound, charbreaksound, charcamsound, charcamsound2, charcamsound3, chardeathsound, charfallsound, charfallsound2, charhealsound, charhealsound2, charhealsound3, charhurtsound, charinvsound, charjumpsound, charjumpsound2, charkillsound, charlandsound, charlevsound, charlifesound, charmovesound, charshakesound, charsitsound, charstandsound, charswingsound, chartelsound, chartelsound2, chartelsound3, charturnsound);
}
}
void arseparse(string wepcad)
{
if(file_exists("sounds/"+soundpack+"/equipments/weapons/"+wepcad+"/"+weapontype2+"/info.sif"))
{
bool success=info.open("sounds/"+soundpack+"/equipments/weapons/"+wepcad+"/"+weapontype2+"/info.sif", "rb");
if(!success)
{
mainmenu();
}
string content=info.read();
string[] lines=string_split(content,"\r\n",true);
for(uint i=0; i<lines.length(); i++)
{
string[] data=string_split(lines[i],"=",true);
if (data.length()<2)
{
alert("Error","Error reading line "+(i+1)+".");
mainmenu();
}
if (data[0]=="name")
{
name=data[1];
}
if (data[0]=="damage")
{
wepdamage=parse_int(data[1]);
}
if (data[0]=="mode")
{
wephold=parse_int(data[1]);
}
if (data[0]=="horizontal range")
{
weprange=parse_int(data[1]);
}
if (data[0]=="vertical range")
{
weprange2=parse_int(data[1]);
}
if (data[0]=="bullet speed")
{
wepspeed=parse_int(data[1]);
}
if (data[0]=="repeat time")
{
weapontime=parse_int(data[1]);
}
if (data[0]=="spam time")
{
weapontime2=parse_int(data[1]);
}
if (data[0]=="weight")
{
wepweight=parse_int(data[1]);
}
if (data[0]=="ammo")
{
ammo=parse_double(data[1]);
}
if (data[0]=="loaded ammo")
{
loadedammo=parse_double(data[1]);
}
if (data[0]=="max ammo")
{
maxammo=parse_double(data[1]);
}
if (data[0]=="unlock level")
{
weplevel=parse_double(data[1]);
}
if(data[0]=="draw sound")
{
wepdrawsound=parse_int(data[1]);
}
if(data[0]=="empty sound")
{
wepemptysound=parse_int(data[1]);
}
if(data[0]=="fire sound")
{
wepfiresound=parse_int(data[1]);
}
if(data[0]=="hit sound")
{
wephitsound=parse_int(data[1]);
}
if(data[0]=="loop sound")
{
weploopsound=parse_int(data[1]);
}
if(data[0]=="rec sound")
{
weprecsound=parse_int(data[1]);
}
if(data[0]=="reload sound")
{
wepreloadsound=parse_int(data[1]);
}
if(data[0]=="shell sound")
{
wepshellsound=parse_int(data[1]);
}
}
add_weapon(wepdamage, wephold, weprange, weprange2, wepspeed, weapontime, weapontime2, wepweight, ammo, loadedammo, maxammo, weplevel, wepdrawsound, wepemptysound, wepfiresound, wephitsound, weploopsound, weprecsound, wepreloadsound, wepshellsound);
}
}
void shieldparse()
{
if(file_exists("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/info.sif"))
{
bool success=info.open("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/info.sif", "rb");
if(!success)
{
mainmenu();
}
string content=info.read();
string[] lines=string_split(content,"\r\n",true);
for(uint i=0; i<lines.length(); i++)
{
string[] data=string_split(lines[i],"=",true);
if (data.length()<2)
{
alert("Error","Error reading line "+(i+1)+".");
mainmenu();
}
if (data[0]=="name")
{
name=data[1];
}
if (data[0]=="defence")
{
shielddefence=parse_int(data[1]);
}
if (data[0]=="mode")
{
shieldmode=parse_int(data[1]);
}
if (data[0]=="weight")
{
shieldweight=parse_int(data[1]);
}
if (data[0]=="shield strength")
{
shieldstrength=parse_double(data[1]);
maxshieldstrength=parse_double(data[1]);
}
if (data[0]=="unlock level")
{
shieldlevel=parse_double(data[1]);
}
if(data[0]=="break sound")
{
shieldbreaksound=parse_int(data[1]);
}
if(data[0]=="draw sound")
{
shielddrawsound=parse_int(data[1]);
}
if(data[0]=="hit sound")
{
shieldhitsound=parse_int(data[1]);
}
if(data[0]=="loop sound")
{
shieldloopsound=parse_int(data[1]);
}
if(data[0]=="remove sound")
{
shieldremovesound=parse_int(data[1]);
}
if(data[0]=="wear sound")
{
shieldwearsound=parse_int(data[1]);
}
}
add_shield(shielddefence, shieldmode, shieldweight, shieldstrength, shieldstrength, shieldlevel, shieldbreaksound, shielddrawsound, shieldhitsound, shieldloopsound, shieldremovesound, shieldwearsound);
}
}
void weaponparse()
{
arseparse("archery");
arseparse("artillery");
arseparse("explosive");
arseparse("melee");
}

void update_char_attack(double new_attack)
{
    if (info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "r")) {
        string content = info.read();
        info.close();        
        int attack_pos = string_contains(content, "attack=", 1);
        if (attack_pos != -1) {
            int value_start = attack_pos + 7;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_attack = string_trim_sides(content.substr(value_start, value_end));            
            string old_value = "attack=" + current_attack;
            string new_value = "attack=" + string(new_attack);
            content = string_replace(content, old_value, new_value, true);
            if (info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("Attack stat updated successfully.");
                } else {
                    speak("Failed to write updated attack stat to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("Attack stat not found in file.");
        }
    } else {
        speak("Failed to open file for reading.");
    }
}
void update_char_defence(double new_defence)
{
    if (info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "r")) {
        string content = info.read();
        info.close();
        int defence_pos = string_contains(content, "defence=", 1);
        if (defence_pos != -1) {
            int value_start = defence_pos + 8;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_defence = string_trim_sides(content.substr(value_start, value_end));
            string old_value = "defence=" + current_defence;
            string new_value = "defence=" + string(new_defence);
            content = string_replace(content, old_value, new_value, true);
            if (info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("Defence stat updated successfully.");
                } else {
                    speak("Failed to write updated defence stat to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("Defence stat not found in file.");
        }
    } else {
        speak("Failed to open file for reading.");
    }
}
void update_char_maxhealth(double new_maxhealth)
{
    if (info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "r")) {
        string content = info.read();
        info.close();
        int maxhealth_pos = string_contains(content, "health=", 1);
        if (maxhealth_pos != -1) {
            int value_start = maxhealth_pos + 5;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_maxhealth = string_trim_sides(content.substr(value_start, value_end));
            string old_value = "health=" + current_maxhealth;
            string new_value = "health=" + string(new_maxhealth);
            content = string_replace(content, old_value, new_value, true);
            int health_pos = string_contains(content, "health=", 1);
            if (health_pos != -1) {
                value_start = health_pos + 7;
                value_end = string_contains(content.substr(value_start), "\r\n", 1);
                if (value_end == -1) value_end = content.length() - value_start;
                string current_health = string_trim_sides(content.substr(value_start, value_end));
                old_value = "health=" + current_health;
                new_value = "health=" + string(new_maxhealth);
                content = string_replace(content, old_value, new_value, true);
            }
            if (info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("Max health stat updated successfully.");
                } else {
                    speak("Failed to write updated health stats to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("health stat not found in file.");
        }
    } else {
        speak("Failed to open file for reading.");
    }
}
void update_char_lives(double new_lives)
{
    if (info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "r")) {
        string content = info.read();
        info.close();        
        int lives_pos = string_contains(content, "lives=", 1);
        if (lives_pos != -1) {
            int value_start = lives_pos + 6;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_lives = string_trim_sides(content.substr(value_start, value_end));            
            string old_value = "lives=" + current_lives;
            string new_value = "lives=" + string(new_lives);
            content = string_replace(content, old_value, new_value, true);
            if (info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("lives stat updated successfully.");
                } else {
                    speak("Failed to write updated lives stat to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("lives stat not found in file.");
        }
    } else {
        speak("Failed to open file for reading.");
    }
}
void update_wep_ammo(double new_ammo)
{
    if (info.open("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/info.sif", "r")) {
        string content = info.read();
        info.close();
        int ammo_pos = string_contains(content, "ammo=", 1);
        if (ammo_pos != -1) {
            int value_start = ammo_pos + 5;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_ammo = string_trim_sides(content.substr(value_start, value_end));
            string old_value = "ammo=" + current_ammo;
            string new_value = "ammo=" + string(new_ammo);
            content = string_replace(content, old_value, new_value, true);
            if (info.open("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("Ammo stat updated successfully.");
                } else {
                    speak("Failed to write updated ammo stat to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("Ammo stat not found in file.");
        }
    } else {
        speak("Failed to open file for reading.");
    }
}
void update_wep_hl_range(int new_hl_range)
{
    if (info.open("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/info.sif", "r")) {
        string content = info.read();
        info.close();
        int range_pos = string_contains(content, "horizontal range=", 1);
        if (range_pos != -1) {
            int value_start = range_pos + 17;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_hl_range = string_trim_sides(content.substr(value_start, value_end));
            string old_value = "horizontal range=" + current_hl_range;
            string new_value = "horizontal range=" + string(new_hl_range);
            content = string_replace(content, old_value, new_value, true);
            if (info.open("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("Horizontal range stat updated successfully.");
                } else {
                    speak("Failed to write updated horizontal range stat to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("Horizontal range stat not found in file.");
        }
    } else {
        speak("Failed to open file for reading.");
    }
}
void update_wep_vl_range(int new_vl_range)
{
        if (info.open("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/info.sif", "r")) {
        string content = info.read();
        info.close();
        int range_pos = string_contains(content, "vertical range=", 1);
        if (range_pos != -1) {
            int value_start = range_pos + 15;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_vl_range = string_trim_sides(content.substr(value_start, value_end));
            string old_value = "vertical range=" + current_vl_range;
            string new_value = "vertical range=" + string(new_vl_range);
            content = string_replace(content, old_value, new_value, true);
            if (info.open("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("Vertical range stat updated successfully.");
                } else {
                    speak("Failed to write updated vertical range stat to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("Vertical range stat not found in file.");
        }
    } else {
        speak("Failed to open file for reading");
    }
}
void update_shield_max_strength(double new_max_strength)
{
    if (info.open("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/info.sif", "r")) {
        string content = info.read();
        info.close();
        int max_strength_pos = string_contains(content, "max shield strength=", 1);
        if (max_strength_pos != -1) {
            int value_start = max_strength_pos + 20;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_max_strength = string_trim_sides(content.substr(value_start, value_end));
            string old_value = "max shield strength=" + current_max_strength;
            string new_value = "max shield strength=" + string(new_max_strength);
            content = string_replace(content, old_value, new_value, true);
            int strength_pos = string_contains(content, "shield strength=", 1);
            if (strength_pos != -1) {
                value_start = strength_pos + 16;
                value_end = string_contains(content.substr(value_start), "\r\n", 1);
                if (value_end == -1) value_end = content.length() - value_start;
                string current_strength = string_trim_sides(content.substr(value_start, value_end));
                old_value = "shield strength=" + current_strength;
                new_value = "shield strength=" + string(new_max_strength);
                content = string_replace(content, old_value, new_value, true);
            }
            if (info.open("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("Max shield strength and shield strength stats updated successfully.");
                } else {
                    speak("Failed to write updated shield strength stats to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("Max shield strength stat not found in file.");
        }
    } else {
        speak("Failed to open file for reading.");
    }
}
void update_shield_defence(double new_shield_defence)
{
    if (info.open("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/info.sif", "r")) {
        string content = info.read();
        info.close();
        int shield_defence_pos = string_contains(content, "defence=", 1);
        if (shield_defence_pos != -1) {
            int value_start = shield_defence_pos + 8;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_shield_defence = string_trim_sides(content.substr(value_start, value_end));
            string old_value = "defence=" + current_shield_defence;
            string new_value = "defence=" + string(new_shield_defence);
            content = string_replace(content, old_value, new_value, true);
            if (info.open("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("Shield defence updated successfully.");
                } else {
                    speak("Failed to write updated shield defence to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("Shield defence not found in file.");
        }
    } else {
        speak("Failed to open file for reading.");
    }
}
